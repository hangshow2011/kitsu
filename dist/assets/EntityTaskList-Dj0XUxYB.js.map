{"version":3,"file":"EntityTaskList-Dj0XUxYB.js","sources":["../../src/components/mixins/entity.js","../../src/components/pages/entities/EntityNews.vue","../../src/components/pages/entities/EntityPreviewFiles.vue","../../src/components/pages/entities/EntityTimeLogs.vue","../../src/components/lists/EntityTaskList.vue"],"sourcesContent":["import moment from 'moment'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport {\n  daysToMinutes,\n  getBusinessDays,\n  getFirstStartDate,\n  getLastEndDate,\n  parseDate,\n  parseSimpleDate\n} from '@/lib/time'\n\n/*\n * Common functions for shot, asset, edit, sequncen and edit pages.\n */\nexport const entityMixin = {\n  data() {\n    return {\n      currentSection: 'Casting',\n      zoomLevel: 1,\n      entityNavOptions: [\n        { label: 'Infos', value: 'infos' },\n        { label: 'Casting', value: 'casting' },\n        { label: 'Schedule', value: 'schedule' },\n        { label: 'Preview Files', value: 'preview-files' },\n        { label: 'Timelog', value: 'time-logs' }\n      ],\n      zoomOptions: [\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ]\n    }\n  },\n\n  created() {},\n\n  mounted() {},\n\n  beforeDestroy() {},\n\n  computed: {\n    ...mapGetters(['organisation']),\n\n    entityTabs() {\n      return this.entityNavOptions.map(option => {\n        return {\n          label: option.label,\n          name: option.value\n        }\n      })\n    },\n\n    thumbnailPath() {\n      const previewId = this.currentEntity.preview_file_id\n      return `/api/pictures/originals/preview-files/${previewId}.png`\n    },\n\n    isPreview() {\n      return (\n        this.currentEntity &&\n        this.currentEntity.preview_file_id &&\n        this.currentEntity.preview_file_id.length > 0\n      )\n    },\n\n    currentTasks() {\n      const entity =\n        this.currentAsset ||\n        this.currentShot ||\n        this.currentEdit ||\n        this.currentSequence ||\n        this.currentEpisode\n      if (!entity || !entity.tasks) return []\n      return entity\n        ? entity.tasks\n            .map(taskId => this.taskMap.get(taskId))\n            .filter(task => task)\n            .sort((a, b) => {\n              const taskTypeAPriority = this.getTaskTypePriority(a.task_type_id)\n              const taskTypeBPriority = this.getTaskTypePriority(b.task_type_id)\n              return taskTypeAPriority - taskTypeBPriority\n            })\n        : []\n    },\n\n    tasksStartDate() {\n      if (\n        this.scheduleItems.length > 0 &&\n        this.scheduleItems[0].children.length > 0\n      ) {\n        return getFirstStartDate(this.scheduleItems[0].children)\n          .clone()\n          .add(-60, 'days')\n      } else {\n        return parseDate(this.currentProduction.start_date)\n      }\n    },\n\n    tasksEndDate() {\n      if (\n        this.scheduleItems.length > 0 &&\n        this.scheduleItems[0].children.length > 0\n      ) {\n        return getLastEndDate(this.scheduleItems[0].children)\n          .clone()\n          .add(60, 'days')\n      } else {\n        return parseDate(this.currentProduction.end_date)\n      }\n    },\n\n    scheduleItems() {\n      let manDays = 0\n      const rootElement = {\n        avatar: false,\n        id: 'root',\n        name: 'Tasks',\n        color: '#888',\n        priority: 1,\n        expanded: true,\n        loading: false,\n        children: [],\n        editable: true\n      }\n      const limitStartDate = moment()\n      const children = this.currentTasks\n        .map(task => {\n          const estimation = task.estimation\n          let startDate = limitStartDate.clone()\n          let endDate\n\n          if (\n            !task.start_date &&\n            !task.real_start_date &&\n            !task.due_date &&\n            !task.end_date\n          )\n            return null\n\n          if (task.start_date) {\n            startDate = parseSimpleDate(task.start_date)\n          } else if (task.real_start_date) {\n            startDate = parseSimpleDate(task.real_start_date)\n          }\n\n          if (task.due_date) {\n            endDate = parseSimpleDate(task.due_date)\n          } else if (task.end_date) {\n            endDate = parseSimpleDate(task.end_date)\n          } else if (task.estimation) {\n            endDate = startDate.clone().add(estimation, 'days')\n          }\n\n          if (!endDate || endDate.isBefore(startDate)) {\n            endDate = startDate.clone().add(1, 'days')\n          }\n          if (estimation) manDays += task.estimation\n          const taskType = this.taskTypeMap.get(task.task_type_id)\n\n          return {\n            ...task,\n            name: taskType.name,\n            startDate: startDate,\n            endDate: endDate,\n            expanded: false,\n            loading: false,\n            man_days: estimation,\n            editable: true,\n            unresizable: false,\n            parentElement: rootElement,\n            color: taskType.color,\n            children: []\n          }\n        })\n        .filter(c => c !== null)\n      let rootStartDate = moment()\n      let rootEndDate = moment().add(1, 'days')\n      if (children.length > 0) {\n        rootStartDate = getFirstStartDate(children)\n        rootEndDate = getLastEndDate(children)\n      }\n      Object.assign(rootElement, {\n        children: children,\n        startDate: rootStartDate,\n        endDate: rootEndDate,\n        man_days: manDays\n      })\n      return [rootElement]\n    }\n  },\n\n  methods: {\n    ...mapActions(['addSelectedTask', 'clearSelectedTasks', 'updateTask']),\n\n    changeTab(tab) {\n      this.selectedTab = tab\n    },\n\n    onEditClicked() {\n      this.modals.edit = true\n    },\n\n    onTaskSelected(task) {\n      this.clearSelectedTasks()\n      if (!this.currentTask || this.currentTask.id !== task.id) {\n        this.addSelectedTask(task)\n        this.currentTask = task\n      } else {\n        this.currentTask = null\n      }\n    },\n\n    saveTaskScheduleItem(item) {\n      const daysLength = getBusinessDays(item.startDate, item.endDate)\n      const estimation = daysToMinutes(this.organisation, daysLength)\n      item.man_days = estimation\n      if (item.startDate && item.endDate) {\n        this.updateTask({\n          taskId: item.id,\n          data: {\n            estimation,\n            start_date: item.startDate.format('YYYY-MM-DD'),\n            due_date: item.endDate.format('YYYY-MM-DD')\n          }\n        })\n      }\n    }\n  },\n\n  watch: {\n    currentSection() {\n      this.$router.push({\n        query: { section: this.currentSection }\n      })\n      const schedule = this.$refs['schedule-widget']\n      if (this.currentSection === 'schedule' && schedule) {\n        schedule.scrollToToday()\n      }\n    }\n  }\n}\n","<template>\n  <div class=\"news flexcolumn\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div class=\"timeline mt1\" v-else-if=\"newsList.length\">\n      <div\n        class=\"timeline-entry flexrow\"\n        :key=\"`news-${news.id}`\"\n        v-for=\"news in newsList\"\n      >\n        <span\n          :class=\"{\n            dot: true,\n            red: hasRetakeValue(news),\n            green: hasDoneValue(news)\n          }\"\n        ></span>\n        <span class=\"date flexrow-item\">\n          {{ formatFullDate(news.created_at).substring(10, 0) }}\n        </span>\n\n        <people-avatar\n          class=\"flexrow-item\"\n          :font-size=\"14\"\n          :is-link=\"false\"\n          :person=\"personMap.get(news.author_id)\"\n          :size=\"30\"\n          v-if=\"personMap.get(news.author_id)\"\n        />\n\n        <div class=\"flexrow-item task-type-wrapper ml1\">\n          <task-type-name\n            class=\"task-type-name\"\n            :is-static=\"true\"\n            :production-id=\"currentProduction.id\"\n            :task-type=\"buildTaskTypeFromNews(news)\"\n          />\n        </div>\n\n        <div class=\"flexrow-item validation-wrapper\">\n          <validation-tag\n            :is-priority=\"false\"\n            :is-static=\"true\"\n            :task=\"buildTaskFromNews(news)\"\n            :thin=\"!news.change\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-else>\n      {{ $t('news.no_news') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport Spinner from '@/components/widgets/Spinner'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\nimport ValidationTag from '@/components/widgets/ValidationTag'\n\nexport default {\n  name: 'entity-news',\n  mixins: [formatListMixin],\n  components: {\n    PeopleAvatar,\n    Spinner,\n    TaskTypeName,\n    ValidationTag\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      newsList: []\n    }\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  mounted() {\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'personMap',\n      'taskTypeMap',\n      'taskStatusMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions(['getEntityNews']),\n\n    buildTaskFromNews(news) {\n      return {\n        task_status_id: news.task_status_id\n      }\n    },\n\n    buildTaskTypeFromNews(news) {\n      return {\n        ...this.taskTypeMap.get(news.task_type_id),\n        episode_id: news.episode_id\n      }\n    },\n\n    hasRetakeValue(news) {\n      const taskStatus = this.taskStatusMap.get(news.task_status_id)\n      return taskStatus ? news.change && taskStatus.is_retake : false\n    },\n\n    hasDoneValue(news) {\n      const taskStatus = this.taskStatusMap.get(news.task_status_id)\n      return taskStatus ? news.change && taskStatus.is_done : false\n    },\n\n    reset() {\n      if (!this.entity) {\n        return\n      }\n      this.isLoading = true\n      this.getEntityNews(this.entity.id)\n        .then(data => {\n          this.newsList = data.data\n        })\n        .catch(err => {\n          console.error(err)\n          this.newsList = []\n        })\n        .finally(() => {\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity() {\n      this.reset()\n    }\n  },\n\n  socket: {\n    events: {\n      'news:new'(eventData) {\n        if (\n          eventData.project_id === this.currentProduction.id &&\n          (!this.taskTypeId || this.taskTypeId === eventData.task_type_id) &&\n          (!this.taskStatusId || this.taskStatusId === eventData.task_status_id)\n        ) {\n          this.reset()\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.news {\n  overflow: auto;\n}\n\n.timeline {\n  border-left: 4px solid $blue-light;\n  margin-left: 8px;\n  padding-bottom: 1em;\n  margin-bottom: 1em;\n\n  .timeline-entry {\n    padding: 0.5em;\n    position: relative;\n\n    .dot {\n      position: absolute;\n      display: block;\n      left: -9px;\n      background: $blue-light;\n      width: 14px;\n      height: 14px;\n      border-radius: 16px;\n      z-index: 10;\n\n      &.red {\n        background: $red;\n      }\n\n      &.green {\n        background: $light-green;\n      }\n    }\n  }\n\n  .date {\n    min-width: 30px;\n    margin-left: 0.5em;\n    margin-right: 3em;\n    font-size: 0.8em;\n    color: $grey;\n  }\n\n  .task-type-wrapper {\n    min-width: 100px;\n  }\n\n  .validation-wrapper {\n    min-width: 60px;\n  }\n}\n</style>\n","<template>\n  <div class=\"mt1 flexcolumn wrapper preview-files\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div v-else-if=\"previewFiles.length > 0\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr class=\"datatable-row-header\">\n            <th class=\"thumbnail\"></th>\n            <th class=\"type\">\n              {{ $t('entities.preview_files.task_type') }}\n            </th>\n            <th class=\"original-name\">\n              {{ $t('entities.preview_files.original_file_name') }}\n            </th>\n            <th class=\"revision\">\n              {{ $t('entities.preview_files.revision') }}\n            </th>\n            <th class=\"extension\">\n              {{ $t('entities.preview_files.extension') }}\n            </th>\n            <th class=\"size\">\n              {{ $t('entities.preview_files.size') }}\n            </th>\n            <th class=\"status\">\n              {{ $t('entities.preview_files.status') }}\n            </th>\n            <th class=\"person\">\n              {{ $t('entities.preview_files.uploader') }}\n            </th>\n            <th class=\"end-cell\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\">\n          <tr\n            :key=\"previewFile.id\"\n            class=\"datatable-row\"\n            v-for=\"previewFile in previewFiles\"\n          >\n            <td class=\"thumbnail\">\n              <entity-thumbnail\n                class=\"preview-thumbnail\"\n                :preview-file-id=\"previewFile.id\"\n                :empty-width=\"60\"\n                :width=\"60\"\n              />\n            </td>\n\n            <task-type-cell\n              class=\"type\"\n              :task-type=\"getTaskType(previewFile)\"\n              :production-id=\"currentProduction.id\"\n            />\n            <td class=\"original-name\">\n              {{ previewFile.original_name }}\n            </td>\n            <td class=\"revision\">\n              {{ previewFile.revision }}\n            </td>\n            <td class=\"extension\">\n              {{ previewFile.extension }}\n            </td>\n            <td class=\"size\">\n              {{ renderFileSize(previewFile.file_size) }}\n            </td>\n            <td class=\"status\">\n              {{ previewFile.validation_status }}\n            </td>\n            <people-name-cell\n              class=\"person\"\n              :person=\"personMap.get(previewFile.person_id)\"\n            />\n\n            <td class=\"download\">\n              <a\n                class=\"button flexrow-item\"\n                :href=\"getDownloadPath(previewFile.id)\"\n                :title=\"$t('playlists.actions.download_file')\"\n                v-if=\"!isCurrentUserArtist\"\n              >\n                <download-icon class=\"icon is-small\" />\n              </a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-else>\n      {{ $t('entities.preview_files.no_preview_files') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { DownloadIcon } from 'vue-feather-icons'\nimport { renderFileSize } from '@/lib/render'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport Spinner from '@/components/widgets/Spinner'\nimport TaskTypeCell from '@/components/cells/TaskTypeCell'\n\nexport default {\n  name: 'entity-preview-files',\n  components: {\n    DownloadIcon,\n    EntityThumbnail,\n    PeopleNameCell,\n    Spinner,\n    TaskTypeCell\n  },\n\n  data() {\n    return {\n      isLoading: false,\n      previewFiles: []\n    }\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  mounted() {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'isCurrentUserArtist',\n      'personMap',\n      'taskMap',\n      'taskTypeMap'\n    ])\n  },\n\n  methods: {\n    ...mapActions(['getEntityPreviewFiles']),\n\n    getTaskType(previewFile) {\n      const task = this.taskMap.get(previewFile.task_id)\n      return this.taskTypeMap.get(task.task_type_id)\n    },\n\n    getDownloadPath(previewFileId) {\n      const type = this.isMovie ? 'movies' : 'pictures'\n      return (\n        `/api/${type}/originals/preview-files/` + `${previewFileId}/download`\n      )\n    },\n\n    renderFileSize,\n\n    reset() {\n      this.isLoading = true\n      this.getEntityPreviewFiles(this.entity.id)\n        .then(previewFiles => {\n          this.previewFiles = previewFiles\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.previewFiles = []\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity() {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body {\n  overflow-y: auto;\n}\n\ntable.datatable {\n  table-layout: fixed;\n}\n\nth.thumbnail {\n  padding-top: 10px;\n  width: 80px;\n}\n\ntd.thumbnail {\n  width: 80px;\n}\n\ntd.type {\n  width: 100px;\n}\n.revision {\n  width: 80px;\n}\n.extension {\n  width: 80px;\n}\n.size {\n  width: 50px;\n}\n.status {\n  width: 80px;\n}\n.download {\n  width: 40px;\n}\n\n.original-name {\n  width: 250px;\n}\n.person {\n  width: 250px;\n}\n\n.preview-files {\n  overflow-y: auto;\n}\n.dark .preview-files.wrapper {\n  background: transparent;\n}\n\n.preview-thumbnail {\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n","<template>\n  <div class=\"mt1 wrapper time-logs\">\n    <div class=\"has-text-centered\" v-if=\"isLoading\">\n      <spinner />\n    </div>\n    <div v-else-if=\"logs.length > 0\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr class=\"datatable-row-header\">\n            <th class=\"date\">\n              {{ $t('main.date') }}\n            </th>\n            <th class=\"person\">\n              {{ $t('main.person') }}\n            </th>\n            <th class=\"type\">\n              {{ $t('entities.preview_files.task_type') }}\n            </th>\n            <th class=\"duration\">\n              {{ $t('tasks.fields.duration') }}\n            </th>\n            <th class=\"end-cell\"></th>\n          </tr>\n        </thead>\n      </table>\n      <table class=\"datatable\">\n        <tbody class=\"datatable-body\">\n          <tr :key=\"log.id\" class=\"datatable-row\" v-for=\"log in logs\">\n            <td class=\"date\">\n              {{ formatSimpleDate(log.date) }}\n            </td>\n            <people-name-cell\n              class=\"person\"\n              :person=\"personMap.get(log.person_id)\"\n            />\n            <task-type-cell\n              class=\"type\"\n              :task-type=\"getTaskType(log)\"\n              :production-id=\"currentProduction.id\"\n            />\n            <td class=\"duration\">\n              {{ formatDuration(log.duration) }}\n            </td>\n            <td class=\"end-cell\"></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <div v-else>\n      {{ $t('entities.logs.no_logs') }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport Spinner from '@/components/widgets/Spinner'\nimport TaskTypeCell from '@/components/cells/TaskTypeCell'\n\nexport default {\n  name: 'entity-time-logs',\n  mixins: [formatListMixin],\n  components: {\n    PeopleNameCell,\n    Spinner,\n    TaskTypeCell\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      logs: [],\n      isLoading: false\n    }\n  },\n\n  mounted() {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters(['currentProduction', 'personMap', 'taskMap', 'taskTypeMap'])\n  },\n\n  methods: {\n    ...mapActions(['getEntityTimeLogs']),\n\n    getTaskType(log) {\n      const task = this.taskMap.get(log.task_id)\n      return this.taskTypeMap.get(task.task_type_id)\n    },\n\n    reset() {\n      this.isLoading = true\n      this.getEntityTimeLogs(this.entity.id)\n        .then(logs => {\n          this.logs = logs\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.logs = []\n          this.isLoading = false\n        })\n    }\n  },\n\n  watch: {\n    entity() {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.date {\n  width: 100px;\n}\n.person {\n  width: 200px;\n}\n.type {\n  width: 150px;\n}\n.duration {\n  width: 50px;\n}\n\n.time-logs {\n  overflow-y: auto;\n}\n\n.dark .wrapper.time-logs {\n  background: transparent;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <div>\n      <table class=\"datatable\" ref=\"headerWrapper\">\n        <thead class=\"datatable-head\">\n          <tr class=\"datatable-row-header\">\n            <th class=\"type\">\n              {{ $t('tasks.fields.task_type') }}\n            </th>\n            <th class=\"status\">\n              {{ $t('tasks.fields.task_status') }}\n            </th>\n            <th class=\"estimation\">\n              {{ $t('tasks.fields.estimation').substring(0, 3) }}.\n            </th>\n            <th class=\"estimation\">\n              {{ $t('tasks.fields.duration').substring(0, 3) }}.\n            </th>\n            <th class=\"startdate\">\n              {{ $t('tasks.fields.start_date_short') }}\n            </th>\n            <th class=\"duedate\">\n              {{ $t('tasks.fields.due_date') }}\n            </th>\n            <th class=\"assignees\">\n              {{ $t('tasks.fields.assignees') }}\n            </th>\n            <th class=\"end-cell\"></th>\n          </tr>\n        </thead>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <div\n      class=\"task-list-body\"\n      v-scroll=\"onBodyScroll\"\n      v-if=\"entries.length > 0\"\n    >\n      <table class=\"datatable\">\n        <tbody class=\"datatable-body\">\n          <tr\n            :key=\"task.id\"\n            :class=\"{\n              selected: currentTask && currentTask.id === task.id,\n              'datatable-row': true,\n              'datatable-row--selectable': true\n            }\"\n            @click=\"selectTask(task)\"\n            v-for=\"task in sortedEntries\"\n          >\n            <task-type-cell\n              class=\"type\"\n              :task-type=\"getTaskType(task.id)\"\n              :production-id=\"currentProduction.id\"\n              :task-id=\"task.id\"\n              v-if=\"getTaskType(task.id)\"\n            />\n            <td class=\"status\">\n              <validation-tag\n                :task=\"getTask(task.id)\"\n                :is-static=\"true\"\n                v-if=\"getTask(task.id)\"\n              />\n            </td>\n            <td class=\"estimation\">\n              {{ getTaskEstimation(task) }}\n            </td>\n            <td class=\"estimation\">\n              {{ getTaskDuration(task) }}\n            </td>\n            <td class=\"startdate\">\n              {{ getTaskStartDate(task) }}\n            </td>\n            <td class=\"duedate\">\n              {{ getTaskDueDate(task) }}\n            </td>\n            <td class=\"assignees\">\n              <div\n                class=\"flexrow\"\n                v-if=\"!isCurrentUserClient && !isCurrentUserVendor\"\n              >\n                <div\n                  class=\"avatar-wrapper\"\n                  :key=\"personId\"\n                  v-for=\"personId in getAssignees(task)\"\n                >\n                  <people-avatar\n                    class=\"person-avatar flexrow-item\"\n                    :key=\"task.id + '-' + personId\"\n                    :person=\"personMap.get(personId)\"\n                    :size=\"30\"\n                    :font-size=\"15\"\n                  />\n                </div>\n              </div>\n            </td>\n            <td class=\"end-cell\"></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport TaskTypeCell from '@/components/cells/TaskTypeCell'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport ValidationTag from '@/components/widgets/ValidationTag'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\n\nexport default {\n  name: 'entity-task-list',\n  mixins: [formatListMixin],\n\n  components: {\n    TableInfo,\n    TaskTypeCell,\n    PeopleAvatar,\n    ValidationTag\n  },\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      currentTask: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentProduction',\n      'getTaskTypePriority',\n      'isCurrentUserClient',\n      'isCurrentUserVendor',\n      'personMap',\n      'taskMap',\n      'taskTypeMap'\n    ]),\n\n    sortedEntries() {\n      return [...this.entries].sort((taskA, taskB) => {\n        if (!taskA) return false\n        const taskTypeA = this.taskTypeMap.get(taskA.task_type_id)\n        const taskTypeB = this.taskTypeMap.get(taskB.task_type_id)\n        const taskTypeAPriority = this.getTaskTypePriority(taskA.task_type_id)\n        const taskTypeBPriority = this.getTaskTypePriority(taskB.task_type_id)\n        if (taskTypeAPriority === taskTypeBPriority) {\n          return taskTypeA.name.localeCompare(taskTypeB.name, undefined, {\n            numeric: true\n          })\n        } else {\n          return taskTypeAPriority - taskTypeBPriority\n        }\n      })\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    onBodyScroll(event, position) {\n      this.$refs.headerWrapper.style.left = `-${position.scrollLeft}px`\n    },\n\n    getTask(task) {\n      if (typeof task === 'string') {\n        return this.taskMap.get(task)\n      } else {\n        return task\n      }\n    },\n\n    getTaskStartDate(task) {\n      return task && task.start_date ? task.start_date.substring(0, 10) : ''\n    },\n\n    getTaskDueDate(task) {\n      return task && task.due_date ? task.due_date.substring(0, 10) : ''\n    },\n\n    getTaskEstimation(task) {\n      return task && task.estimation ? this.formatDuration(task.estimation) : ''\n    },\n\n    getTaskDuration(task) {\n      return task && task.duration ? this.formatDuration(task.duration) : ''\n    },\n\n    getTaskType(entry) {\n      const task = this.getTask(entry)\n      return task ? this.taskTypeMap.get(task.task_type_id) : null\n    },\n\n    getAssignees(entry) {\n      const task = this.getTask(entry)\n      return task ? task.assignees : []\n    },\n\n    selectTask(task) {\n      if (task.id === this.currentTask?.id) {\n        this.currentTask = null\n      } else {\n        this.currentTask = task\n      }\n      this.$emit('task-selected', task)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.data-list {\n  max-width: 500px;\n  margin-top: 0;\n}\n\n.type {\n  max-width: 250px;\n  min-width: 250px;\n}\n\n.estimation {\n  max-width: 50px;\n  min-width: 50px;\n}\n\n.startdate,\n.duedate {\n  max-width: 100px;\n  min-width: 100px;\n}\n\n.status {\n  max-width: 130px;\n  min-width: 130px;\n}\n\n.assignees {\n  max-width: 150px;\n  min-width: 150px;\n}\n\n.end-cell {\n  width: 100%;\n}\n\n.flexrow-item {\n  margin-right: 0.3em;\n}\n\n.avatar-wrapper {\n  margin-right: 0.5em;\n}\n\n.task-list-body {\n  overflow-y: auto;\n}\n\n.datatable-row-header::after {\n  display: none;\n}\n</style>\n"],"names":["entityMixin","mapGetters","option","entity","taskId","task","a","b","taskTypeAPriority","taskTypeBPriority","getFirstStartDate","parseDate","getLastEndDate","manDays","rootElement","limitStartDate","moment","children","estimation","startDate","endDate","parseSimpleDate","taskType","c","rootStartDate","rootEndDate","mapActions","tab","item","daysLength","getBusinessDays","daysToMinutes","schedule","_sfc_main","formatListMixin","PeopleAvatar","Spinner","TaskTypeName","ValidationTag","news","taskStatus","data","err","eventData","DownloadIcon","EntityThumbnail","PeopleNameCell","TaskTypeCell","previewFile","previewFileId","renderFileSize","previewFiles","log","logs","TableInfo","taskA","taskB","taskTypeA","taskTypeB","event","position","entry","_a"],"mappings":"uOAeY,MAACA,EAAc,CACzB,MAAO,CACL,MAAO,CACL,eAAgB,UAChB,UAAW,EACX,iBAAkB,CAChB,CAAE,MAAO,QAAS,MAAO,OAAS,EAClC,CAAE,MAAO,UAAW,MAAO,SAAW,EACtC,CAAE,MAAO,WAAY,MAAO,UAAY,EACxC,CAAE,MAAO,gBAAiB,MAAO,eAAiB,EAClD,CAAE,MAAO,UAAW,MAAO,WAAa,CACzC,EACD,YAAa,CACX,CAAE,MAAO,IAAK,MAAO,CAAG,EACxB,CAAE,MAAO,IAAK,MAAO,CAAG,EACxB,CAAE,MAAO,IAAK,MAAO,CAAG,CACzB,CACF,CACF,EAED,SAAU,CAAE,EAEZ,SAAU,CAAE,EAEZ,eAAgB,CAAE,EAElB,SAAU,CACR,GAAGC,EAAW,CAAC,cAAc,CAAC,EAE9B,YAAa,CACX,OAAO,KAAK,iBAAiB,IAAIC,IACxB,CACL,MAAOA,EAAO,MACd,KAAMA,EAAO,KACd,EACF,CACF,EAED,eAAgB,CAEd,MAAO,yCADW,KAAK,cAAc,eACoB,MAC1D,EAED,WAAY,CACV,OACE,KAAK,eACL,KAAK,cAAc,iBACnB,KAAK,cAAc,gBAAgB,OAAS,CAE/C,EAED,cAAe,CACb,MAAMC,EACJ,KAAK,cACL,KAAK,aACL,KAAK,aACL,KAAK,iBACL,KAAK,eACP,MAAI,CAACA,GAAU,CAACA,EAAO,MAAc,CAAE,EAChCA,EACHA,EAAO,MACJ,IAAIC,GAAU,KAAK,QAAQ,IAAIA,CAAM,CAAC,EACtC,OAAOC,GAAQA,CAAI,EACnB,KAAK,CAACC,EAAGC,IAAM,CACd,MAAMC,EAAoB,KAAK,oBAAoBF,EAAE,YAAY,EAC3DG,EAAoB,KAAK,oBAAoBF,EAAE,YAAY,EACjE,OAAOC,EAAoBC,CACzC,CAAa,EACH,CAAE,CACP,EAED,gBAAiB,CACf,OACE,KAAK,cAAc,OAAS,GAC5B,KAAK,cAAc,CAAC,EAAE,SAAS,OAAS,EAEjCC,EAAkB,KAAK,cAAc,CAAC,EAAE,QAAQ,EACpD,MAAO,EACP,IAAI,IAAK,MAAM,EAEXC,EAAU,KAAK,kBAAkB,UAAU,CAErD,EAED,cAAe,CACb,OACE,KAAK,cAAc,OAAS,GAC5B,KAAK,cAAc,CAAC,EAAE,SAAS,OAAS,EAEjCC,EAAe,KAAK,cAAc,CAAC,EAAE,QAAQ,EACjD,MAAO,EACP,IAAI,GAAI,MAAM,EAEVD,EAAU,KAAK,kBAAkB,QAAQ,CAEnD,EAED,eAAgB,CACd,IAAIE,EAAU,EACd,MAAMC,EAAc,CAClB,OAAQ,GACR,GAAI,OACJ,KAAM,QACN,MAAO,OACP,SAAU,EACV,SAAU,GACV,QAAS,GACT,SAAU,CAAE,EACZ,SAAU,EACX,EACKC,EAAiBC,EAAQ,EACzBC,EAAW,KAAK,aACnB,IAAIZ,GAAQ,CACX,MAAMa,EAAab,EAAK,WACxB,IAAIc,EAAYJ,EAAe,MAAO,EAClCK,EAEJ,GACE,CAACf,EAAK,YACN,CAACA,EAAK,iBACN,CAACA,EAAK,UACN,CAACA,EAAK,SAEN,OAAO,KAELA,EAAK,WACPc,EAAYE,EAAgBhB,EAAK,UAAU,EAClCA,EAAK,kBACdc,EAAYE,EAAgBhB,EAAK,eAAe,GAG9CA,EAAK,SACPe,EAAUC,EAAgBhB,EAAK,QAAQ,EAC9BA,EAAK,SACde,EAAUC,EAAgBhB,EAAK,QAAQ,EAC9BA,EAAK,aACde,EAAUD,EAAU,MAAK,EAAG,IAAID,EAAY,MAAM,IAGhD,CAACE,GAAWA,EAAQ,SAASD,CAAS,KACxCC,EAAUD,EAAU,MAAK,EAAG,IAAI,EAAG,MAAM,GAEvCD,IAAYL,GAAWR,EAAK,YAChC,MAAMiB,EAAW,KAAK,YAAY,IAAIjB,EAAK,YAAY,EAEvD,MAAO,CACL,GAAGA,EACH,KAAMiB,EAAS,KACf,UAAWH,EACX,QAASC,EACT,SAAU,GACV,QAAS,GACT,SAAUF,EACV,SAAU,GACV,YAAa,GACb,cAAeJ,EACf,MAAOQ,EAAS,MAChB,SAAU,CAAE,CACb,CACX,CAAS,EACA,OAAOC,GAAKA,IAAM,IAAI,EACzB,IAAIC,EAAgBR,EAAQ,EACxBS,EAAcT,EAAM,EAAG,IAAI,EAAG,MAAM,EACxC,OAAIC,EAAS,OAAS,IACpBO,EAAgBd,EAAkBO,CAAQ,EAC1CQ,EAAcb,EAAeK,CAAQ,GAEvC,OAAO,OAAOH,EAAa,CACzB,SAAUG,EACV,UAAWO,EACX,QAASC,EACT,SAAUZ,CAClB,CAAO,EACM,CAACC,CAAW,CACpB,CACF,EAED,QAAS,CACP,GAAGY,EAAW,CAAC,kBAAmB,qBAAsB,YAAY,CAAC,EAErE,UAAUC,EAAK,CACb,KAAK,YAAcA,CACpB,EAED,eAAgB,CACd,KAAK,OAAO,KAAO,EACpB,EAED,eAAetB,EAAM,CACnB,KAAK,mBAAoB,EACrB,CAAC,KAAK,aAAe,KAAK,YAAY,KAAOA,EAAK,IACpD,KAAK,gBAAgBA,CAAI,EACzB,KAAK,YAAcA,GAEnB,KAAK,YAAc,IAEtB,EAED,qBAAqBuB,EAAM,CACzB,MAAMC,EAAaC,EAAgBF,EAAK,UAAWA,EAAK,OAAO,EACzDV,EAAaa,EAAc,KAAK,aAAcF,CAAU,EAC9DD,EAAK,SAAWV,EACZU,EAAK,WAAaA,EAAK,SACzB,KAAK,WAAW,CACd,OAAQA,EAAK,GACb,KAAM,CACJ,WAAAV,EACA,WAAYU,EAAK,UAAU,OAAO,YAAY,EAC9C,SAAUA,EAAK,QAAQ,OAAO,YAAY,CAC3C,CACX,CAAS,CAEJ,CACF,EAED,MAAO,CACL,gBAAiB,CACf,KAAK,QAAQ,KAAK,CAChB,MAAO,CAAE,QAAS,KAAK,cAAgB,CAC/C,CAAO,EACD,MAAMI,EAAW,KAAK,MAAM,iBAAiB,EACzC,KAAK,iBAAmB,YAAcA,GACxCA,EAAS,cAAe,CAE3B,CACF,CACH,EC/KAC,EAAA,CACA,KAAA,cACA,OAAA,CAAAC,CAAA,EACA,WAAA,CACA,aAAAC,EACA,QAAAC,EACA,aAAAC,EACA,cAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,GACA,SAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,MAAA,CACA,EAEA,SAAA,CACA,GAAArC,EAAA,CACA,oBACA,YACA,cACA,eACA,CAAA,CACA,EAEA,QAAA,CACA,GAAAyB,EAAA,CAAA,eAAA,CAAA,EAEA,kBAAAa,EAAA,CACA,MAAA,CACA,eAAAA,EAAA,cACA,CACA,EAEA,sBAAAA,EAAA,CACA,MAAA,CACA,GAAA,KAAA,YAAA,IAAAA,EAAA,YAAA,EACA,WAAAA,EAAA,UACA,CACA,EAEA,eAAAA,EAAA,CACA,MAAAC,EAAA,KAAA,cAAA,IAAAD,EAAA,cAAA,EACA,OAAAC,EAAAD,EAAA,QAAAC,EAAA,UAAA,EACA,EAEA,aAAAD,EAAA,CACA,MAAAC,EAAA,KAAA,cAAA,IAAAD,EAAA,cAAA,EACA,OAAAC,EAAAD,EAAA,QAAAC,EAAA,QAAA,EACA,EAEA,OAAA,CACA,KAAA,SAGA,KAAA,UAAA,GACA,KAAA,cAAA,KAAA,OAAA,EAAA,EACA,KAAAC,GAAA,CACA,KAAA,SAAAA,EAAA,IACA,CAAA,EACA,MAAAC,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,SAAA,CAAA,CACA,CAAA,EACA,QAAA,IAAA,CACA,KAAA,UAAA,EACA,CAAA,EACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,MAAA,CACA,CACA,EAEA,OAAA,CACA,OAAA,CACA,WAAAC,EAAA,CAEAA,EAAA,aAAA,KAAA,kBAAA,KACA,CAAA,KAAA,YAAA,KAAA,aAAAA,EAAA,gBACA,CAAA,KAAA,cAAA,KAAA,eAAAA,EAAA,iBAEA,KAAA,MAAA,CAEA,CACA,CACA,CACA,6pCC/DAV,EAAA,CACA,KAAA,uBACA,WAAA,CACA,aAAAW,EACA,gBAAAC,EACA,eAAAC,EACA,QAAAV,EACA,aAAAW,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,GACA,aAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,QACA,KAAA,MAAA,CACA,EAEA,SAAA,CACA,GAAA9C,EAAA,CACA,oBACA,sBACA,YACA,UACA,aACA,CAAA,CACA,EAEA,QAAA,CACA,GAAAyB,EAAA,CAAA,uBAAA,CAAA,EAEA,YAAAsB,EAAA,CACA,MAAA3C,EAAA,KAAA,QAAA,IAAA2C,EAAA,OAAA,EACA,OAAA,KAAA,YAAA,IAAA3C,EAAA,YAAA,CACA,EAEA,gBAAA4C,EAAA,CAEA,MACA,QAFA,KAAA,QAAA,SAAA,UAEA,4BAAAA,CAAA,WAEA,EAEA,eAAAC,EAEA,OAAA,CACA,KAAA,UAAA,GACA,KAAA,sBAAA,KAAA,OAAA,EAAA,EACA,KAAAC,GAAA,CACA,KAAA,aAAAA,EACA,KAAA,UAAA,EACA,CAAA,EACA,MAAAT,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,aAAA,CAAA,EACA,KAAA,UAAA,EACA,CAAA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,MAAA,CACA,CACA,CACA,sxECtHAT,EAAA,CACA,KAAA,mBACA,OAAA,CAAAC,CAAA,EACA,WAAA,CACA,eAAAY,EACA,QAAAV,EACA,aAAAW,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,KAAA,CAAA,EACA,UAAA,EACA,CACA,EAEA,SAAA,CACA,KAAA,QACA,KAAA,MAAA,CACA,EAEA,SAAA,CACA,GAAA9C,EAAA,CAAA,oBAAA,YAAA,UAAA,aAAA,CAAA,CACA,EAEA,QAAA,CACA,GAAAyB,EAAA,CAAA,mBAAA,CAAA,EAEA,YAAA0B,EAAA,CACA,MAAA/C,EAAA,KAAA,QAAA,IAAA+C,EAAA,OAAA,EACA,OAAA,KAAA,YAAA,IAAA/C,EAAA,YAAA,CACA,EAEA,OAAA,CACA,KAAA,UAAA,GACA,KAAA,kBAAA,KAAA,OAAA,EAAA,EACA,KAAAgD,GAAA,CACA,KAAA,KAAAA,EACA,KAAA,UAAA,EACA,CAAA,EACA,MAAAX,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,KAAA,CAAA,EACA,KAAA,UAAA,EACA,CAAA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,MAAA,CACA,CACA,CACA,61CCNAT,EAAA,CACA,KAAA,mBACA,OAAA,CAAAC,CAAA,EAEA,WAAA,CACA,UAAAoB,EACA,aAAAP,EACA,aAAAZ,EACA,cAAAG,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,QAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,IACA,CACA,EAEA,SAAA,CACA,GAAArC,EAAA,CACA,oBACA,sBACA,sBACA,sBACA,YACA,UACA,aACA,CAAA,EAEA,eAAA,CACA,MAAA,CAAA,GAAA,KAAA,OAAA,EAAA,KAAA,CAAAsD,EAAAC,IAAA,CACA,GAAA,CAAAD,EAAA,MAAA,GACA,MAAAE,EAAA,KAAA,YAAA,IAAAF,EAAA,YAAA,EACAG,EAAA,KAAA,YAAA,IAAAF,EAAA,YAAA,EACAhD,EAAA,KAAA,oBAAA+C,EAAA,YAAA,EACA9C,EAAA,KAAA,oBAAA+C,EAAA,YAAA,EACA,OAAAhD,IAAAC,EACAgD,EAAA,KAAA,cAAAC,EAAA,KAAA,OAAA,CACA,QAAA,EACA,CAAA,EAEAlD,EAAAC,CAEA,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAiB,EAAA,CAAA,CAAA,EAEA,aAAAiC,EAAAC,EAAA,CACA,KAAA,MAAA,cAAA,MAAA,KAAA,IAAAA,EAAA,UAAA,IACA,EAEA,QAAAvD,EAAA,CACA,OAAA,OAAAA,GAAA,SACA,KAAA,QAAA,IAAAA,CAAA,EAEAA,CAEA,EAEA,iBAAAA,EAAA,CACA,OAAAA,GAAAA,EAAA,WAAAA,EAAA,WAAA,UAAA,EAAA,EAAA,EAAA,EACA,EAEA,eAAAA,EAAA,CACA,OAAAA,GAAAA,EAAA,SAAAA,EAAA,SAAA,UAAA,EAAA,EAAA,EAAA,EACA,EAEA,kBAAAA,EAAA,CACA,OAAAA,GAAAA,EAAA,WAAA,KAAA,eAAAA,EAAA,UAAA,EAAA,EACA,EAEA,gBAAAA,EAAA,CACA,OAAAA,GAAAA,EAAA,SAAA,KAAA,eAAAA,EAAA,QAAA,EAAA,EACA,EAEA,YAAAwD,EAAA,CACA,MAAAxD,EAAA,KAAA,QAAAwD,CAAA,EACA,OAAAxD,EAAA,KAAA,YAAA,IAAAA,EAAA,YAAA,EAAA,IACA,EAEA,aAAAwD,EAAA,CACA,MAAAxD,EAAA,KAAA,QAAAwD,CAAA,EACA,OAAAxD,EAAAA,EAAA,UAAA,CAAA,CACA,EAEA,WAAAA,EAAA,OACAA,EAAA,OAAAyD,EAAA,KAAA,cAAA,YAAAA,EAAA,IACA,KAAA,YAAA,KAEA,KAAA,YAAAzD,EAEA,KAAA,MAAA,gBAAAA,CAAA,CACA,CACA,CACA"}