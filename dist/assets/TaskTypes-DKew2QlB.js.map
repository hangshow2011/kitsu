{"version":3,"file":"TaskTypes-DKew2QlB.js","sources":["../../src/components/modals/EditTaskTypeModal.vue","../../src/components/lists/TaskTypeList.vue","../../src/components/pages/TaskTypes.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\" v-if=\"isEditing\">\n          {{ $t('task_types.edit_title') }} {{ taskTypeToEdit.name }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t('task_types.new_task_type') }}\n        </h1>\n\n        <form v-on:submit.prevent>\n          <text-field\n            ref=\"nameField\"\n            :label=\"$t('task_types.fields.name')\"\n            v-model=\"form.name\"\n            @enter=\"confirmClicked\"\n            v-focus\n          />\n          <boolean-field\n            :label=\"$t('task_types.fields.allow_timelog')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.allow_timelog\"\n          />\n          <combobox-simple\n            class=\"field\"\n            :label=\"$t('task_types.fields.dedicated_to')\"\n            :options=\"dedicatedToOptions\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.for_entity\"\n            v-if=\"!isEditing\"\n          />\n          <combobox-department\n            :label=\"$t('task_types.fields.department')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.department_id\"\n          />\n          <color-field\n            ref=\"colorField\"\n            class=\"mt2\"\n            :label=\"$t('task_types.fields.color')\"\n            v-model=\"form.color\"\n          />\n          <combobox-boolean\n            :label=\"$t('main.archived')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.archived\"\n            v-if=\"isEditing\"\n          />\n        </form>\n\n        <modal-footer\n          :error-text=\"$t('task_types.create_error')\"\n          :is-loading=\"isLoading\"\n          :is-error=\"isError\"\n          @confirm=\"confirmClicked\"\n          @cancel=\"$emit('cancel')\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport BooleanField from '@/components/widgets/BooleanField'\nimport ComboboxBoolean from '@/components/widgets/ComboboxBoolean'\nimport ComboboxSimple from '@/components/widgets/ComboboxSimple'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment'\nimport ColorField from '@/components/widgets/ColorField'\nimport ModalFooter from '@/components/modals/ModalFooter'\nimport TextField from '@/components/widgets/TextField'\n\nexport default {\n  name: 'edit-task-type-modal',\n  mixins: [modalMixin],\n  components: {\n    BooleanField,\n    ComboboxBoolean,\n    ComboboxSimple,\n    ComboboxDepartment,\n    ColorField,\n    ModalFooter,\n    TextField\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    taskTypeToEdit: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  watch: {\n    taskTypeToEdit() {\n      if (this.taskTypeToEdit) {\n        this.form = {\n          name: this.taskTypeToEdit.name,\n          color: this.taskTypeToEdit.color,\n          for_entity: this.taskTypeToEdit.for_entity || 'Asset',\n          allow_timelog: String(this.taskTypeToEdit.allow_timelog === true),\n          department_id: this.taskTypeToEdit.department_id,\n          archived: String(this.taskTypeToEdit.archived === true)\n        }\n      }\n    }\n  },\n\n  data() {\n    return {\n      form: {\n        name: '',\n        color: '$grey',\n        for_entity: 'Asset',\n        allow_timelog: 'false',\n        department_id: null,\n        archived: 'false'\n      },\n      dedicatedToOptions: [\n        { label: this.$t('assets.title'), value: 'Asset' },\n        { label: this.$t('shots.title'), value: 'Shot' },\n        { label: this.$t('edits.title'), value: 'Edit' },\n        { label: this.$t('sequences.title'), value: 'Sequence' },\n        { label: this.$t('episodes.title'), value: 'Episode' }\n      ]\n    }\n  },\n\n  computed: {\n    ...mapGetters(['taskTypes', 'taskTypeStatusOptions', 'departments']),\n    isEditing() {\n      return this.taskTypeToEdit && this.taskTypeToEdit.id\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    newPriority(forEntity) {\n      return (\n        this.taskTypes.filter(taskType => taskType.for_entity === forEntity)\n          .length + 1\n      )\n    },\n\n    confirmClicked() {\n      if (!this.isEditing) {\n        this.form.priority = this.newPriority(this.form.for_entity)\n      }\n      this.$emit('confirm', this.form)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n.is-danger {\n  color: #ff3860;\n  font-style: italic;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\">\n      <table class=\"datatable multi-section\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"department\">\n              {{ $t('task_types.fields.department') }}\n            </th>\n            <th scope=\"col\" class=\"name\">{{ $t('task_types.fields.name') }}</th>\n            <th scope=\"col\" class=\"allow-timelog\">\n              {{ $t('task_types.fields.allow_timelog') }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n\n        <draggable\n          class=\"datatable-body\"\n          draggable=\".tasktype-item\"\n          :sort=\"true\"\n          tag=\"tbody\"\n          @end=\"updatePriorityAssets\"\n          v-model=\"assetsItems\"\n        >\n          <tr class=\"datatable-type-header\" slot=\"header\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"datatable-row-header\">\n                {{ $t('assets.title') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row tasktype-item\"\n            :key=\"taskType.id\"\n            v-for=\"taskType in assetsItems\"\n          >\n            <td class=\"department\">\n              <department-name\n                :department=\"getDepartments(taskType.department_id)\"\n                v-if=\"!isEmpty(taskType.department_id)\"\n              />\n            </td>\n            <task-type-cell class=\"name\" :task-type=\"taskType\" />\n            <td class=\"allow-timelog\">\n              <boolean-rep :value=\"taskType.allow_timelog\" />\n            </td>\n            <row-actions-cell\n              :taskType-id=\"taskType.id\"\n              @delete-clicked=\"$emit('delete-clicked', taskType)\"\n              @edit-clicked=\"$emit('edit-clicked', taskType)\"\n            />\n          </tr>\n          <tr class=\"empty\" v-if=\"assetsItems.length === 0\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"text\">\n                {{ $t('task_types.no_task_types') }}\n              </span>\n            </th>\n          </tr>\n        </draggable>\n\n        <draggable\n          class=\"datatable-body\"\n          v-model=\"shotsItems\"\n          draggable=\".tasktype-item\"\n          tag=\"tbody\"\n          :sort=\"true\"\n          @end=\"updatePriorityShots\"\n        >\n          <tr class=\"datatable-type-header\" slot=\"header\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"datatable-row-header\">\n                {{ $t('shots.title') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row tasktype-item\"\n            v-for=\"taskType in shotsItems\"\n            :key=\"taskType.id\"\n          >\n            <td class=\"department\">\n              <department-name\n                :department=\"getDepartments(taskType.department_id)\"\n                v-if=\"!isEmpty(taskType.department_id)\"\n              />\n            </td>\n            <task-type-cell class=\"name\" :task-type=\"taskType\" />\n            <td class=\"allow-timelog\">\n              <boolean-rep :value=\"taskType.allow_timelog\" />\n            </td>\n            <row-actions-cell\n              :taskType-id=\"taskType.id\"\n              @delete-clicked=\"$emit('delete-clicked', taskType)\"\n              @edit-clicked=\"$emit('edit-clicked', taskType)\"\n            />\n          </tr>\n          <tr class=\"empty\" v-if=\"shotsItems.length === 0\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"text\">\n                {{ $t('task_types.no_task_types') }}\n              </span>\n            </th>\n          </tr>\n        </draggable>\n\n        <draggable\n          class=\"datatable-body\"\n          v-model=\"editsItems\"\n          draggable=\".tasktype-item\"\n          tag=\"tbody\"\n          :sort=\"true\"\n          @end=\"updatePriorityEdits\"\n        >\n          <tr class=\"datatable-type-header\" slot=\"header\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"datatable-row-header\">\n                {{ $t('edits.title') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row tasktype-item\"\n            v-for=\"taskType in editsItems\"\n            :key=\"taskType.id\"\n          >\n            <td class=\"department\">\n              <department-name\n                :department=\"getDepartments(taskType.department_id)\"\n                v-if=\"!isEmpty(taskType.department_id)\"\n              />\n            </td>\n            <task-type-cell class=\"name\" :task-type=\"taskType\" />\n            <td class=\"allow-timelog\">\n              <boolean-rep :value=\"taskType.allow_timelog\" />\n            </td>\n            <row-actions-cell\n              :taskType-id=\"taskType.id\"\n              @delete-clicked=\"$emit('delete-clicked', taskType)\"\n              @edit-clicked=\"$emit('edit-clicked', taskType)\"\n            />\n          </tr>\n          <tr class=\"empty\" v-if=\"editsItems.length === 0\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"text\">\n                {{ $t('task_types.no_task_types') }}\n              </span>\n            </th>\n          </tr>\n        </draggable>\n\n        <draggable\n          class=\"datatable-body\"\n          v-model=\"sequencesItems\"\n          draggable=\".tasktype-item\"\n          tag=\"tbody\"\n          :sort=\"true\"\n          @end=\"updatePrioritySequences\"\n        >\n          <tr class=\"datatable-type-header\" slot=\"header\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"datatable-row-header\">\n                {{ $t('sequences.title') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row tasktype-item\"\n            v-for=\"taskType in sequencesItems\"\n            :key=\"taskType.id\"\n          >\n            <td class=\"department\">\n              <department-name\n                :department=\"getDepartments(taskType.department_id)\"\n                v-if=\"!isEmpty(taskType.department_id)\"\n              />\n            </td>\n            <task-type-cell class=\"name\" :task-type=\"taskType\" />\n            <td class=\"allow-timelog\">\n              <boolean-rep :value=\"taskType.allow_timelog\" />\n            </td>\n            <row-actions-cell\n              :taskType-id=\"taskType.id\"\n              @delete-clicked=\"$emit('delete-clicked', taskType)\"\n              @edit-clicked=\"$emit('edit-clicked', taskType)\"\n            />\n          </tr>\n          <tr class=\"empty\" v-if=\"sequencesItems.length === 0\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"text\">\n                {{ $t('task_types.no_task_types') }}\n              </span>\n            </th>\n          </tr>\n        </draggable>\n\n        <draggable\n          class=\"datatable-body\"\n          v-model=\"episodesItems\"\n          draggable=\".tasktype-item\"\n          tag=\"tbody\"\n          :sort=\"true\"\n          @end=\"updatePriorityEpisodes\"\n        >\n          <tr class=\"datatable-type-header\" slot=\"header\">\n            <th scope=\"rowgroup\" colspan=\"4\">\n              <span class=\"datatable-row-header\">\n                {{ $t('episodes.title') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row tasktype-item\"\n            v-for=\"taskType in episodesItems\"\n            :key=\"taskType.id\"\n          >\n            <td class=\"department\">\n              <department-name\n                :department=\"getDepartments(taskType.department_id)\"\n                v-if=\"!isEmpty(taskType.department_id)\"\n              />\n            </td>\n            <task-type-cell class=\"name\" :task-type=\"taskType\" />\n            <td class=\"allow-timelog\">\n              <boolean-rep :value=\"taskType.allow_timelog\" />\n            </td>\n            <row-actions-cell\n              :taskType-id=\"taskType.id\"\n              @delete-clicked=\"$emit('delete-clicked', taskType)\"\n              @edit-clicked=\"$emit('edit-clicked', taskType)\"\n            />\n          </tr>\n        </draggable>\n        <tr class=\"empty\" v-if=\"episodesItems.length === 0\">\n          <th scope=\"rowgroup\" colspan=\"4\">\n            <span class=\"text\">\n              {{ $t('task_types.no_task_types') }}\n            </span>\n          </th>\n        </tr>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <p class=\"has-text-centered nb-task-types\">\n      {{ entries.length }} {{ $tc('task_types.number', entries.length) }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport draggable from 'vuedraggable'\n\nimport BooleanRep from '@/components/widgets/BooleanRep'\nimport DepartmentName from '@/components/widgets/DepartmentName.vue'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskTypeCell from '@/components/cells/TaskTypeCell'\n\nexport default {\n  name: 'task-type-list',\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      assetsItems: [],\n      shotsItems: [],\n      editsItems: [],\n      sequencesItems: [],\n      episodesItems: []\n    }\n  },\n\n  components: {\n    draggable,\n    BooleanRep,\n    DepartmentName,\n    RowActionsCell,\n    TableInfo,\n    TaskTypeCell\n  },\n\n  computed: {\n    ...mapGetters(['getDepartments']),\n\n    assetTaskTypes() {\n      return this.getTaskTypesForEntity('Asset')\n    },\n\n    shotTaskTypes() {\n      return this.getTaskTypesForEntity('Shot')\n    },\n\n    editTaskTypes() {\n      return this.getTaskTypesForEntity('Edit')\n    },\n\n    sequenceTaskTypes() {\n      return this.getTaskTypesForEntity('Sequence')\n    },\n\n    episodeTaskTypes() {\n      return this.getTaskTypesForEntity('Episode')\n    }\n  },\n\n  methods: {\n    getTaskTypesForEntity(entity) {\n      return this.entries.filter(taskType => taskType.for_entity === entity)\n    },\n\n    updatePriority(items) {\n      const forms = []\n      items.forEach((item, index) => {\n        index += 1\n        const form = {\n          id: item.id,\n          name: item.name,\n          priority: String(index)\n        }\n        item.priority = index\n        forms.push(form)\n      })\n      this.$emit('update-priorities', forms)\n    },\n\n    updatePriorityAssets() {\n      this.updatePriority(this.assetsItems)\n    },\n\n    updatePriorityShots() {\n      this.updatePriority(this.shotsItems)\n    },\n\n    updatePriorityEdits() {\n      this.updatePriority(this.editsItems)\n    },\n\n    updatePrioritySequences() {\n      this.updatePriority(this.sequencesItems)\n    },\n\n    updatePriorityEpisodes() {\n      this.updatePriority(this.episodesItems)\n    },\n\n    isEmpty(value) {\n      return value === undefined || value === null || value === ''\n    }\n  },\n\n  watch: {\n    entries: {\n      immediate: true,\n      handler() {\n        setTimeout(() => {\n          this.assetsItems = JSON.parse(JSON.stringify(this.assetTaskTypes))\n          this.shotsItems = JSON.parse(JSON.stringify(this.shotTaskTypes))\n          this.editsItems = JSON.parse(JSON.stringify(this.editTaskTypes))\n          this.episodesItems = JSON.parse(JSON.stringify(this.episodeTaskTypes))\n          this.sequencesItems = JSON.parse(\n            JSON.stringify(this.sequenceTaskTypes)\n          )\n        }, 100)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.department {\n  width: 200px;\n  min-width: 200px;\n}\n\n.name {\n  width: 300px;\n  min-width: 300px;\n}\n\n.priority {\n  width: 80px;\n  min-width: 80px;\n}\n\n.dedicated {\n  width: 100px;\n  min-width: 100px;\n}\n\n.allow-timelog {\n  width: 100px;\n  min-width: 100px;\n  text-align: center;\n}\n\n.actions {\n  min-width: 100px;\n}\n\n.color {\n  width: 100px;\n}\n\n.tasktype-item {\n  cursor: grab;\n}\n\n.tasktype-item[draggable='true'] {\n  cursor: grabbing;\n}\n\ntr {\n  cursor: pointer;\n}\n\n.empty {\n  span {\n    color: var(--text);\n    font-weight: normal;\n    font-style: italic;\n  }\n}\n\n.data-list {\n  margin-top: 0;\n}\n</style>\n","<template>\n  <div class=\"task-types page fixed-page\">\n    <list-page-header\n      :title=\"$t('task_types.title')\"\n      :new-entry-label=\"$t('task_types.new_task_type')\"\n      :is-exportable=\"isActiveTab\"\n      @export-clicked=\"onExportClicked\"\n      @new-clicked=\"onNewClicked\"\n    />\n\n    <route-tabs\n      class=\"mt2\"\n      :active-tab=\"activeTab\"\n      :tabs=\"tabs\"\n      route-name=\"task-types\"\n    />\n\n    <task-type-list\n      :entries=\"listTaskTypes\"\n      :is-loading=\"loading.taskTypes || loading.departments\"\n      :is-error=\"errors.taskTypes || errors.departments\"\n      @update-priorities=\"updatePriorities\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n    />\n\n    <edit-task-type-modal\n      :active=\"modals.edit\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :task-types=\"taskTypes\"\n      :task-type-to-edit=\"taskTypeToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditTaskType\"\n    />\n\n    <delete-modal\n      :active=\"modals.del\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText()\"\n      :error-text=\"$t('task_types.delete_error')\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeleteTaskType\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport func from '@/lib/func'\nimport stringHelpers from '@/lib/string'\n\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditTaskTypeModal from '@/components/modals/EditTaskTypeModal'\nimport ListPageHeader from '@/components/widgets/ListPageHeader'\nimport RouteTabs from '@/components/widgets/RouteTabs'\nimport TaskTypeList from '@/components/lists/TaskTypeList'\n\nexport default {\n  name: 'task-types',\n\n  components: {\n    DeleteModal,\n    EditTaskTypeModal,\n    ListPageHeader,\n    RouteTabs,\n    TaskTypeList\n  },\n\n  data() {\n    return {\n      activeTab: 'active',\n      errors: {\n        taskTypes: false,\n        departments: false,\n        edit: false,\n        del: false\n      },\n      loading: {\n        taskTypes: false,\n        departments: false,\n        edit: false,\n        del: false\n      },\n      modals: {\n        del: false,\n        edit: false\n      },\n      tabs: [\n        {\n          name: 'active',\n          label: this.$t('main.active')\n        },\n        {\n          name: 'archived',\n          label: this.$t('main.archived')\n        }\n      ],\n      taskTypeToDelete: { color: '#999999' },\n      taskTypeToEdit: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'archivedTaskTypes',\n      'departmentMap',\n      'getTaskType',\n      'taskTypes'\n    ]),\n\n    isActiveTab() {\n      return this.activeTab === 'active'\n    },\n\n    listTaskTypes() {\n      const taskTypes = this.isActiveTab\n        ? this.taskTypes\n        : this.archivedTaskTypes\n\n      return taskTypes.filter(taskType => taskType.for_entity !== 'Concept')\n    }\n  },\n\n  mounted() {\n    this.activeTab = this.$route.query.tab || 'active'\n    this.loading.taskTypes = true\n    this.errors.taskTypes = false\n    this.loading.departments = true\n    this.errors.departments = false\n    this.loadDepartments()\n      .then(() => {\n        this.loading.departments = false\n      })\n      .catch(err => {\n        console.error(err)\n        this.loading.departments = false\n        this.errors.departments = true\n      })\n    this.loadTaskTypes()\n      .then(() => {\n        this.loading.taskTypes = false\n      })\n      .catch(err => {\n        console.error(err)\n        this.loading.taskTypes = false\n        this.errors.taskTypes = true\n      })\n  },\n\n  methods: {\n    ...mapActions([\n      'editTaskType',\n      'deleteTaskType',\n      'loadTaskTypes',\n      'loadDepartments'\n    ]),\n\n    confirmEditTaskType(form) {\n      let action = 'newTaskType'\n      if (this.taskTypeToEdit && this.taskTypeToEdit.id) {\n        action = 'editTaskType'\n        form.id = this.taskTypeToEdit.id\n      }\n      this.loading.edit = true\n      this.errors.edit = false\n      this.$store\n        .dispatch(action, form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    updatePriorities(forms) {\n      forms.forEach(form => {\n        this.$store.commit('EDIT_TASK_TYPE_END', form)\n      })\n      this.savePriorities(forms)\n    },\n\n    savePriorities(forms) {\n      const now = new Date().getTime()\n      this.lastCall = this.lastCall || 0\n      if (now - this.lastCall > 1000 && !this.isSaving) {\n        this.lastCall = now\n        this.isSaving = true\n        func.runPromiseMapAsSeries(forms, this.editTaskType).then(() => {\n          this.isSaving = false\n          if (this.newSaveCall) this.savePriorities(forms)\n        })\n      } else {\n        this.newSaveCall = true\n      }\n    },\n\n    confirmDeleteTaskType() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteTaskType(this.taskTypeToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.del = false\n          this.errors.del = true\n        })\n    },\n\n    deleteText() {\n      const taskType = this.taskTypeToDelete\n      if (taskType) {\n        return this.$t('task_types.delete_text', { name: taskType.name })\n      } else {\n        return ''\n      }\n    },\n\n    onDeleteClicked(taskType) {\n      this.taskTypeToDelete = taskType\n      this.modals.del = true\n    },\n\n    onEditClicked(taskType) {\n      this.taskTypeToEdit = taskType\n      this.modals.edit = true\n    },\n\n    onExportClicked() {\n      const name = stringHelpers.slugify(this.$t('task_types.title'))\n      const headers = [\n        this.$t('main.type'),\n        this.$t('task_types.fields.dedicated_to'),\n        this.$t('task_types.fields.department'),\n        this.$t('task_types.fields.name'),\n        this.$t('task_types.fields.color'),\n        this.$t('task_types.fields.allow_timelog')\n      ]\n      const entries = [headers].concat(\n        this.taskTypes.map(taskType => [\n          taskType.type,\n          taskType.for_entity,\n          this.departmentMap.get(taskType.department_id)?.name,\n          taskType.name,\n          taskType.color,\n          taskType.allow_timelog\n        ])\n      )\n      csv.buildCsvFile(name, entries)\n    },\n\n    onNewClicked() {\n      this.taskTypeToEdit = { color: '#999999' }\n      this.modals.edit = true\n    }\n  },\n\n  watch: {\n    $route() {\n      this.activeTab = this.$route.query.tab || 'active'\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('task_types.title')} - Kitsu`\n    }\n  }\n}\n</script>\n"],"names":["_sfc_main","modalMixin","BooleanField","ComboboxBoolean","ComboboxSimple","ComboboxDepartment","ColorField","ModalFooter","TextField","mapGetters","mapActions","forEntity","taskType","draggable","BooleanRep","DepartmentName","RowActionsCell","TableInfo","TaskTypeCell","entity","items","forms","item","index","form","value","DeleteModal","EditTaskTypeModal","ListPageHeader","RouteTabs","TaskTypeList","err","action","now","func","name","stringHelpers","entries","_a","csv"],"mappings":"6TAkFA,MAAAA,EAAA,CACA,KAAA,uBACA,OAAA,CAAAC,CAAA,EACA,WAAA,CACA,aAAAC,EACA,gBAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,WAAAC,EACA,YAAAC,EACA,UAAAC,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,eAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,gBAAA,CACA,KAAA,iBACA,KAAA,KAAA,CACA,KAAA,KAAA,eAAA,KACA,MAAA,KAAA,eAAA,MACA,WAAA,KAAA,eAAA,YAAA,QACA,cAAA,OAAA,KAAA,eAAA,gBAAA,EAAA,EACA,cAAA,KAAA,eAAA,cACA,SAAA,OAAA,KAAA,eAAA,WAAA,EAAA,CACA,EAEA,CACA,EAEA,MAAA,CACA,MAAA,CACA,KAAA,CACA,KAAA,GACA,MAAA,QACA,WAAA,QACA,cAAA,QACA,cAAA,KACA,SAAA,OACA,EACA,mBAAA,CACA,CAAA,MAAA,KAAA,GAAA,cAAA,EAAA,MAAA,OAAA,EACA,CAAA,MAAA,KAAA,GAAA,aAAA,EAAA,MAAA,MAAA,EACA,CAAA,MAAA,KAAA,GAAA,aAAA,EAAA,MAAA,MAAA,EACA,CAAA,MAAA,KAAA,GAAA,iBAAA,EAAA,MAAA,UAAA,EACA,CAAA,MAAA,KAAA,GAAA,gBAAA,EAAA,MAAA,SAAA,CACA,CACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CAAA,YAAA,wBAAA,aAAA,CAAA,EACA,WAAA,CACA,OAAA,KAAA,gBAAA,KAAA,eAAA,EACA,CACA,EAEA,QAAA,CACA,GAAAC,EAAA,CAAA,CAAA,EAEA,YAAAC,EAAA,CACA,OACA,KAAA,UAAA,OAAAC,GAAAA,EAAA,aAAAD,CAAA,EACA,OAAA,CAEA,EAEA,gBAAA,CACA,KAAA,YACA,KAAA,KAAA,SAAA,KAAA,YAAA,KAAA,KAAA,UAAA,GAEA,KAAA,MAAA,UAAA,KAAA,IAAA,CACA,CACA,CACA,ipECyFAX,EAAA,CACA,KAAA,iBAEA,MAAA,CACA,QAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,CAAA,EACA,WAAA,CAAA,EACA,WAAA,CAAA,EACA,eAAA,CAAA,EACA,cAAA,CAAA,CACA,CACA,EAEA,WAAA,CACA,UAAAa,EACA,WAAAC,EACA,eAAAC,EACA,eAAAC,EACA,UAAAC,EACA,aAAAC,CACA,EAEA,SAAA,CACA,GAAAT,EAAA,CAAA,gBAAA,CAAA,EAEA,gBAAA,CACA,OAAA,KAAA,sBAAA,OAAA,CACA,EAEA,eAAA,CACA,OAAA,KAAA,sBAAA,MAAA,CACA,EAEA,eAAA,CACA,OAAA,KAAA,sBAAA,MAAA,CACA,EAEA,mBAAA,CACA,OAAA,KAAA,sBAAA,UAAA,CACA,EAEA,kBAAA,CACA,OAAA,KAAA,sBAAA,SAAA,CACA,CACA,EAEA,QAAA,CACA,sBAAAU,EAAA,CACA,OAAA,KAAA,QAAA,OAAAP,GAAAA,EAAA,aAAAO,CAAA,CACA,EAEA,eAAAC,EAAA,CACA,MAAAC,EAAA,CAAA,EACAD,EAAA,QAAA,CAAAE,EAAAC,IAAA,CACAA,GAAA,EACA,MAAAC,EAAA,CACA,GAAAF,EAAA,GACA,KAAAA,EAAA,KACA,SAAA,OAAAC,CAAA,CACA,EACAD,EAAA,SAAAC,EACAF,EAAA,KAAAG,CAAA,CACA,CAAA,EACA,KAAA,MAAA,oBAAAH,CAAA,CACA,EAEA,sBAAA,CACA,KAAA,eAAA,KAAA,WAAA,CACA,EAEA,qBAAA,CACA,KAAA,eAAA,KAAA,UAAA,CACA,EAEA,qBAAA,CACA,KAAA,eAAA,KAAA,UAAA,CACA,EAEA,yBAAA,CACA,KAAA,eAAA,KAAA,cAAA,CACA,EAEA,wBAAA,CACA,KAAA,eAAA,KAAA,aAAA,CACA,EAEA,QAAAI,EAAA,CACA,OAAAA,GAAA,MAAAA,IAAA,EACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,UAAA,GACA,SAAA,CACA,WAAA,IAAA,CACA,KAAA,YAAA,KAAA,MAAA,KAAA,UAAA,KAAA,cAAA,CAAA,EACA,KAAA,WAAA,KAAA,MAAA,KAAA,UAAA,KAAA,aAAA,CAAA,EACA,KAAA,WAAA,KAAA,MAAA,KAAA,UAAA,KAAA,aAAA,CAAA,EACA,KAAA,cAAA,KAAA,MAAA,KAAA,UAAA,KAAA,gBAAA,CAAA,EACA,KAAA,eAAA,KAAA,MACA,KAAA,UAAA,KAAA,iBAAA,CACA,CACA,EAAA,GAAA,CACA,CACA,CACA,CACA,w9NCnUAzB,EAAA,CACA,KAAA,aAEA,WAAA,CACA,YAAA0B,EACA,kBAAAC,EACA,eAAAC,EACA,UAAAC,EACA,aAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,SACA,OAAA,CACA,UAAA,GACA,YAAA,GACA,KAAA,GACA,IAAA,EACA,EACA,QAAA,CACA,UAAA,GACA,YAAA,GACA,KAAA,GACA,IAAA,EACA,EACA,OAAA,CACA,IAAA,GACA,KAAA,EACA,EACA,KAAA,CACA,CACA,KAAA,SACA,MAAA,KAAA,GAAA,aAAA,CACA,EACA,CACA,KAAA,WACA,MAAA,KAAA,GAAA,eAAA,CACA,CACA,EACA,iBAAA,CAAA,MAAA,SAAA,EACA,eAAA,IACA,CACA,EAEA,SAAA,CACA,GAAArB,EAAA,CACA,oBACA,gBACA,cACA,WACA,CAAA,EAEA,aAAA,CACA,OAAA,KAAA,YAAA,QACA,EAEA,eAAA,CAKA,OAJA,KAAA,YACA,KAAA,UACA,KAAA,mBAEA,OAAAG,GAAAA,EAAA,aAAA,SAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,UAAA,KAAA,OAAA,MAAA,KAAA,SACA,KAAA,QAAA,UAAA,GACA,KAAA,OAAA,UAAA,GACA,KAAA,QAAA,YAAA,GACA,KAAA,OAAA,YAAA,GACA,KAAA,gBAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,YAAA,EACA,CAAA,EACA,MAAAmB,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,YAAA,GACA,KAAA,OAAA,YAAA,EACA,CAAA,EACA,KAAA,cAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,UAAA,EACA,CAAA,EACA,MAAAA,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,UAAA,GACA,KAAA,OAAA,UAAA,EACA,CAAA,CACA,EAEA,QAAA,CACA,GAAArB,EAAA,CACA,eACA,iBACA,gBACA,iBACA,CAAA,EAEA,oBAAAc,EAAA,CACA,IAAAQ,EAAA,cACA,KAAA,gBAAA,KAAA,eAAA,KACAA,EAAA,eACAR,EAAA,GAAA,KAAA,eAAA,IAEA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,GACA,KAAA,OACA,SAAAQ,EAAAR,CAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,EACA,CAAA,EACA,MAAAO,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,EACA,CAAA,CACA,EAEA,iBAAAV,EAAA,CACAA,EAAA,QAAAG,GAAA,CACA,KAAA,OAAA,OAAA,qBAAAA,CAAA,CACA,CAAA,EACA,KAAA,eAAAH,CAAA,CACA,EAEA,eAAAA,EAAA,CACA,MAAAY,EAAA,IAAA,KAAA,EAAA,QAAA,EACA,KAAA,SAAA,KAAA,UAAA,EACAA,EAAA,KAAA,SAAA,KAAA,CAAA,KAAA,UACA,KAAA,SAAAA,EACA,KAAA,SAAA,GACAC,EAAA,sBAAAb,EAAA,KAAA,YAAA,EAAA,KAAA,IAAA,CACA,KAAA,SAAA,GACA,KAAA,aAAA,KAAA,eAAAA,CAAA,CACA,CAAA,GAEA,KAAA,YAAA,EAEA,EAEA,uBAAA,CACA,KAAA,QAAA,IAAA,GACA,KAAA,OAAA,IAAA,GACA,KAAA,eAAA,KAAA,gBAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,IAAA,GACA,KAAA,OAAA,IAAA,EACA,CAAA,EACA,MAAAU,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,IAAA,GACA,KAAA,OAAA,IAAA,EACA,CAAA,CACA,EAEA,YAAA,CACA,MAAAnB,EAAA,KAAA,iBACA,OAAAA,EACA,KAAA,GAAA,yBAAA,CAAA,KAAAA,EAAA,KAAA,EAEA,EAEA,EAEA,gBAAAA,EAAA,CACA,KAAA,iBAAAA,EACA,KAAA,OAAA,IAAA,EACA,EAEA,cAAAA,EAAA,CACA,KAAA,eAAAA,EACA,KAAA,OAAA,KAAA,EACA,EAEA,iBAAA,CACA,MAAAuB,EAAAC,EAAA,QAAA,KAAA,GAAA,kBAAA,CAAA,EASAC,EAAA,CARA,CACA,KAAA,GAAA,WAAA,EACA,KAAA,GAAA,gCAAA,EACA,KAAA,GAAA,8BAAA,EACA,KAAA,GAAA,wBAAA,EACA,KAAA,GAAA,yBAAA,EACA,KAAA,GAAA,iCAAA,CACA,CACA,EAAA,OACA,KAAA,UAAA,IAAAzB,GAAA,OAAA,OACAA,EAAA,KACAA,EAAA,YACA0B,EAAA,KAAA,cAAA,IAAA1B,EAAA,aAAA,IAAA,YAAA0B,EAAA,KACA1B,EAAA,KACAA,EAAA,MACAA,EAAA,aACA,EAAA,CACA,EACA2B,EAAA,aAAAJ,EAAAE,CAAA,CACA,EAEA,cAAA,CACA,KAAA,eAAA,CAAA,MAAA,SAAA,EACA,KAAA,OAAA,KAAA,EACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,UAAA,KAAA,OAAA,MAAA,KAAA,QACA,CACA,EAEA,UAAA,CACA,MAAA,CACA,MAAA,GAAA,KAAA,GAAA,kBAAA,CAAA,UACA,CACA,CACA"}