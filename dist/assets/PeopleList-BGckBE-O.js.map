{"version":3,"file":"PeopleList-BGckBE-O.js","sources":["../../src/components/modals/EditAvatarModal.vue","../../src/components/modals/EditPersonModal.vue","../../src/components/lists/PeopleList.vue"],"sourcesContent":["<template>\n  <div class=\"modal\" :class=\"{ 'is-active': active }\">\n    <div class=\"modal-background\" @click=\"close\"></div>\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\">\n          {{ $t('profile.avatar.title') }}\n        </h1>\n        <form>\n          <input\n            ref=\"input-file\"\n            class=\"hidden\"\n            type=\"file\"\n            accept=\".png,.jpg,.jpeg\"\n            @change=\"updateAvatar\"\n          />\n          <people-avatar\n            :is-lazy=\"false\"\n            :person=\"this.person\"\n            :size=\"150\"\n            :font-size=\"60\"\n          />\n          <div class=\"flexrow right mt2\">\n            <button\n              class=\"button flexrow-item is-primary\"\n              :disabled=\"isUpdating || isDeleting\"\n              type=\"button\"\n              @click=\"selectFile\"\n            >\n              <template v-if=\"isUpdating\">\n                <spinner class=\"mr05 mt05\" :size=\"20\" is-white />\n                {{ $t('profile.avatar.updating') }}\n              </template>\n              <template v-else>{{ $t('profile.change_avatar') }}</template>\n            </button>\n            <button\n              class=\"button flexrow-item\"\n              :disabled=\"isUpdating || isDeleting\"\n              type=\"button\"\n              @click=\"deleteAvatar\"\n            >\n              <template v-if=\"isDeleting\">\n                <spinner class=\"mr05 mt05\" :size=\"20\" />\n                {{ $t('profile.avatar.removing') }}\n              </template>\n              <template v-else>{{ $t('profile.clear_avatar') }}</template>\n            </button>\n            <button\n              class=\"button flexrow-item is-link\"\n              :disabled=\"isUpdating || isDeleting\"\n              type=\"button\"\n              @click=\"close\"\n            >\n              {{ $t('main.close') }}\n            </button>\n          </div>\n        </form>\n        <p class=\"error mt1 has-text-right\" v-if=\"isError\">\n          {{ errorText }}\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { modalMixin } from '@/components/modals/base_modal'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport Spinner from '@/components/widgets/Spinner'\n\nexport default {\n  name: 'edit-avatar-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    PeopleAvatar,\n    Spinner\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    errorText: {\n      type: String,\n      default: ''\n    },\n    isDeleting: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isUpdating: {\n      type: Boolean,\n      default: false\n    },\n    person: {\n      type: Object,\n      required: true\n    }\n  },\n\n  methods: {\n    selectFile() {\n      this.$refs['input-file'].click()\n    },\n\n    updateAvatar(event) {\n      const file = event.target.files[0]\n      const formData = new FormData()\n      formData.append('file', file, file.name)\n      this.$emit('update', formData)\n    },\n\n    deleteAvatar() {\n      this.$emit('delete')\n    },\n\n    close() {\n      if (this.isUpdating || this.isDeleting) {\n        return\n      }\n      this.$emit('close')\n    },\n\n    resetForm() {\n      this.$refs['input-file'].value = null\n    }\n  },\n\n  watch: {\n    active() {\n      if (this.active) {\n        this.resetForm()\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.right {\n  justify-content: flex-end;\n}\n</style>\n","<template>\n  <div\n    class=\"modal\"\n    :class=\"{\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <form @submit.prevent=\"emitForm('confirm')\" class=\"box\">\n        <h1 class=\"title\" v-if=\"personToEdit.id !== undefined\">\n          {{ $t('people.edit_title') }} {{ personToEdit.full_name }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t(isBot ? 'bots.new_bot' : 'people.new_person') }}\n        </h1>\n        <text-field\n          :errored=\"form.first_name && !isValidName\"\n          :label=\"$t(isBot ? 'bots.fields.name' : 'people.fields.first_name')\"\n          :disabled=\"personToEdit.is_generated_from_ldap\"\n          ref=\"name-field\"\n          v-model.trim=\"form.first_name\"\n        />\n        <text-field\n          :label=\"$t('people.fields.last_name')\"\n          :disabled=\"personToEdit.is_generated_from_ldap\"\n          v-model.trim=\"form.last_name\"\n          v-if=\"!isBot\"\n        />\n        <text-field\n          type=\"email\"\n          :errored=\"form.email && !isValidEmail\"\n          :label=\"$t('people.fields.email')\"\n          :disabled=\"personToEdit.is_generated_from_ldap\"\n          v-model.trim=\"form.email\"\n          v-if=\"!isBot\"\n        />\n        <text-field\n          :label=\"$t('people.fields.phone')\"\n          v-model.trim=\"form.phone\"\n          v-if=\"!isBot\"\n        />\n        <date-field\n          :label=\"$t('bots.fields.expiration_date')\"\n          :disabled-dates=\"{ to: new Date() }\"\n          :disabled=\"isEditing\"\n          v-model=\"form.expiration_date\"\n          v-if=\"isBot\"\n        />\n        <div class=\"departments field\">\n          <label class=\"label\">{{ $t('people.fields.departments') }}</label>\n          <p\n            class=\"empty mb1\"\n            v-if=\"form.departments && form.departments.length === 0\"\n          >\n            {{ $t('people.departments_empty') }}\n          </p>\n          <div\n            class=\"department-element mb1 mt05\"\n            :key=\"departmentId\"\n            @click=\"removeDepartment(departmentId)\"\n            v-for=\"departmentId in form.departments\"\n          >\n            <department-name\n              :department=\"departmentMap.get(departmentId)\"\n              v-if=\"departmentId\"\n            />\n          </div>\n          <div class=\"flexrow\">\n            <combobox-department\n              class=\"flexrow-item\"\n              :selectable-departments=\"selectableDepartments\"\n              v-model=\"selectedDepartment\"\n              v-if=\"selectableDepartments.length > 0\"\n            />\n            <button\n              class=\"button is-success flexrow-item\"\n              :class=\"{\n                'is-disabled': selectedDepartment === null\n              }\"\n              type=\"button\"\n              @click=\"addDepartment\"\n              v-if=\"selectableDepartments.length > 0\"\n            >\n              {{ $t('main.add') }}\n            </button>\n          </div>\n        </div>\n        <combobox\n          :label=\"$t('people.fields.role')\"\n          :options=\"roleOptions\"\n          localeKeyPrefix=\"people.role.\"\n          v-model=\"form.role\"\n        />\n        <combobox\n          :label=\"$t('people.fields.contract')\"\n          :options=\"contractOptions\"\n          localeKeyPrefix=\"people.contract.\"\n          v-model=\"form.contract_type\"\n          v-if=\"!isBot\"\n        />\n        <combobox\n          :label=\"$t('people.fields.active')\"\n          :options=\"activeOptions\"\n          :disabled=\"personToEdit.is_generated_from_ldap\"\n          v-model=\"form.active\"\n        />\n\n        <div class=\"flexrow\">\n          <button\n            class=\"button flexrow-item\"\n            :class=\"{\n              'is-loading': isInviteLoading\n            }\"\n            :disabled=\"!isValidEmail\"\n            type=\"button\"\n            @click=\"emitForm('invite')\"\n            v-if=\"isEditing && isCurrentUserAdmin && !isBot\"\n          >\n            {{ $t('people.invite') }}\n          </button>\n          <div class=\"filler\"></div>\n\n          <button\n            class=\"button is-primary flexrow-item\"\n            :class=\"{\n              'is-loading': isCreateInviteLoading\n            }\"\n            :disabled=\"!isValidForm\"\n            type=\"button\"\n            @click=\"emitForm('confirm-invite')\"\n            v-if=\"!isEditing && isCurrentUserAdmin && !isBot\"\n          >\n            {{ $t('people.create_invite') }}\n          </button>\n          <button\n            class=\"button is-primary flexrow-item\"\n            :class=\"{\n              'is-loading': isLoading\n            }\"\n            :disabled=\"!isValidForm\"\n            type=\"submit\"\n          >\n            {{ !isEditing ? $t('people.create') : $t('people.confirm_edit') }}\n          </button>\n          <button\n            class=\"button is-link flexrow-item\"\n            type=\"button\"\n            @click=\"$emit('cancel')\"\n          >\n            {{ $t('main.cancel') }}\n          </button>\n        </div>\n\n        <div class=\"success has-text-right mt1\" v-if=\"isInvitationSuccess\">\n          {{ $t('people.invite_success') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isInvitationError\">\n          {{ $t('people.invite_error') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isUserLimitError\">\n          {{ $t('people.user_limit_error') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isError\">\n          {{ $t('people.create_error') }}\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment'\nimport DateField from '@/components/widgets/DateField.vue'\nimport DepartmentName from '@/components/widgets/DepartmentName'\nimport TextField from '@/components/widgets/TextField'\n\nexport default {\n  name: 'edit-person-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    Combobox,\n    ComboboxDepartment,\n    DateField,\n    DepartmentName,\n    TextField\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isBot: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isCreateInviteLoading: {\n      type: Boolean,\n      default: false\n    },\n    isInviteLoading: {\n      type: Boolean,\n      default: false\n    },\n    isInvitationSuccess: {\n      type: Boolean,\n      default: false\n    },\n    isInvitationError: {\n      type: Boolean,\n      default: false\n    },\n    isUserLimitError: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    personToEdit: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      activeOptions: [\n        { label: this.$t('main.yes'), value: 'true' },\n        { label: this.$t('main.no'), value: 'false' }\n      ],\n      contractOptions: [\n        { label: 'open-ended', value: 'open-ended' },\n        { label: 'fixed-term', value: 'fixed-term' },\n        { label: 'short-term', value: 'short-term' },\n        { label: 'freelance', value: 'freelance' },\n        { label: 'apprentice', value: 'apprentice' },\n        { label: 'internship', value: 'internship' }\n      ],\n      form: {\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone: '',\n        role: 'user',\n        contract_type: 'open-ended',\n        active: 'true',\n        departments: [],\n        expiration_date: null,\n        is_bot: false\n      },\n      roleOptions: [\n        { label: 'user', value: 'user' },\n        { label: 'supervisor', value: 'supervisor' },\n        { label: 'manager', value: 'manager' },\n        { label: 'client', value: 'client' },\n        { label: 'vendor', value: 'vendor' },\n        { label: 'admin', value: 'admin' }\n      ],\n      selectedDepartment: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'departments',\n      'departmentMap',\n      'isCurrentUserAdmin',\n      'people',\n      'user'\n    ]),\n\n    selectableDepartments() {\n      return this.departments.filter(\n        department => !this.form.departments.includes(department.id)\n      )\n    },\n\n    isEditing() {\n      return Boolean(this.personToEdit?.id)\n    },\n\n    isValidName() {\n      return Boolean(this.form.first_name?.length)\n    },\n\n    isValidEmail() {\n      if (!this.form.email?.length) {\n        return false\n      }\n\n      const emailRegex =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n      if (!emailRegex.test(this.form.email)) {\n        return false\n      }\n\n      if (this.form.is_bot) {\n        return true\n      }\n\n      const isExist = this.people.some(\n        person =>\n          !person.is_bot &&\n          person.email === this.form.email &&\n          (!this.personToEdit || this.personToEdit.email !== person.email)\n      )\n      return !isExist\n    },\n\n    isValidForm() {\n      return this.isValidName && this.isValidEmail\n    }\n  },\n\n  methods: {\n    emitForm(event) {\n      if (!this.isValidForm) {\n        return\n      }\n      const form = {\n        ...this.form,\n        last_name: this.form.last_name || '',\n        active: this.form.active === 'true' || this.form.active === true\n      }\n      this.$emit(event, form)\n    },\n\n    addDepartment() {\n      this.form.departments.push(this.selectedDepartment)\n      this.selectedDepartment = null\n    },\n\n    removeDepartment(idToRemove) {\n      const departmentIndex = this.form.departments.indexOf(idToRemove)\n      if (departmentIndex >= 0) {\n        this.form.departments.splice(departmentIndex, 1)\n      }\n    },\n\n    resetForm() {\n      if (this.isEditing) {\n        this.form = {\n          first_name: this.personToEdit.first_name,\n          last_name: this.personToEdit.last_name,\n          email: this.personToEdit.email,\n          phone: this.personToEdit.phone,\n          role: this.personToEdit.role,\n          contract_type: this.personToEdit.contract_type,\n          active: this.personToEdit.active ? 'true' : 'false',\n          departments: [...(this.personToEdit.departments || [])],\n          expiration_date: this.personToEdit.expiration_date,\n          is_bot: this.personToEdit.is_bot\n        }\n      } else {\n        this.form = {\n          role: 'user',\n          contract_type: 'open-ended',\n          active: 'true',\n          departments: [],\n          expiration_date: null,\n          is_bot: this.isBot,\n          email: this.isBot ? this.user.email : null\n        }\n      }\n    }\n  },\n\n  watch: {\n    personToEdit() {\n      this.resetForm()\n    },\n\n    active() {\n      if (this.active) {\n        this.resetForm()\n        setTimeout(() => {\n          this.$refs['name-field'].focus()\n        }, 100)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.department-element {\n  display: inline-block;\n  margin-right: 0.2em;\n  cursor: pointer;\n}\n\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n.is-danger {\n  color: #ff3860;\n  font-style: italic;\n}\n\n.empty {\n  color: var(--text);\n  font-style: italic;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\" ref=\"body\" v-scroll=\"onBodyScroll\">\n      <table class=\"datatable multi-section\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name datatable-row-header\">\n              {{ $t('people.list.name') }}\n            </th>\n            <th scope=\"col\" class=\"email\" v-if=\"!isBots\">\n              {{ $t('people.list.email') }}\n            </th>\n            <th scope=\"col\" class=\"phone\" v-if=\"!isBots\">\n              {{ $t('people.list.phone') }}\n            </th>\n            <th scope=\"col\" class=\"expiration\" v-if=\"isBots\">\n              {{ $t('people.list.expiration') }}\n            </th>\n            <th scope=\"col\" class=\"role\">\n              {{ $t('people.list.role') }}\n            </th>\n            <th scope=\"col\" class=\"contract\" v-if=\"!isBots\">\n              {{ $t('people.list.contract') }}\n            </th>\n            <th scope=\"col\" class=\"departments\">\n              {{ $t('people.list.departments') }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\" v-if=\"activePeople.length > 0\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"5\">\n              <span class=\"datatable-row-header\">{{\n                $t('people.active')\n              }}</span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row\"\n            v-for=\"entry in activePeople\"\n            :key=\"entry.id\"\n          >\n            <people-name-cell\n              class=\"name datatable-row-header\"\n              :person=\"entry\"\n            />\n            <td class=\"email\" v-if=\"!isBots\">{{ entry.email }}</td>\n            <td class=\"phone\" v-if=\"!isBots\">{{ entry.phone }}</td>\n            <td\n              class=\"expiration\"\n              :class=\"{\n                error: isExpired(entry.expiration_date),\n                warning: isSoonExpired(entry.expiration_date)\n              }\"\n              v-if=\"isBots\"\n            >\n              {{ entry.expiration_date }}\n              <alert-triangle-icon class=\"icon\" />\n            </td>\n            <td class=\"role\">{{ $t('people.role.' + entry.role) }}</td>\n            <td class=\"contract\" v-if=\"!isBots\">\n              {{ $t('people.contract.' + entry.contract_type) }}\n            </td>\n            <department-names-cell\n              class=\"departments\"\n              :departments=\"entry.departments\"\n            />\n            <row-actions-cell\n              v-if=\"isCurrentUserAdmin\"\n              :entry-id=\"entry.id\"\n              :hide-avatar=\"false\"\n              :hide-change-password=\"isBots\"\n              :hide-delete=\"true\"\n              :hide-refresh=\"!isBots\"\n              @avatar-clicked=\"$emit('avatar-clicked', entry)\"\n              @change-password-clicked=\"$emit('change-password-clicked', entry)\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @refresh-clicked=\"$emit('refresh-clicked', entry)\"\n            />\n            <td class=\"actions\" v-else></td>\n          </tr>\n        </tbody>\n        <tbody class=\"datatable-body\" v-if=\"unactivePeople.length > 0\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"5\">\n              <span class=\"datatable-row-header\">\n                {{ $t('people.unactive') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row\"\n            v-for=\"entry in unactivePeople\"\n            :key=\"entry.id\"\n          >\n            <people-name-cell\n              class=\"name datatable-row-header\"\n              :person=\"entry\"\n            />\n            <td class=\"email\" v-if=\"!isBots\">{{ entry.email }}</td>\n            <td class=\"phone\" v-if=\"!isBots\">{{ entry.phone }}</td>\n            <td class=\"expiration\" v-if=\"isBots\">\n              {{ entry.expiration_date }}\n            </td>\n            <td class=\"role\">{{ $t('people.role.' + entry.role) }}</td>\n            <td class=\"contract\" v-if=\"!isBots\">\n              {{ $t('people.contract.' + entry.contract_type) }}\n            </td>\n            <department-names-cell\n              class=\"departments\"\n              :departments=\"entry.departments\"\n            />\n            <row-actions-cell\n              v-if=\"isCurrentUserAdmin\"\n              :entry-id=\"entry.id\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @delete-clicked=\"$emit('delete-clicked', entry)\"\n            />\n            <td class=\"actions\" v-else></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <p class=\"has-text-centered footer-info\" v-if=\"!isLoading\">\n      {{ nbUsersDetails }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { AlertTriangleIcon } from 'vue-feather-icons'\n\nimport DepartmentNamesCell from '@/components/cells/DepartmentNamesCell.vue'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nexport default {\n  name: 'people-list',\n\n  components: {\n    AlertTriangleIcon,\n    DepartmentNamesCell,\n    PeopleNameCell,\n    RowActionsCell,\n    TableInfo\n  },\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isBots: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    ...mapGetters(['departmentMap', 'isCurrentUserAdmin']),\n\n    activePeople() {\n      return this.entries.filter(person => person.active)\n    },\n\n    today() {\n      return new Date().toJSON().slice(0, 10)\n    },\n\n    nextWeek() {\n      const date = new Date()\n      date.setDate(date.getDate() + 7)\n      return date.toJSON().slice(0, 10)\n    },\n\n    unactivePeople() {\n      return this.entries.filter(person => !person.active)\n    },\n\n    nbUsersDetails() {\n      const nbUsers = this.entries.length\n      const nbActiveUsers = this.activePeople.length\n      const labelUsers = this.$tc(\n        this.isBots ? 'bots.bots' : 'people.persons',\n        nbUsers\n      )\n      const labelActiveUsers = this.$tc(\n        this.isBots ? 'bots.active_bots' : 'people.active_persons',\n        nbActiveUsers\n      )\n      return `${nbUsers} ${labelUsers} (${nbActiveUsers} ${labelActiveUsers})`\n    }\n  },\n\n  methods: {\n    isExpired(expirationDate) {\n      return expirationDate < this.today\n    },\n\n    isSoonExpired(expirationDate) {\n      return !this.isExpired(expirationDate) && expirationDate < this.nextWeek\n    },\n\n    onBodyScroll(event, position) {\n      this.$refs.body.style.left = `-${position.scrollLeft}px`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.name {\n  width: 230px;\n  min-width: 230px;\n  user-select: text;\n}\n.email {\n  width: 340px;\n  min-width: 340px;\n  user-select: text;\n}\n.phone {\n  width: 200px;\n  min-width: 200px;\n  user-select: text;\n}\n.expiration {\n  width: 200px;\n  min-width: 200px;\n\n  .icon {\n    display: none;\n  }\n\n  &.error,\n  &.warning {\n    .icon {\n      display: inline;\n      margin-left: 0.5rem;\n    }\n  }\n\n  &.error {\n    color: $red;\n  }\n  &.warning {\n    color: $yellow;\n  }\n}\n.role {\n  width: 200px;\n  min-width: 200px;\n}\n.contract {\n  width: 200px;\n  min-width: 200px;\n}\n.actions {\n  min-width: 100px;\n}\n\n.data-list {\n  margin-top: 2em;\n}\n\n.departments-element {\n  padding: 5px;\n}\n</style>\n"],"names":["_sfc_main","modalMixin","PeopleAvatar","Spinner","event","file","formData","Combobox","ComboboxDepartment","DateField","DepartmentName","TextField","mapGetters","department","_a","person","form","idToRemove","departmentIndex","AlertTriangleIcon","DepartmentNamesCell","PeopleNameCell","RowActionsCell","TableInfo","date","nbUsers","nbActiveUsers","labelUsers","labelActiveUsers","expirationDate","position"],"mappings":"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"}