{"version":3,"file":"Bots-BXKmJLWC.js","sources":["../../src/components/modals/NewTokenModal.vue","../../src/components/pages/Bots.vue"],"sourcesContent":["<template>\n  <div class=\"modal\" :class=\"{ 'is-active': active }\">\n    <div class=\"modal-background\"></div>\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\">\n          {{ $t('bots.new_token_title', { name: person.full_name }) }}\n        </h1>\n\n        <form class=\"form\" @submit.prevent v-if=\"!person.access_token\">\n          <p class=\"mb2\">\n            <alert-triangle-icon class=\"icon mr05 warning\" />{{\n              $t('bots.new_token_warning')\n            }}\n          </p>\n          <date-field\n            :disabled-dates=\"{ to: new Date() }\"\n            :invalid=\"!isValidExpirationDate\"\n            :label=\"$t('bots.fields.expiration_date')\"\n            v-model=\"form.expiration_date\"\n          />\n          <div class=\"flexrow right\">\n            <button\n              class=\"button flexrow-item is-primary\"\n              :disabled=\"!isValidExpirationDate\"\n              @click=\"generateToken\"\n            >\n              {{ $t('bots.generate') }}\n            </button>\n            <button\n              class=\"button flexrow-item is-link\"\n              @click=\"$emit('cancel')\"\n            >\n              {{ $t('main.cancel') }}\n            </button>\n          </div>\n        </form>\n\n        <template v-else>\n          <p class=\"mb2 strong\">\n            <alert-triangle-icon class=\"icon mr05 warning\" />{{\n              $t('bots.copy_token_warning')\n            }}\n          </p>\n          <div class=\"token\">\n            <text-field\n              ref=\"token\"\n              :disabled=\"!visible\"\n              input-class=\" token-input\"\n              :readonly=\"true\"\n              :type=\"visible ? 'text' : 'password'\"\n              :value=\"person.access_token\"\n            />\n            <eye-off-icon\n              v-if=\"visible\"\n              class=\"icon\"\n              @click=\"visible = false\"\n            />\n            <eye-icon v-else class=\"icon\" @click=\"visible = true\" />\n          </div>\n          <div class=\"flexrow right\">\n            <Transition name=\"fade\">\n              <p class=\"success has-text-right mr05\" v-if=\"message\">\n                {{ message }}\n              </p>\n            </Transition>\n            <button\n              class=\"button flexrow-item is-primary\"\n              @click=\"copyClicked\"\n              :disabled=\"!person.access_token\"\n            >\n              {{ $t('main.copy') }}\n            </button>\n            <button class=\"button flexrow-item is-link\" @click=\"$emit('close')\">\n              {{ $t('main.close') }}\n            </button>\n          </div>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { AlertTriangleIcon, EyeIcon, EyeOffIcon } from 'vue-feather-icons'\n\nimport { modalMixin } from '@/components/modals/base_modal'\nimport DateField from '@/components/widgets/DateField.vue'\nimport TextField from '@/components/widgets/TextField.vue'\n\nexport default {\n  name: 'new-token-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    AlertTriangleIcon,\n    DateField,\n    EyeIcon,\n    EyeOffIcon,\n    TextField\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    person: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      form: {\n        expiration_date: null\n      },\n      message: null,\n      visible: false\n    }\n  },\n\n  computed: {\n    isValidExpirationDate() {\n      return (\n        !this.form.expiration_date ||\n        new Date(this.form.expiration_date) > new Date()\n      )\n    }\n  },\n\n  methods: {\n    generateToken() {\n      this.$emit('generate-token', {\n        id: this.person.id,\n        expiration_date: this.form.expiration_date\n      })\n    },\n\n    async copyClicked() {\n      this.message = null\n      await navigator.clipboard.writeText(this.person.access_token)\n      this.message = this.$t('bots.token_copied')\n      setTimeout(() => {\n        this.message = null\n      }, 5000)\n    },\n\n    resetForm() {\n      this.form = {\n        expiration_date: this.person.expiration_date\n      }\n      this.message = null\n      this.visible = false\n    }\n  },\n\n  watch: {\n    active() {\n      if (this.active) {\n        this.resetForm()\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.warning {\n  color: $orange;\n}\n\n.form :deep(.vdp-datepicker__calendar) {\n  top: -175px;\n  left: -10px;\n}\n\n.token {\n  position: relative;\n\n  :deep(.token-input) {\n    padding-right: 50px;\n\n    &[type='text'] {\n      text-overflow: ellipsis;\n    }\n  }\n\n  .icon {\n    cursor: pointer;\n    opacity: 0.5;\n    position: absolute;\n    right: 15px;\n    top: 15px;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n}\n\n.right {\n  justify-content: flex-end;\n}\n\n.fade-enter-active {\n  transition: all 0.3s ease;\n}\n.fade-leave-active {\n  transition: opacity 0.8s ease;\n}\n.fade-enter {\n  transform: translateX(20px);\n  opacity: 0;\n}\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n","<template>\n  <div class=\"bots page fixed-page\">\n    <div class=\"flexrow page-header\">\n      <page-title class=\"flexrow-item filler\" :text=\"$t('bots.title')\" />\n      <button-simple\n        class=\"flexrow-item\"\n        :text=\"$t('bots.new_bot')\"\n        :is-responsive=\"true\"\n        icon=\"plus\"\n        @click=\"onNewClicked\"\n        v-if=\"isCurrentUserAdmin\"\n      />\n    </div>\n\n    <div class=\"flexrow search-options\">\n      <search-field\n        ref=\"search-field\"\n        class=\"search flexrow-item\"\n        @change=\"onSearchChange\"\n        placeholder=\"ex: gazu bot\"\n      />\n      <combobox-department\n        class=\"combobox-department flexrow-item\"\n        :label=\"$t('main.department')\"\n        v-model=\"selectedDepartment\"\n      />\n      <combobox-styled\n        class=\"flexrow-item\"\n        :label=\"$t('people.fields.role')\"\n        :options=\"roleOptions\"\n        locale-key-prefix=\"people.role.\"\n        no-margin\n        v-model=\"role\"\n      />\n    </div>\n\n    <div class=\"query-list\"></div>\n\n    <people-list\n      :entries=\"currentPeople\"\n      :is-bots=\"true\"\n      :is-loading=\"isPeopleLoading\"\n      :is-error=\"isPeopleLoadingError\"\n      @avatar-clicked=\"onAvatarClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n      @edit-clicked=\"onEditClicked\"\n      @refresh-clicked=\"onRefreshClicked\"\n    />\n\n    <edit-avatar-modal\n      :active=\"modals.avatar\"\n      :error-text=\"$t('bots.edit_avatar_error')\"\n      :is-deleting=\"loading.deletingAvatar\"\n      :is-error=\"errors.avatar\"\n      :is-updating=\"loading.updatingAvatar\"\n      :person=\"personToEdit\"\n      @close=\"modals.avatar = false\"\n      @delete=\"deleteAvatar\"\n      @update=\"updateAvatar\"\n    />\n\n    <edit-person-modal\n      :active=\"modals.edit\"\n      :is-bot=\"true\"\n      :is-error=\"errors.edit\"\n      :is-loading=\"loading.edit\"\n      :is-user-limit-error=\"errors.userLimit\"\n      :person-to-edit=\"personToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditPeople\"\n    />\n\n    <new-token-modal\n      :active=\"modals.newToken\"\n      :person=\"personToEdit\"\n      @cancel=\"modals.newToken = false\"\n      @close=\"modals.newToken = false\"\n      @generate-token=\"confirmGenerateToken\"\n    />\n\n    <hard-delete-modal\n      :active=\"modals.del\"\n      :error-text=\"$t('people.delete_error')\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :lock-text=\"personToDelete ? personToDelete.full_name : ''\"\n      :text=\"deleteText\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeletePeople\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment'\nimport ComboboxStyled from '@/components/widgets/ComboboxStyled'\nimport EditAvatarModal from '@/components/modals/EditAvatarModal'\nimport EditPersonModal from '@/components/modals/EditPersonModal'\nimport HardDeleteModal from '@/components/modals/HardDeleteModal'\nimport NewTokenModal from '@/components/modals/NewTokenModal'\nimport PageTitle from '@/components/widgets/PageTitle'\nimport PeopleList from '@/components/lists/PeopleList'\nimport SearchField from '@/components/widgets/SearchField'\nimport { searchMixin } from '@/components/mixins/search'\n\nexport default {\n  name: 'bots',\n\n  mixins: [searchMixin],\n\n  components: {\n    ButtonSimple,\n    ComboboxDepartment,\n    ComboboxStyled,\n    EditAvatarModal,\n    EditPersonModal,\n    HardDeleteModal,\n    NewTokenModal,\n    PageTitle,\n    PeopleList,\n    SearchField\n  },\n\n  data() {\n    return {\n      role: 'all',\n      roleOptions: [\n        { label: 'all', value: 'all' },\n        { label: 'admin', value: 'admin' },\n        { label: 'client', value: 'client' },\n        { label: 'manager', value: 'manager' },\n        { label: 'supervisor', value: 'supervisor' },\n        { label: 'user', value: 'user' },\n        { label: 'vendor', value: 'vendor' }\n      ],\n      errors: {\n        avatar: false,\n        del: false,\n        edit: false,\n        userLimit: false\n      },\n      loading: {\n        del: false,\n        deletingAvatar: false,\n        edit: false,\n        updatingAvatar: false\n      },\n      modals: {\n        avatar: false,\n        del: false,\n        edit: false,\n        newToken: false\n      },\n      personToDelete: {},\n      personToEdit: { role: 'user' },\n      selectedDepartment: ''\n    }\n  },\n\n  mounted() {\n    this.role = this.$route.query.role || 'all'\n    this.selectedDepartment = this.$route.query.department || ''\n    this.loadPeople(() => {\n      this.setSearchFromUrl()\n      this.onSearchChange()\n    }) // Needed to show department informations\n  },\n\n  watch: {\n    'modals.edit'() {\n      if (this.modals.edit) {\n        this.errors.edit = false\n        this.errors.userLimit = false\n        this.loading.edit = false\n      }\n    },\n\n    selectedDepartment() {\n      this.updateRoute()\n    },\n\n    role() {\n      this.updateRoute()\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'displayedPeople',\n      'isCurrentUserAdmin',\n      'isPeopleLoading',\n      'isPeopleLoadingError'\n    ]),\n\n    currentPeople() {\n      let people = this.displayedPeople.filter(person => person.is_bot)\n      if (this.role !== 'all') {\n        people = people.filter(person => person.role === this.role)\n      }\n      if (this.selectedDepartment) {\n        people = people.filter(person =>\n          person.departments.includes(this.selectedDepartment)\n        )\n      }\n      return people\n    },\n\n    deleteText() {\n      const personName = this.personToDelete?.full_name\n      return personName ? this.$t('people.delete_text', { personName }) : ''\n    },\n\n    searchField() {\n      return this.$refs['search-field']\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'clearPersonAvatar',\n      'deletePeople',\n      'editPerson',\n      'generateToken',\n      'loadDepartments',\n      'loadPeople',\n      'newPerson',\n      'setPeopleSearch',\n      'uploadPersonAvatar'\n    ]),\n\n    async deleteAvatar() {\n      this.loading.deletingAvatar = true\n      try {\n        await this.clearPersonAvatar(this.personToEdit)\n        this.modals.avatar = false\n      } catch (err) {\n        this.errors.avatar = true\n      }\n      this.loading.deletingAvatar = false\n    },\n\n    async updateAvatar(formData) {\n      this.loading.updatingAvatar = true\n      try {\n        await this.uploadPersonAvatar({ person: this.personToEdit, formData })\n        this.modals.avatar = false\n      } catch (err) {\n        this.errors.avatar = true\n      }\n      this.loading.updatingAvatar = false\n    },\n\n    confirmGenerateToken(form) {\n      this.generateToken(form)\n        .then(person => {\n          this.updatePersonToEdit(person)\n        })\n        .catch(console.error)\n    },\n\n    confirmEditPeople(form) {\n      let action = 'editPerson'\n      if (this.personToEdit.id === undefined) action = 'newPerson'\n      else form.id = this.personToEdit.id\n      this.loading.edit = true\n      this.errors.edit = false\n      this.errors.userLimit = false\n      this[action](form)\n        .then(person => {\n          this.loading.edit = false\n          this.modals.edit = false\n          const access_token = person.access_token\n          if (access_token?.length) {\n            this.updatePersonToEdit(person)\n            this.modals.newToken = true\n          }\n        })\n        .catch(err => {\n          console.error(err)\n          const message = err.body?.message\n          const isUserLimitReached =\n            typeof message === 'string' && message.includes('limit')\n          if (isUserLimitReached) {\n            this.errors.userLimit = true\n          } else {\n            this.errors.edit = true\n          }\n          this.loading.edit = false\n        })\n    },\n\n    confirmDeletePeople() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deletePeople(this.personToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.del = false\n          this.errors.del = true\n        })\n    },\n\n    onSearchChange() {\n      if (!this.searchField) return\n      const searchQuery = this.searchField.getValue()\n      if (searchQuery.length !== 1) {\n        this.setPeopleSearch(searchQuery)\n        this.updateRoute()\n      }\n    },\n\n    onAvatarClicked(person) {\n      this.updatePersonToEdit(person)\n      this.errors.avatar = false\n      this.modals.avatar = true\n    },\n\n    onDeleteClicked(person) {\n      this.personToDelete = person\n      this.modals.del = true\n    },\n\n    onEditClicked(person) {\n      this.updatePersonToEdit(person)\n      this.modals.edit = true\n    },\n\n    onRefreshClicked(person) {\n      this.updatePersonToEdit(person)\n      this.modals.newToken = true\n    },\n\n    onNewClicked() {\n      this.updatePersonToEdit({ role: 'user' })\n      this.modals.edit = true\n    },\n\n    updatePersonToEdit(person) {\n      this.personToEdit = {\n        ...person,\n        expiration_date: person.expiration_date\n          ? new Date(person.expiration_date)\n          : null\n      }\n    },\n\n    updateRoute() {\n      const search = this.searchField.getValue()\n      const department = this.selectedDepartment\n      const role = this.role\n      this.$router.push({ query: { search, department, role } })\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('bots.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.search {\n  margin-top: 2em;\n}\n.query-list {\n  margin-top: 1.5rem;\n}\n.search-options {\n  align-items: flex-end;\n}\n.filter-button {\n  margin-top: 0.3em;\n}\n</style>\n"],"names":["_sfc_main","modalMixin","AlertTriangleIcon","DateField","EyeIcon","EyeOffIcon","TextField","searchMixin","ButtonSimple","ComboboxDepartment","ComboboxStyled","EditAvatarModal","EditPersonModal","HardDeleteModal","NewTokenModal","PageTitle","PeopleList","SearchField","mapGetters","people","person","personName","_a","mapActions","formData","form","action","access_token","err","message","searchQuery","search","department","role"],"mappings":"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"}