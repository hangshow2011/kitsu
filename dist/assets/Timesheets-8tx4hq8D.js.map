{"version":3,"file":"Timesheets-8tx4hq8D.js","sources":["../../src/components/lists/PeopleTimesheetList.vue","../../src/components/lists/TimeSpentTaskList.vue","../../src/components/sides/PeopleTimesheetInfo.vue","../../src/components/pages/Timesheets.vue"],"sourcesContent":["<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\" ref=\"body\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name datatable-row-header\">\n              {{ $t('people.list.name') }}\n            </th>\n\n            <th\n              scope=\"col\"\n              class=\"time year\"\n              :key=\"`year-${year}`\"\n              v-for=\"year in yearRange\"\n              v-if=\"detailLevel === 'year'\"\n            >\n              {{ year }}\n            </th>\n\n            <th\n              scope=\"col\"\n              class=\"time month\"\n              :key=\"`month-${month}`\"\n              v-for=\"month in monthRange\"\n              v-if=\"detailLevel === 'month'\"\n            >\n              {{ monthToString(month) }}\n            </th>\n\n            <th\n              scope=\"col\"\n              class=\"daytime\"\n              :title=\"getWeekTitle(week)\"\n              :key=\"`week-${week}`\"\n              v-for=\"week in weekRange\"\n              v-if=\"detailLevel === 'week'\"\n            >\n              {{ week }}\n            </th>\n\n            <th\n              scope=\"col\"\n              class=\"daytime\"\n              :key=\"`day-${day}`\"\n              v-for=\"day in dayRange\"\n              v-if=\"detailLevel === 'day'\"\n            >\n              {{ day }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\" v-if=\"!isLoading\">\n          <tr class=\"datatable-row\" v-for=\"person in people\" :key=\"person.id\">\n            <th class=\"datatable-row-header name\">\n              <div class=\"flexrow\">\n                <people-avatar class=\"flexrow-item\" :person=\"person\" />\n                <people-name class=\"flexrow-item\" with-link :person=\"person\" />\n              </div>\n            </th>\n\n            <td\n              class=\"time year\"\n              :class=\"{\n                selected: isYearSelected(person.id, year)\n              }\"\n              :key=\"`year-${year}-${person.id}`\"\n              v-for=\"year in yearRange\"\n              v-if=\"detailLevel === 'year'\"\n            >\n              <router-link\n                class=\"duration\"\n                :to=\"getYearDetailRoute(person, year)\"\n                v-if=\"yearDuration(year, person.id) > 0\"\n              >\n                {{ yearDuration(year, person.id) }}\n              </router-link>\n              <template v-else> - </template>\n            </td>\n\n            <td\n              class=\"time month\"\n              :class=\"{\n                selected: isMonthSelected(person.id, year, month)\n              }\"\n              :key=\"`month-${month}-${person.id}`\"\n              v-for=\"month in monthRange\"\n              v-if=\"detailLevel === 'month'\"\n            >\n              <router-link\n                class=\"duration\"\n                :to=\"getMonthDetailRoute(person, year, month)\"\n                v-if=\"monthDuration(month, person.id) > 0\"\n              >\n                {{ monthDuration(month, person.id) }}\n              </router-link>\n              <template v-else> - </template>\n            </td>\n\n            <td\n              class=\"daytime\"\n              :class=\"{\n                selected: isWeekSelected(person.id, year, week)\n              }\"\n              :key=\"`week-${week}-${person.id}`\"\n              v-for=\"week in weekRange\"\n              v-if=\"detailLevel === 'week'\"\n            >\n              <router-link\n                class=\"duration\"\n                :class=\"{\n                  warning:\n                    weekDuration(week, person.id) >\n                    5 * organisation.hours_by_day\n                }\"\n                :to=\"getWeekDetailRoute(person, year, week)\"\n                v-if=\"weekDuration(week, person.id) > 0\"\n              >\n                {{ weekDuration(week, person.id) }}\n              </router-link>\n              <template v-else> - </template>\n            </td>\n\n            <td\n              class=\"daytime\"\n              :class=\"{\n                weekend: isWeekend(year, month, day),\n                selected: isDaySelected(person.id, year, month, day)\n              }\"\n              :key=\"`day-${day}-${person.id}`\"\n              v-for=\"day in dayRange\"\n              v-if=\"detailLevel === 'day'\"\n            >\n              <router-link\n                class=\"duration\"\n                :to=\"getDayDetailRoute(person, year, month, day)\"\n                v-if=\"dayDuration(day, person.id) > 0\"\n              >\n                {{ dayDuration(day, person.id) }}\n              </router-link>\n              <template v-else-if=\"isDayOff(person.id, day)\">\n                {{ $t('timesheets.off').toUpperCase() }}\n              </template>\n              <template v-else> - </template>\n            </td>\n            <td class=\"actions\"></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <p class=\"has-text-centered footer-info\" v-if=\"!isLoading\">\n      {{ people.length }} {{ $tc('people.persons', people.length) }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport { mapGetters } from 'vuex'\n\nimport {\n  getMonthRange,\n  getWeekRange,\n  getDayRange,\n  hoursToDays,\n  monthToString,\n  range\n} from '@/lib/time'\n\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport PeopleName from '@/components/widgets/PeopleName.vue'\nimport TableInfo from '@/components/widgets/TableInfo.vue'\n\nexport default {\n  name: 'people-timesheet-list',\n\n  components: {\n    PeopleAvatar,\n    PeopleName,\n    TableInfo\n  },\n\n  data() {\n    return {\n      currentMonth: moment().month() + 1,\n      currentYear: moment().year(),\n      currentWeek: moment().week()\n    }\n  },\n\n  props: {\n    timesheet: {\n      type: Object,\n      default: () => {}\n    },\n\n    people: {\n      type: Array,\n      default: () => []\n    },\n\n    detailLevel: {\n      type: String,\n      default: 'day'\n    },\n\n    year: {\n      type: Number,\n      default: 0\n    },\n\n    month: {\n      type: Number,\n      default: 0\n    },\n\n    unit: {\n      type: String,\n      default: 'hour'\n    },\n\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n\n    isError: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    ...mapGetters(['dayOffMap', 'organisation', 'route']),\n\n    yearRange() {\n      return range(2018, moment().year())\n    },\n\n    monthRange() {\n      return getMonthRange(this.year, this.currentYear, this.currentMonth)\n    },\n\n    dayRange() {\n      return getDayRange(\n        this.year,\n        this.month,\n        this.currentYear,\n        this.currentMonth\n      )\n    },\n\n    weekRange() {\n      return getWeekRange(this.year, this.currentYear, this.currentWeek)\n    },\n\n    isHours() {\n      return this.unit === 'hour'\n    }\n  },\n\n  methods: {\n    monthToString,\n\n    yearDuration(year, personId) {\n      const yearString = `${year}`\n      const duration = this.getDuration(yearString, personId)\n      return this.isHours\n        ? duration\n        : hoursToDays(this.organisation, duration).toFixed(2)\n    },\n\n    monthDuration(month, personId) {\n      const monthString = `${month}`\n      const duration = this.getDuration(monthString, personId)\n      return this.isHours\n        ? duration\n        : hoursToDays(this.organisation, duration).toFixed(2)\n    },\n\n    weekDuration(week, personId) {\n      const duration = this.getDuration(week, personId)\n      return this.isHours\n        ? duration\n        : hoursToDays(this.organisation, duration).toFixed(2)\n    },\n\n    dayDuration(day, personId) {\n      if (this.dayOffMap[personId]?.[`${day}`] === true) {\n        return this.$t('timesheets.off').toUpperCase()\n      } else {\n        const duration = this.getDuration(day, personId)\n        return this.isHours\n          ? duration\n          : hoursToDays(this.organisation, duration).toFixed(2)\n      }\n    },\n\n    getDuration(index, personId) {\n      if (\n        this.timesheet &&\n        this.timesheet[index] &&\n        this.timesheet[index][personId]\n      ) {\n        return this.timesheet[index][personId] / 60\n      } else {\n        return '-'\n      }\n    },\n\n    isWeekend(year, month, day) {\n      const date = moment(`${year}-${month}-${day}`, 'YYYY-M-D')\n      return [0, 6].includes(date.day())\n    },\n\n    isDaySelected(personId, year, month, day) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        this.$route.params.year === year &&\n        this.$route.params.month === month &&\n        this.$route.params.day === day\n      )\n    },\n\n    isWeekSelected(personId, year, week) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        this.$route.params.year === year &&\n        this.$route.params.week === week\n      )\n    },\n\n    isMonthSelected(personId, year, month) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        this.$route.params.year === year &&\n        this.$route.params.month === month\n      )\n    },\n\n    isYearSelected(personId, year) {\n      return (\n        this.$route.params.person_id &&\n        this.$route.params.person_id === personId &&\n        this.$route.params.year === year\n      )\n    },\n\n    getWeekTitle(week) {\n      const beginning = moment(this.currentYear + '-' + week, 'YYYY-W')\n      const end = beginning.clone().add(6, 'days')\n      return beginning.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD')\n    },\n\n    getYearDetailRoute(person, year) {\n      return {\n        name: 'timesheets-year-person',\n        params: {\n          person_id: person.id,\n          year: year\n        },\n        query: {\n          productionId: this.$route.query.productionId\n        }\n      }\n    },\n\n    getMonthDetailRoute(person, year, month) {\n      return {\n        name: 'timesheets-month-person',\n        params: {\n          person_id: person.id,\n          year: year,\n          month: month\n        },\n        query: {\n          productionId: this.$route.query.productionId\n        }\n      }\n    },\n\n    getWeekDetailRoute(person, year, week) {\n      return {\n        name: 'timesheets-week-person',\n        params: {\n          person_id: person.id,\n          year: year,\n          week: week\n        },\n        query: {\n          productionId: this.$route.query.productionId\n        }\n      }\n    },\n\n    getDayDetailRoute(person, year, month, day) {\n      return {\n        name: 'timesheets-day-person',\n        params: {\n          person_id: person.id,\n          year: year,\n          month: month,\n          day: day\n        },\n        query: {\n          productionId: this.$route.query.productionId\n        }\n      }\n    },\n\n    isDayOff(personId, day) {\n      const dayString = `${day}`.padStart(2, '0')\n      return this.dayOffMap[personId] && this.dayOffMap[personId][dayString]\n    }\n  },\n\n  watch: {\n    route() {\n      const els = document.getElementsByClassName('selected')\n      if (els.length === 0) {\n        // selected element is not visible\n        this.$refs.body.scrollLeft += 350\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n.dark .weekend {\n  background-color: $dark-grey;\n}\n\n.dark .duration:hover {\n  color: $white;\n}\n\n.name {\n  width: 230px;\n  min-width: 230px;\n}\n\n.time {\n  width: 70px;\n  min-width: 70px;\n\n  &.month {\n    width: 80px;\n    min-width: 80px;\n  }\n\n  &.year {\n    width: 90px;\n    min-width: 90px;\n  }\n}\n\n.daytime {\n  width: 60px;\n  min-width: 60px;\n}\n\n.time,\n.daytime {\n  text-align: center;\n  vertical-align: middle;\n}\n\nth.actions {\n  padding: 0;\n  width: 100%;\n  min-width: auto;\n}\n\na,\na:hover {\n  color: inherit;\n}\n\n.warning {\n  color: #ff3860;\n}\n\n.warning:hover {\n  color: red;\n}\n\n.weekend {\n  background-color: $white-grey;\n}\n\n.duration:hover {\n  background: var(--background-selectable);\n}\n\n.selected .duration {\n  background: var(--background-selected);\n  color: var(--text);\n\n  &:hover {\n    background: var(--background-selected);\n    color: var(--text);\n    cursor: default;\n  }\n}\n\n.duration {\n  border-radius: 0.3em;\n  padding: 0.5em;\n}\n\n.selected .duration.warning {\n  background: $red;\n  color: black;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <table-info :is-loading=\"isLoading\" :is-error=\"isLoadingError\" />\n\n    <div class=\"aggregated-time-spents\">\n      <div\n        :key=\"projectId\"\n        class=\"by-project\"\n        v-for=\"projectId in Object.keys(projects)\"\n      >\n        <production-name\n          :production=\"{\n            id: projectId,\n            name: projectNames[projectId]\n          }\"\n          v-if=\"projectNames[projectId]\"\n        />\n\n        <div\n          :key=\"taskTypeId\"\n          class=\"by-task-type-id\"\n          v-for=\"taskTypeId in Object.keys(projects[projectId])\"\n        >\n          <task-type-name :task-type=\"taskTypeMap.get(taskTypeId)\" />\n\n          <div class=\"table-body\">\n            <table class=\"datatable\">\n              <tbody class=\"datatable-body\">\n                <tr\n                  :key=\"task.id\"\n                  class=\"by-task-type-id datatable-row\"\n                  v-for=\"task in projects[projectId][taskTypeId]\"\n                >\n                  <router-link :to=\"getTaskPath(task)\">\n                    <td class=\"name\">\n                      {{ task.name }}\n                    </td>\n                    <td class=\"duration\">{{ task.duration / 60 }}</td>\n                  </router-link>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport { firstBy } from 'thenby'\n\nimport { sortByName } from '@/lib/sorting'\nimport { getTaskPath } from '@/lib/path'\n\nimport ProductionName from '@/components/widgets/ProductionName'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\n\nexport default {\n  name: 'time-spent-task-list',\n\n  components: {\n    TableInfo,\n    ProductionName,\n    TaskTypeName\n  },\n\n  data() {\n    return {\n      projectNames: {}\n    }\n  },\n\n  props: {\n    tasks: {\n      type: Array,\n      default: () => []\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isLoadingError: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    ...mapGetters(['productionMap', 'taskTypeMap']),\n\n    projects() {\n      const projects = {}\n      const tasks = [...this.tasks].sort(firstBy('project_name'))\n\n      tasks.forEach(task => {\n        if (!projects[task.project_id]) projects[task.project_id] = {}\n        if (!projects[task.project_id][task.task_type_id]) {\n          projects[task.project_id][task.task_type_id] = []\n        }\n\n        let name = task.entity_name\n        if (['Shot', 'Sequence'].includes(task.entity_type_name)) {\n          name = `${task.sequence_name} / ${name}`\n          if (task.episode_name) name = `${task.episode_name} / ${name}`\n        } else {\n          name = `${task.entity_type_name} / ${name}`\n        }\n\n        projects[task.project_id][task.task_type_id].push({\n          id: task.task_id,\n          project_id: task.project_id,\n          task_type_id: task.task_type_id,\n          name: name,\n          duration: task.duration\n        })\n      })\n\n      Object.keys(projects).forEach(projectId => {\n        Object.keys(projects[projectId]).forEach(taskTypeId => {\n          projects[projectId][taskTypeId] = sortByName(\n            projects[projectId][taskTypeId]\n          )\n        })\n      })\n\n      return projects\n    }\n  },\n\n  methods: {\n    getTaskPath(task) {\n      const project = this.productionMap.get(task.project_id)\n      if (!project || project.project_status_name === 'Closed') {\n        return ''\n      }\n      const isTVShow = project.production_type === 'tvshow'\n      const episode = { id: project.first_episode_id }\n      return getTaskPath(task, null, isTVShow, episode, this.taskTypeMap)\n    },\n\n    onBodyScroll(event, position) {\n      this.$refs.headerWrapper.style.left = `-${position.scrollLeft}px`\n    }\n  },\n\n  watch: {\n    tasks() {\n      this.projectNames = this.tasks.reduce((projectNames, task) => {\n        const production = this.productionMap.get(task.project_id)\n        const suffix =\n          production?.project_status_name === 'Closed' ? ' (closed)' : ''\n        projectNames[task.project_id] = task.project_name + suffix\n        return projectNames\n      }, {})\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .table {\n  border-color: $dark-grey;\n}\n\n.name {\n  width: 300px;\n}\n\n.duration {\n  text-align: right;\n}\n\n.data-list {\n  padding-right: 1em;\n}\n\n.table {\n  border-top: 1px solid $light-grey;\n  border-bottom: 1px solid $light-grey;\n  margin-bottom: 1em;\n  margin-top: 0.5em;\n}\n\n.by-task-type-id {\n  margin-top: 1em;\n  padding-left: 1em;\n}\n\n.by-project {\n  margin-bottom: 2em;\n}\n\na {\n  color: var(--text);\n}\n</style>\n","<template>\n  <div class=\"people-timesheet-info\">\n    <div class=\"close\">\n      <router-link class=\"close-button\" :to=\"closeRoute\">\n        <x-icon />\n      </router-link>\n    </div>\n\n    <div class=\"flexrow\">\n      <people-avatar class=\"flexrow-item\" :person=\"person\" :is-lazy=\"false\" />\n      <page-title class=\"flexrow-item\" :text=\"person.full_name\" />\n    </div>\n\n    <div class=\"info-date\" v-if=\"isYearInfo\">\n      {{ year }}\n    </div>\n\n    <div class=\"info-date\" v-if=\"isMonthInfo\">{{ monthString }} {{ year }}</div>\n\n    <div class=\"info-date\" v-else-if=\"isWeekInfo\">\n      {{ $t('main.week') }}\n      {{ week }}, {{ startDay }} - {{ endDay }} {{ weekMonth }} {{ year }}\n    </div>\n\n    <div class=\"info-day-off\" v-if=\"!isDayInfo\">\n      {{ dayOffCount }}\n      {{ $tc('timesheets.nb_days_off', dayOffCount) }}\n    </div>\n\n    <div class=\"info-date\" v-else-if=\"isDayInfo\">\n      {{ day }} {{ monthString }} {{ year }}\n    </div>\n\n    <time-spent-task-list\n      class=\"time-spent-list\"\n      :tasks=\"tasks\"\n      :is-loading=\"isLoading\"\n      :is-error=\"isLoadingError\"\n    />\n  </div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport { XIcon } from 'vue-feather-icons'\n\nimport { monthToString } from '@/lib/time'\n\nimport PageTitle from '@/components/widgets/PageTitle.vue'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport TimeSpentTaskList from '@/components/lists/TimeSpentTaskList.vue'\n\nexport default {\n  name: 'people-timesheet-info',\n\n  components: {\n    PageTitle,\n    PeopleAvatar,\n    TimeSpentTaskList,\n    XIcon\n  },\n\n  props: {\n    person: {\n      type: Object,\n      default: () => {}\n    },\n    year: {\n      type: Number,\n      default: 0\n    },\n    month: {\n      type: Number,\n      default: 0\n    },\n    week: {\n      type: Number,\n      default: 0\n    },\n    day: {\n      type: Number,\n      default: 0\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isLoadingError: {\n      type: Boolean,\n      default: false\n    },\n    tasks: {\n      type: Array,\n      default: () => []\n    },\n    dayOffCount: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  computed: {\n    startDay() {\n      return moment().day('Monday').year(this.year).week(this.week).date()\n    },\n\n    endDay() {\n      return moment()\n        .day('Monday')\n        .year(this.year)\n        .week(this.week)\n        .add(6, 'days')\n        .date()\n    },\n\n    weekMonth() {\n      return moment()\n        .day('Monday')\n        .year(this.year)\n        .week(this.week)\n        .format('MMM')\n    },\n\n    monthString() {\n      return monthToString(this.month)\n    },\n\n    isYearInfo() {\n      return !this.isMonthInfo && !this.isWeekInfo && !this.isDayInfo\n    },\n\n    isMonthInfo() {\n      return this.$route.path.indexOf('month') > 0\n    },\n\n    isWeekInfo() {\n      return this.$route.path.indexOf('week') > 0\n    },\n\n    isDayInfo() {\n      return this.$route.path.indexOf('day') > 0\n    },\n\n    closeRoute() {\n      if (this.isMonthInfo) {\n        return {\n          name: 'timesheets-month',\n          params: {\n            year: this.year\n          }\n        }\n      } else if (this.isWeekInfo) {\n        return {\n          name: 'timesheets-week',\n          params: {\n            year: this.year\n          }\n        }\n      } else if (this.isDayInfo) {\n        return {\n          name: 'timesheets-day',\n          params: {\n            year: this.year,\n            month: this.month\n          }\n        }\n      } else {\n        return { name: 'timesheets' }\n      }\n    }\n  },\n\n  methods: {\n    onCloseClicked() {\n      this.$emit('close')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.data-list {\n  padding-bottom: 5em;\n}\n\n.people-timesheet-info {\n  padding: 1em;\n}\n\n.info-date {\n  font-size: 1.5em;\n  margin-top: 1em;\n  text-transform: capitalize;\n}\n\n.close {\n  text-align: right;\n}\n</style>\n","<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"timesheets page\">\n        <div class=\"page-header flexrow\">\n          <page-title\n            class=\"flexrow-item title\"\n            :text=\"$t('timesheets.title')\"\n          />\n\n          <combobox-production\n            class=\"flexrow-item\"\n            :label=\"$t('main.production')\"\n            :production-list=\"productionList\"\n            v-model=\"productionIdString\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('timesheets.detail_level')\"\n            :options=\"detailOptions\"\n            v-model=\"detailLevelString\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('timesheets.year')\"\n            :options=\"yearOptions\"\n            v-model=\"yearString\"\n            v-if=\"detailLevelString !== 'year'\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('timesheets.month')\"\n            :options=\"monthOptions\"\n            v-model=\"monthString\"\n            v-if=\"detailLevelString === 'day'\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('timesheets.unit')\"\n            :options=\"unitOptions\"\n            v-model=\"unit\"\n          />\n\n          <div class=\"filler\"></div>\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"$t('timesheets.export_timesheet')\"\n            icon=\"export\"\n            @click=\"exportTimesheet\"\n          />\n          <button-href-link\n            class=\"flexrow-item\"\n            :title=\"$t('timesheets.export_timespents')\"\n            path=\"/api/export/csv/time-spents.csv\"\n            icon=\"export-lines\"\n            v-if=\"isCurrentUserAdmin\"\n          />\n        </div>\n\n        <people-timesheet-list\n          class=\"data-list\"\n          :people=\"filteredPeople\"\n          :timesheet=\"timesheet\"\n          :detail-level=\"detailLevel\"\n          :month=\"currentMonth\"\n          :year=\"currentYear\"\n          :unit=\"unit\"\n          :is-loading=\"isLoading\"\n          :is-error=\"isLoadingError\"\n        />\n      </div>\n    </div>\n    <div class=\"column side-column\" v-if=\"showInfo\">\n      <people-timesheet-info\n        :person=\"currentPerson\"\n        :production=\"productionId\"\n        :year=\"currentYear\"\n        :month=\"currentMonth\"\n        :week=\"currentWeek\"\n        :day=\"currentDay\"\n        :unit=\"unit\"\n        :is-loading=\"isInfoLoading\"\n        :is-loading-error=\"isInfoLoadingError\"\n        :tasks=\"tasks\"\n        :day-off-count=\"dayOffCount\"\n        @close=\"hideSideInfo\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport { monthToString, range } from '@/lib/time'\nimport { sortByName } from '@/lib/sorting'\nimport stringHelpers from '@/lib/string'\n\nimport ButtonHrefLink from '@/components/widgets/ButtonHrefLink'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction'\nimport PeopleTimesheetList from '@/components/lists/PeopleTimesheetList'\nimport PeopleTimesheetInfo from '@/components/sides/PeopleTimesheetInfo'\nimport PageTitle from '@/components/widgets/PageTitle'\n\nexport default {\n  name: 'timesheets',\n  components: {\n    ButtonSimple,\n    ButtonHrefLink,\n    Combobox,\n    ComboboxProduction,\n    PageTitle,\n    PeopleTimesheetList,\n    PeopleTimesheetInfo\n  },\n\n  data() {\n    return {\n      detailOptions: [\n        {\n          label: 'Day',\n          value: 'day'\n        },\n        {\n          label: 'Week',\n          value: 'week'\n        },\n        {\n          label: 'Month',\n          value: 'month'\n        },\n        {\n          label: 'Year',\n          value: 'year'\n        }\n      ],\n      unitOptions: [\n        {\n          label: 'Hour',\n          value: 'hour'\n        },\n        {\n          label: 'Day',\n          value: 'day'\n        }\n      ],\n\n      detailLevelString: 'day',\n      detailLevel: 'day',\n      productionIdString: '',\n      productionId: '',\n      yearString: `${moment().year()}`,\n      monthString: `${moment().month() + 1}`,\n      unit: 'hour',\n\n      currentYear: moment().year(),\n      currentMonth: moment().month() + 1,\n      currentWeek: moment().week(),\n      currentDay: moment().date(),\n      currentPerson: this.getCurrentPerson(),\n\n      isLoading: false,\n      isLoadingError: false,\n\n      dayOffCount: 0,\n      isInfoLoading: false,\n      isInfoLoadingError: false,\n      showInfo: true,\n      tasks: []\n    }\n  },\n\n  created() {\n    this.isLoading = true\n    this.loadProductions()\n    if (this.people.length === 0) {\n      this.loadPeople(() => {\n        this.loadRoute()\n      })\n    } else {\n      this.loadRoute()\n    }\n  },\n\n  mounted() {\n    const productionId = this.$route.query.productionId\n    if (productionId) {\n      this.silent = true\n      this.productionId = productionId\n      this.productionIdString = productionId\n      this.reloadTimesheet().then(() => {\n        this.silent = false\n      })\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'isCurrentUserAdmin',\n      'isCurrentUserManager',\n      'organisation',\n      'people',\n      'productions',\n      'personMap',\n      'timesheet'\n    ]),\n\n    productionList() {\n      const productions = sortByName([...this.productions]).map(production => {\n        const suffix =\n          production.project_status_name === 'Closed' ? ' (closed)' : ''\n        return {\n          ...production,\n          name: production.name + suffix\n        }\n      })\n      return [\n        {\n          id: '',\n          name: this.$t('main.all')\n        },\n        ...productions\n      ]\n    },\n\n    filteredPeople() {\n      return this.people.filter(person => {\n        const keys = Object.keys(this.timesheet)\n        let isThere = false\n        let i = 0\n        do {\n          if (this.timesheet[keys[i]]) {\n            isThere = this.timesheet[keys[i]][person.id] !== undefined\n          }\n          i++\n        } while (!isThere && i < keys.length)\n\n        return isThere\n      })\n    },\n\n    yearOptions() {\n      const year = 2018\n      const currentYear = moment().year()\n      return range(year, currentYear).map(year => ({\n        label: year,\n        value: `${year}`\n      }))\n    },\n\n    monthOptions() {\n      const currentYear = `${moment().year()}`\n      const month = 1\n      const currentMonth = moment().month() + 1\n      let monthRange = range(month, 12)\n      if (currentYear === this.yearString) {\n        monthRange = range(month, currentMonth)\n      }\n\n      return monthRange.map(month => ({\n        label: monthToString(month),\n        value: `${month}`\n      }))\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadPeople',\n      'loadProductions',\n      'loadAggregatedPersonDaysOff',\n      'loadAggregatedPersonTimeSpents',\n      'loadTimesheets'\n    ]),\n\n    reloadTimesheet() {\n      this.isLoading = true\n      this.isLoadingError = false\n      return this.loadTimesheets({\n        detailLevel: this.detailLevel,\n        year: this.currentYear,\n        month: this.currentMonth,\n        productionId: this.productionId\n      })\n        .then(() => {\n          this.isLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.isLoading = false\n          this.isLoadingError = true\n        })\n    },\n\n    showSideInfo() {\n      this.showInfo = true\n    },\n\n    hideSideInfo() {\n      this.showInfo = false\n    },\n\n    loadRoute() {\n      // The main idea is to build the context from the route and compare it\n      // to the current context. If there are changes, it applies it.\n      // It handles too the display or not of the side column.\n      this.$options.silent = true\n      const { month, year, week, day } = this.$route.params\n      const previousProduction = `${this.productionId}`\n      const previousDetailLevel = `${this.detailLevel}`\n      const previousMonth = `${this.currentMonth}`\n      const previousYear = `${this.currentYear}`\n\n      if (this.$route.path.indexOf('week') > 0) this.detailLevel = 'week'\n      if (this.$route.path.indexOf('month') > 0) this.detailLevel = 'month'\n      if (this.$route.path.indexOf('day') > 0) this.detailLevel = 'day'\n      if (this.$route.path.indexOf('year') > 0) this.detailLevel = 'year'\n      this.currentPerson = this.getCurrentPerson()\n      this.detailLevelString = this.detailLevel\n\n      if (month) {\n        this.currentMonth = Number(month)\n        this.monthString = `${month}`\n      }\n      if (year) {\n        this.currentYear = Number(year)\n        this.yearString = `${year}`\n      }\n      if (week) {\n        this.currentWeek = Number(week)\n        this.weekString = `${week}`\n      }\n      if (day) {\n        this.currentDay = Number(day)\n      }\n      this.productionId = this.$route.query.productionId || ''\n\n      const detailLevelHasChanged = previousDetailLevel !== this.detailLevel\n      const monthHasChanged =\n        previousMonth.localeCompare(`${this.currentMonth}`) !== 0\n      const yearHasChanged =\n        previousYear.localeCompare(`${this.currentYear}`) !== 0\n      const productionHasChanged =\n        previousProduction.localeCompare(`${this.productionId}`) !== 0\n      this.$nextTick(() => {\n        this.$options.silent = false\n      })\n\n      if (this.$route.path.indexOf('person') > 0) {\n        this.showSideInfo()\n        this.loadAggregate()\n      } else {\n        this.hideSideInfo()\n      }\n\n      if (\n        this.isLoading ||\n        monthHasChanged ||\n        yearHasChanged ||\n        detailLevelHasChanged ||\n        productionHasChanged\n      ) {\n        this.reloadTimesheet()\n      }\n    },\n\n    loadAggregate() {\n      this.isInfoLoading = true\n      this.isInfoLoadingError = false\n      this.tasks = []\n      this.loadAggregatedPersonTimeSpents({\n        personId: this.$route.params.person_id,\n        detailLevel: this.detailLevel,\n        year: this.$route.params.year,\n        month: this.$route.params.month,\n        week: this.$route.params.week,\n        day: this.$route.params.day,\n        productionId: this.productionId\n      })\n        .then(tasks => {\n          this.tasks = tasks.filter(task => task.duration > 0)\n          return this.loadAggregatedPersonDaysOff({\n            personId: this.$route.params.person_id,\n            detailLevel: this.detailLevel,\n            year: this.$route.params.year,\n            month: this.$route.params.month,\n            week: this.$route.params.week\n          })\n        })\n        .then(dayOffs => {\n          this.dayOffCount = dayOffs.length\n          this.isInfoLoading = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.isInfoLoadingError = true\n        })\n    },\n\n    getCurrentPerson() {\n      const personId = this.$route.params.person_id\n      if (personId && this.personMap) {\n        return this.personMap.get(personId)\n      } else {\n        return {}\n      }\n    },\n\n    exportTimesheet() {\n      const nameData = ['timesheet', this.detailLevel, this.currentYear]\n      if (this.detailLevel === 'day') nameData.push(this.currentMonth)\n      const name = stringHelpers.slugify(nameData.join('_'))\n      csv.generateTimesheet(\n        name,\n        this.timesheet,\n        this.filteredPeople,\n        this.unit,\n        this.organisation,\n        this.detailLevel,\n        this.currentYear,\n        this.currentMonth,\n        moment().month() + 1,\n        moment().year(),\n        moment().week()\n      )\n    }\n  },\n\n  watch: {\n    detailLevelString() {\n      if (this.silent) return\n      if (this.detailLevel !== this.detailLevelString) {\n        if (this.detailLevelString === 'month') {\n          this.$router.push({\n            name: 'timesheets-month',\n            params: {\n              year: this.currentYear\n            },\n            query: this.$route.query\n          })\n        } else if (this.detailLevelString === 'week') {\n          this.$router.push({\n            name: 'timesheets-week',\n            params: {\n              year: this.currentYear\n            },\n            query: this.$route.query\n          })\n        } else if (this.detailLevelString === 'day') {\n          this.$router.push({\n            name: 'timesheets-day',\n            params: {\n              year: this.currentYear,\n              month: this.currentMonth\n            },\n            query: this.$route.query\n          })\n        } else if (this.detailLevelString === 'year') {\n          this.$router.push({\n            name: 'timesheets-year',\n            params: {\n              year: this.currentYear\n            },\n            query: this.$route.query\n          })\n        }\n      }\n    },\n\n    yearString() {\n      if (this.silent) return\n      const year = Number(this.yearString)\n      const currentMonth = moment().month()\n      if (this.currentYear !== year) {\n        if (this.detailLevel === 'month') {\n          this.$router.push({\n            name: 'timesheets-month',\n            params: { year },\n            query: this.$route.query\n          })\n        } else if (this.detailLevel === 'week') {\n          this.$router.push({\n            name: 'timesheets-week',\n            params: { year },\n            query: this.$route.query\n          })\n        } else {\n          this.$router.push({\n            name: 'timesheets-day',\n            params: {\n              year: year,\n              month: Math.min(Number(this.monthString), currentMonth)\n            },\n            query: this.$route.query\n          })\n        }\n      }\n    },\n\n    monthString() {\n      if (this.silent) return\n      if (this.currentMonth !== Number(this.monthString)) {\n        this.$router.push({\n          name: 'timesheets-day',\n          params: {\n            year: this.currentYear,\n            month: Number(this.monthString)\n          },\n          query: this.$route.query\n        })\n      }\n    },\n\n    productionIdString() {\n      if (this.silent) return\n      this.$router.push({\n        query: {\n          productionId: this.productionIdString\n        }\n      })\n    },\n\n    $route() {\n      this.loadRoute()\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('timesheets.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .side-column {\n  border-color: $dark-grey-lightest;\n}\n\n.data-list {\n  margin-top: 0;\n}\n\n.timesheets {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding-bottom: 1em;\n}\n\n.side-column {\n  border-left: 3px solid $light-grey;\n}\n\n.title {\n  margin-right: 1em;\n  white-space: nowrap;\n}\n</style>\n"],"names":["_sfc_main","PeopleAvatar","PeopleName","TableInfo","moment","mapGetters","range","getMonthRange","getDayRange","getWeekRange","monthToString","year","personId","yearString","duration","hoursToDays","month","monthString","week","day","_a","index","date","beginning","end","person","dayString","ProductionName","TaskTypeName","projects","firstBy","task","name","projectId","taskTypeId","sortByName","project","isTVShow","episode","getTaskPath","event","position","projectNames","production","suffix","PageTitle","TimeSpentTaskList","XIcon","ButtonSimple","ButtonHrefLink","Combobox","ComboboxProduction","PeopleTimesheetList","PeopleTimesheetInfo","productionId","productions","keys","isThere","i","currentYear","currentMonth","monthRange","mapActions","err","previousProduction","previousDetailLevel","previousMonth","previousYear","detailLevelHasChanged","monthHasChanged","yearHasChanged","productionHasChanged","tasks","dayOffs","nameData","stringHelpers","csv"],"mappings":"8QAiLA,MAAAA,EAAA,CACA,KAAA,wBAEA,WAAA,CACA,aAAAC,EACA,WAAAC,EACA,UAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,aAAAC,EAAA,EAAA,MAAA,EAAA,EACA,YAAAA,EAAA,EAAA,KAAA,EACA,YAAAA,EAAA,EAAA,KAAA,CACA,CACA,EAEA,MAAA,CACA,UAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,EAEA,OAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EAEA,YAAA,CACA,KAAA,OACA,QAAA,KACA,EAEA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EAEA,MAAA,CACA,KAAA,OACA,QAAA,CACA,EAEA,KAAA,CACA,KAAA,OACA,QAAA,MACA,EAEA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAEA,QAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CAAA,YAAA,eAAA,OAAA,CAAA,EAEA,WAAA,CACA,OAAAC,EAAA,KAAAF,EAAA,EAAA,KAAA,CAAA,CACA,EAEA,YAAA,CACA,OAAAG,EAAA,KAAA,KAAA,KAAA,YAAA,KAAA,YAAA,CACA,EAEA,UAAA,CACA,OAAAC,EACA,KAAA,KACA,KAAA,MACA,KAAA,YACA,KAAA,YACA,CACA,EAEA,WAAA,CACA,OAAAC,EAAA,KAAA,KAAA,KAAA,YAAA,KAAA,WAAA,CACA,EAEA,SAAA,CACA,OAAA,KAAA,OAAA,MACA,CACA,EAEA,QAAA,CACA,cAAAC,EAEA,aAAAC,EAAAC,EAAA,CACA,MAAAC,EAAA,GAAAF,CAAA,GACAG,EAAA,KAAA,YAAAD,EAAAD,CAAA,EACA,OAAA,KAAA,QACAE,EACAC,EAAA,KAAA,aAAAD,CAAA,EAAA,QAAA,CAAA,CACA,EAEA,cAAAE,EAAAJ,EAAA,CACA,MAAAK,EAAA,GAAAD,CAAA,GACAF,EAAA,KAAA,YAAAG,EAAAL,CAAA,EACA,OAAA,KAAA,QACAE,EACAC,EAAA,KAAA,aAAAD,CAAA,EAAA,QAAA,CAAA,CACA,EAEA,aAAAI,EAAAN,EAAA,CACA,MAAAE,EAAA,KAAA,YAAAI,EAAAN,CAAA,EACA,OAAA,KAAA,QACAE,EACAC,EAAA,KAAA,aAAAD,CAAA,EAAA,QAAA,CAAA,CACA,EAEA,YAAAK,EAAAP,EAAA,OACA,KAAAQ,EAAA,KAAA,UAAAR,CAAA,IAAA,YAAAQ,EAAA,GAAAD,CAAA,OAAA,GACA,OAAA,KAAA,GAAA,gBAAA,EAAA,YAAA,EACA,CACA,MAAAL,EAAA,KAAA,YAAAK,EAAAP,CAAA,EACA,OAAA,KAAA,QACAE,EACAC,EAAA,KAAA,aAAAD,CAAA,EAAA,QAAA,CAAA,CACA,CACA,EAEA,YAAAO,EAAAT,EAAA,CACA,OACA,KAAA,WACA,KAAA,UAAAS,CAAA,GACA,KAAA,UAAAA,CAAA,EAAAT,CAAA,EAEA,KAAA,UAAAS,CAAA,EAAAT,CAAA,EAAA,GAEA,GAEA,EAEA,UAAAD,EAAAK,EAAAG,EAAA,CACA,MAAAG,EAAAlB,EAAA,GAAAO,CAAA,IAAAK,CAAA,IAAAG,CAAA,GAAA,UAAA,EACA,MAAA,CAAA,EAAA,CAAA,EAAA,SAAAG,EAAA,KAAA,CACA,EAEA,cAAAV,EAAAD,EAAAK,EAAAG,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAP,GACA,KAAA,OAAA,OAAA,OAAAD,GACA,KAAA,OAAA,OAAA,QAAAK,GACA,KAAA,OAAA,OAAA,MAAAG,CAEA,EAEA,eAAAP,EAAAD,EAAAO,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAN,GACA,KAAA,OAAA,OAAA,OAAAD,GACA,KAAA,OAAA,OAAA,OAAAO,CAEA,EAEA,gBAAAN,EAAAD,EAAAK,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAJ,GACA,KAAA,OAAA,OAAA,OAAAD,GACA,KAAA,OAAA,OAAA,QAAAK,CAEA,EAEA,eAAAJ,EAAAD,EAAA,CACA,OACA,KAAA,OAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAAAC,GACA,KAAA,OAAA,OAAA,OAAAD,CAEA,EAEA,aAAAO,EAAA,CACA,MAAAK,EAAAnB,EAAA,KAAA,YAAA,IAAAc,EAAA,QAAA,EACAM,EAAAD,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EACA,OAAAA,EAAA,OAAA,YAAA,EAAA,MAAAC,EAAA,OAAA,YAAA,CACA,EAEA,mBAAAC,EAAAd,EAAA,CACA,MAAA,CACA,KAAA,yBACA,OAAA,CACA,UAAAc,EAAA,GACA,KAAAd,CACA,EACA,MAAA,CACA,aAAA,KAAA,OAAA,MAAA,YACA,CACA,CACA,EAEA,oBAAAc,EAAAd,EAAAK,EAAA,CACA,MAAA,CACA,KAAA,0BACA,OAAA,CACA,UAAAS,EAAA,GACA,KAAAd,EACA,MAAAK,CACA,EACA,MAAA,CACA,aAAA,KAAA,OAAA,MAAA,YACA,CACA,CACA,EAEA,mBAAAS,EAAAd,EAAAO,EAAA,CACA,MAAA,CACA,KAAA,yBACA,OAAA,CACA,UAAAO,EAAA,GACA,KAAAd,EACA,KAAAO,CACA,EACA,MAAA,CACA,aAAA,KAAA,OAAA,MAAA,YACA,CACA,CACA,EAEA,kBAAAO,EAAAd,EAAAK,EAAAG,EAAA,CACA,MAAA,CACA,KAAA,wBACA,OAAA,CACA,UAAAM,EAAA,GACA,KAAAd,EACA,MAAAK,EACA,IAAAG,CACA,EACA,MAAA,CACA,aAAA,KAAA,OAAA,MAAA,YACA,CACA,CACA,EAEA,SAAAP,EAAAO,EAAA,CACA,MAAAO,EAAA,GAAAP,CAAA,GAAA,SAAA,EAAA,GAAA,EACA,OAAA,KAAA,UAAAP,CAAA,GAAA,KAAA,UAAAA,CAAA,EAAAc,CAAA,CACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,SAAA,uBAAA,UAAA,EACA,SAAA,IAEA,KAAA,MAAA,KAAA,YAAA,IAEA,CACA,CACA,wzGCpXA1B,EAAA,CACA,KAAA,uBAEA,WAAA,CACA,UAAAG,EACA,eAAAwB,EACA,aAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,aAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,eAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EAEA,SAAA,CACA,GAAAvB,EAAA,CAAA,gBAAA,aAAA,CAAA,EAEA,UAAA,CACA,MAAAwB,EAAA,CAAA,EAGA,MAFA,CAAA,GAAA,KAAA,KAAA,EAAA,KAAAC,EAAAA,QAAA,cAAA,CAAA,EAEA,QAAAC,GAAA,CACAF,EAAAE,EAAA,UAAA,IAAAF,EAAAE,EAAA,UAAA,EAAA,CAAA,GACAF,EAAAE,EAAA,UAAA,EAAAA,EAAA,YAAA,IACAF,EAAAE,EAAA,UAAA,EAAAA,EAAA,YAAA,EAAA,CAAA,GAGA,IAAAC,EAAAD,EAAA,YACA,CAAA,OAAA,UAAA,EAAA,SAAAA,EAAA,gBAAA,GACAC,EAAA,GAAAD,EAAA,aAAA,MAAAC,CAAA,GACAD,EAAA,eAAAC,EAAA,GAAAD,EAAA,YAAA,MAAAC,CAAA,KAEAA,EAAA,GAAAD,EAAA,gBAAA,MAAAC,CAAA,GAGAH,EAAAE,EAAA,UAAA,EAAAA,EAAA,YAAA,EAAA,KAAA,CACA,GAAAA,EAAA,QACA,WAAAA,EAAA,WACA,aAAAA,EAAA,aACA,KAAAC,EACA,SAAAD,EAAA,QACA,CAAA,CACA,CAAA,EAEA,OAAA,KAAAF,CAAA,EAAA,QAAAI,GAAA,CACA,OAAA,KAAAJ,EAAAI,CAAA,CAAA,EAAA,QAAAC,GAAA,CACAL,EAAAI,CAAA,EAAAC,CAAA,EAAAC,EACAN,EAAAI,CAAA,EAAAC,CAAA,CACA,CACA,CAAA,CACA,CAAA,EAEAL,CACA,CACA,EAEA,QAAA,CACA,YAAAE,EAAA,CACA,MAAAK,EAAA,KAAA,cAAA,IAAAL,EAAA,UAAA,EACA,GAAA,CAAAK,GAAAA,EAAA,sBAAA,SACA,MAAA,GAEA,MAAAC,EAAAD,EAAA,kBAAA,SACAE,EAAA,CAAA,GAAAF,EAAA,gBAAA,EACA,OAAAG,EAAAR,EAAA,KAAAM,EAAAC,EAAA,KAAA,WAAA,CACA,EAEA,aAAAE,EAAAC,EAAA,CACA,KAAA,MAAA,cAAA,MAAA,KAAA,IAAAA,EAAA,UAAA,IACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,aAAA,KAAA,MAAA,OAAA,CAAAC,EAAAX,IAAA,CACA,MAAAY,EAAA,KAAA,cAAA,IAAAZ,EAAA,UAAA,EACAa,GACAD,GAAA,YAAAA,EAAA,uBAAA,SAAA,YAAA,GACA,OAAAD,EAAAX,EAAA,UAAA,EAAAA,EAAA,aAAAa,EACAF,CACA,EAAA,EAAA,CACA,CACA,CACA,ihCC3GA1C,EAAA,CACA,KAAA,wBAEA,WAAA,CACA,UAAA6C,EACA,aAAA5C,EACA,kBAAA6C,EACA,MAAAC,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,IAAA,CACA,KAAA,OACA,QAAA,CACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,eAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EACA,YAAA,CACA,KAAA,OACA,QAAA,CACA,CACA,EAEA,SAAA,CACA,UAAA,CACA,OAAA3C,EAAA,EAAA,IAAA,QAAA,EAAA,KAAA,KAAA,IAAA,EAAA,KAAA,KAAA,IAAA,EAAA,KAAA,CACA,EAEA,QAAA,CACA,OAAAA,EAAA,EACA,IAAA,QAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,KAAA,IAAA,EACA,IAAA,EAAA,MAAA,EACA,KAAA,CACA,EAEA,WAAA,CACA,OAAAA,EAAA,EACA,IAAA,QAAA,EACA,KAAA,KAAA,IAAA,EACA,KAAA,KAAA,IAAA,EACA,OAAA,KAAA,CACA,EAEA,aAAA,CACA,OAAAM,EAAA,KAAA,KAAA,CACA,EAEA,YAAA,CACA,MAAA,CAAA,KAAA,aAAA,CAAA,KAAA,YAAA,CAAA,KAAA,SACA,EAEA,aAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,OAAA,EAAA,CACA,EAEA,YAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,MAAA,EAAA,CACA,EAEA,WAAA,CACA,OAAA,KAAA,OAAA,KAAA,QAAA,KAAA,EAAA,CACA,EAEA,YAAA,CACA,OAAA,KAAA,YACA,CACA,KAAA,mBACA,OAAA,CACA,KAAA,KAAA,IACA,CACA,EACA,KAAA,WACA,CACA,KAAA,kBACA,OAAA,CACA,KAAA,KAAA,IACA,CACA,EACA,KAAA,UACA,CACA,KAAA,iBACA,OAAA,CACA,KAAA,KAAA,KACA,MAAA,KAAA,KACA,CACA,EAEA,CAAA,KAAA,YAAA,CAEA,CACA,EAEA,QAAA,CACA,gBAAA,CACA,KAAA,MAAA,OAAA,CACA,CACA,CACA,uuCCjEAV,EAAA,CACA,KAAA,aACA,WAAA,CACA,aAAAgD,EACA,eAAAC,EACA,SAAAC,EACA,mBAAAC,EACA,UAAAN,EACA,oBAAAO,EACA,oBAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,cAAA,CACA,CACA,MAAA,MACA,MAAA,KACA,EACA,CACA,MAAA,OACA,MAAA,MACA,EACA,CACA,MAAA,QACA,MAAA,OACA,EACA,CACA,MAAA,OACA,MAAA,MACA,CACA,EACA,YAAA,CACA,CACA,MAAA,OACA,MAAA,MACA,EACA,CACA,MAAA,MACA,MAAA,KACA,CACA,EAEA,kBAAA,MACA,YAAA,MACA,mBAAA,GACA,aAAA,GACA,WAAA,GAAAjD,IAAA,KAAA,CAAA,GACA,YAAA,GAAAA,EAAA,EAAA,MAAA,EAAA,CAAA,GACA,KAAA,OAEA,YAAAA,EAAA,EAAA,KAAA,EACA,aAAAA,EAAA,EAAA,MAAA,EAAA,EACA,YAAAA,EAAA,EAAA,KAAA,EACA,WAAAA,EAAA,EAAA,KAAA,EACA,cAAA,KAAA,iBAAA,EAEA,UAAA,GACA,eAAA,GAEA,YAAA,EACA,cAAA,GACA,mBAAA,GACA,SAAA,GACA,MAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,UAAA,GACA,KAAA,gBAAA,EACA,KAAA,OAAA,SAAA,EACA,KAAA,WAAA,IAAA,CACA,KAAA,UAAA,CACA,CAAA,EAEA,KAAA,UAAA,CAEA,EAEA,SAAA,CACA,MAAAkD,EAAA,KAAA,OAAA,MAAA,aACAA,IACA,KAAA,OAAA,GACA,KAAA,aAAAA,EACA,KAAA,mBAAAA,EACA,KAAA,kBAAA,KAAA,IAAA,CACA,KAAA,OAAA,EACA,CAAA,EAEA,EAEA,SAAA,CACA,GAAAjD,EAAA,CACA,qBACA,uBACA,eACA,SACA,cACA,YACA,WACA,CAAA,EAEA,gBAAA,CACA,MAAAkD,EAAApB,EAAA,CAAA,GAAA,KAAA,WAAA,CAAA,EAAA,IAAAQ,GAAA,CACA,MAAAC,EACAD,EAAA,sBAAA,SAAA,YAAA,GACA,MAAA,CACA,GAAAA,EACA,KAAAA,EAAA,KAAAC,CACA,CACA,CAAA,EACA,MAAA,CACA,CACA,GAAA,GACA,KAAA,KAAA,GAAA,UAAA,CACA,EACA,GAAAW,CACA,CACA,EAEA,gBAAA,CACA,OAAA,KAAA,OAAA,OAAA9B,GAAA,CACA,MAAA+B,EAAA,OAAA,KAAA,KAAA,SAAA,EACA,IAAAC,EAAA,GACAC,EAAA,EACA,GACA,KAAA,UAAAF,EAAAE,CAAA,CAAA,IACAD,EAAA,KAAA,UAAAD,EAAAE,CAAA,CAAA,EAAAjC,EAAA,EAAA,IAAA,QAEAiC,UACA,CAAAD,GAAAC,EAAAF,EAAA,QAEA,OAAAC,CACA,CAAA,CACA,EAEA,aAAA,CAEA,MAAAE,EAAAvD,EAAA,EAAA,KAAA,EACA,OAAAE,EAAA,KAAAqD,CAAA,EAAA,IAAAhD,IAAA,CACA,MAAAA,EACA,MAAA,GAAAA,CAAA,EACA,EAAA,CACA,EAEA,cAAA,CACA,MAAAgD,EAAA,GAAAvD,EAAA,EAAA,KAAA,CAAA,GACAY,EAAA,EACA4C,EAAAxD,IAAA,MAAA,EAAA,EACA,IAAAyD,EAAAvD,EAAAU,EAAA,EAAA,EACA,OAAA2C,IAAA,KAAA,aACAE,EAAAvD,EAAAU,EAAA4C,CAAA,GAGAC,EAAA,IAAA7C,IAAA,CACA,MAAAN,EAAAM,CAAA,EACA,MAAA,GAAAA,CAAA,EACA,EAAA,CACA,CACA,EAEA,QAAA,CACA,GAAA8C,EAAA,CACA,aACA,kBACA,8BACA,iCACA,gBACA,CAAA,EAEA,iBAAA,CACA,YAAA,UAAA,GACA,KAAA,eAAA,GACA,KAAA,eAAA,CACA,YAAA,KAAA,YACA,KAAA,KAAA,YACA,MAAA,KAAA,aACA,aAAA,KAAA,YACA,CAAA,EACA,KAAA,IAAA,CACA,KAAA,UAAA,EACA,CAAA,EACA,MAAAC,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,UAAA,GACA,KAAA,eAAA,EACA,CAAA,CACA,EAEA,cAAA,CACA,KAAA,SAAA,EACA,EAEA,cAAA,CACA,KAAA,SAAA,EACA,EAEA,WAAA,CAIA,KAAA,SAAA,OAAA,GACA,KAAA,CAAA,MAAA/C,EAAA,KAAAL,EAAA,KAAAO,EAAA,IAAAC,GAAA,KAAA,OAAA,OACA6C,EAAA,GAAA,KAAA,YAAA,GACAC,EAAA,GAAA,KAAA,WAAA,GACAC,EAAA,GAAA,KAAA,YAAA,GACAC,EAAA,GAAA,KAAA,WAAA,GAEA,KAAA,OAAA,KAAA,QAAA,MAAA,EAAA,IAAA,KAAA,YAAA,QACA,KAAA,OAAA,KAAA,QAAA,OAAA,EAAA,IAAA,KAAA,YAAA,SACA,KAAA,OAAA,KAAA,QAAA,KAAA,EAAA,IAAA,KAAA,YAAA,OACA,KAAA,OAAA,KAAA,QAAA,MAAA,EAAA,IAAA,KAAA,YAAA,QACA,KAAA,cAAA,KAAA,iBAAA,EACA,KAAA,kBAAA,KAAA,YAEAnD,IACA,KAAA,aAAA,OAAAA,CAAA,EACA,KAAA,YAAA,GAAAA,CAAA,IAEAL,IACA,KAAA,YAAA,OAAAA,CAAA,EACA,KAAA,WAAA,GAAAA,CAAA,IAEAO,IACA,KAAA,YAAA,OAAAA,CAAA,EACA,KAAA,WAAA,GAAAA,CAAA,IAEAC,IACA,KAAA,WAAA,OAAAA,CAAA,GAEA,KAAA,aAAA,KAAA,OAAA,MAAA,cAAA,GAEA,MAAAiD,EAAAH,IAAA,KAAA,YACAI,EACAH,EAAA,cAAA,GAAA,KAAA,YAAA,EAAA,IAAA,EACAI,EACAH,EAAA,cAAA,GAAA,KAAA,WAAA,EAAA,IAAA,EACAI,EACAP,EAAA,cAAA,GAAA,KAAA,YAAA,EAAA,IAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,SAAA,OAAA,EACA,CAAA,EAEA,KAAA,OAAA,KAAA,QAAA,QAAA,EAAA,GACA,KAAA,aAAA,EACA,KAAA,cAAA,GAEA,KAAA,aAAA,GAIA,KAAA,WACAK,GACAC,GACAF,GACAG,IAEA,KAAA,gBAAA,CAEA,EAEA,eAAA,CACA,KAAA,cAAA,GACA,KAAA,mBAAA,GACA,KAAA,MAAA,CAAA,EACA,KAAA,+BAAA,CACA,SAAA,KAAA,OAAA,OAAA,UACA,YAAA,KAAA,YACA,KAAA,KAAA,OAAA,OAAA,KACA,MAAA,KAAA,OAAA,OAAA,MACA,KAAA,KAAA,OAAA,OAAA,KACA,IAAA,KAAA,OAAA,OAAA,IACA,aAAA,KAAA,YACA,CAAA,EACA,KAAAC,IACA,KAAA,MAAAA,EAAA,OAAAzC,GAAAA,EAAA,SAAA,CAAA,EACA,KAAA,4BAAA,CACA,SAAA,KAAA,OAAA,OAAA,UACA,YAAA,KAAA,YACA,KAAA,KAAA,OAAA,OAAA,KACA,MAAA,KAAA,OAAA,OAAA,MACA,KAAA,KAAA,OAAA,OAAA,IACA,CAAA,EACA,EACA,KAAA0C,GAAA,CACA,KAAA,YAAAA,EAAA,OACA,KAAA,cAAA,EACA,CAAA,EACA,MAAAV,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,mBAAA,EACA,CAAA,CACA,EAEA,kBAAA,CACA,MAAAnD,EAAA,KAAA,OAAA,OAAA,UACA,OAAAA,GAAA,KAAA,UACA,KAAA,UAAA,IAAAA,CAAA,EAEA,CAAA,CAEA,EAEA,iBAAA,CACA,MAAA8D,EAAA,CAAA,YAAA,KAAA,YAAA,KAAA,WAAA,EACA,KAAA,cAAA,OAAAA,EAAA,KAAA,KAAA,YAAA,EACA,MAAA1C,EAAA2C,EAAA,QAAAD,EAAA,KAAA,GAAA,CAAA,EACAE,EAAA,kBACA5C,EACA,KAAA,UACA,KAAA,eACA,KAAA,KACA,KAAA,aACA,KAAA,YACA,KAAA,YACA,KAAA,aACA5B,EAAA,EAAA,MAAA,EAAA,EACAA,EAAA,EAAA,KAAA,EACAA,EAAA,EAAA,KAAA,CACA,CACA,CACA,EAEA,MAAA,CACA,mBAAA,CACA,KAAA,QACA,KAAA,cAAA,KAAA,oBACA,KAAA,oBAAA,QACA,KAAA,QAAA,KAAA,CACA,KAAA,mBACA,OAAA,CACA,KAAA,KAAA,WACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EACA,KAAA,oBAAA,OACA,KAAA,QAAA,KAAA,CACA,KAAA,kBACA,OAAA,CACA,KAAA,KAAA,WACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EACA,KAAA,oBAAA,MACA,KAAA,QAAA,KAAA,CACA,KAAA,iBACA,OAAA,CACA,KAAA,KAAA,YACA,MAAA,KAAA,YACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EACA,KAAA,oBAAA,QACA,KAAA,QAAA,KAAA,CACA,KAAA,kBACA,OAAA,CACA,KAAA,KAAA,WACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EAGA,EAEA,YAAA,CACA,GAAA,KAAA,OAAA,OACA,MAAAO,EAAA,OAAA,KAAA,UAAA,EACAiD,EAAAxD,EAAA,EAAA,MAAA,EACA,KAAA,cAAAO,IACA,KAAA,cAAA,QACA,KAAA,QAAA,KAAA,CACA,KAAA,mBACA,OAAA,CAAA,KAAAA,CAAA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EACA,KAAA,cAAA,OACA,KAAA,QAAA,KAAA,CACA,KAAA,kBACA,OAAA,CAAA,KAAAA,CAAA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EAEA,KAAA,QAAA,KAAA,CACA,KAAA,iBACA,OAAA,CACA,KAAAA,EACA,MAAA,KAAA,IAAA,OAAA,KAAA,WAAA,EAAAiD,CAAA,CACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,EAGA,EAEA,aAAA,CACA,KAAA,QACA,KAAA,eAAA,OAAA,KAAA,WAAA,GACA,KAAA,QAAA,KAAA,CACA,KAAA,iBACA,OAAA,CACA,KAAA,KAAA,YACA,MAAA,OAAA,KAAA,WAAA,CACA,EACA,MAAA,KAAA,OAAA,KACA,CAAA,CAEA,EAEA,oBAAA,CACA,KAAA,QACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,aAAA,KAAA,kBACA,CACA,CAAA,CACA,EAEA,QAAA,CACA,KAAA,UAAA,CACA,CACA,EAEA,UAAA,CACA,MAAA,CACA,MAAA,GAAA,KAAA,GAAA,kBAAA,CAAA,UACA,CACA,CACA"}