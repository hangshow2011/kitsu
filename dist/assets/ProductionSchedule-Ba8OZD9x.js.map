{"version":3,"file":"ProductionSchedule-Ba8OZD9x.js","sources":["../../src/components/pages/ProductionSchedule.vue"],"sourcesContent":["<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"flexrow project-dates\">\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.start_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :disabled-dates=\"{ days: [6, 0] }\"\n            :monday-first=\"true\"\n            format=\"yyyy-MM-dd\"\n            v-model=\"selectedStartDate\"\n          />\n        </div>\n        <div class=\"flexrow-item field\">\n          <label class=\"label\">\n            {{ $t('main.end_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :disabled-dates=\"{ days: [6, 0] }\"\n            :monday-first=\"true\"\n            format=\"yyyy-MM-dd\"\n            v-model=\"selectedEndDate\"\n          />\n        </div>\n        <!--\n        <text-field\n          class=\"flexrow-item overall-man-days\"\n          type=\"number\"\n          v-model=\"overallManDays\"\n          :label=\"$t('schedule.overall_man_days')\"\n          :disabled=\"!isCurrentUserAdmin\"\n        />\n        -->\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n        />\n      </div>\n\n      <schedule\n        :start-date=\"startDate\"\n        :end-date=\"endDate\"\n        :hierarchy=\"scheduleItems\"\n        :zoom-level=\"zoomLevel\"\n        :is-loading=\"loading.schedule\"\n        :is-error=\"errors.schedule\"\n        :hide-man-days=\"true\"\n        @item-changed=\"scheduleItemChanged\"\n        @estimation-changed=\"estimationChanged\"\n        @root-element-expanded=\"expandTaskTypeElement\"\n      />\n    </div>\n\n    <div\n      class=\"column side-column is-hidden-mobile hide-small-screen\"\n      v-if=\"currentTask\"\n    >\n      <task-info :task=\"currentTask\" :is-loading=\"false\" />\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n * Page to manage the schedule of the big steps of the production. It allows\n * to set milestones too.\n */\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment-timezone'\nimport { en, fr } from 'vuejs-datepicker/dist/locale'\nimport Datepicker from 'vuejs-datepicker'\n\nimport { sortTaskTypeScheduleItems } from '@/lib/sorting'\nimport { getTaskTypeSchedulePath } from '@/lib/path'\nimport { daysToMinutes, parseDate } from '@/lib/time'\n\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber'\nimport TaskInfo from '@/components/sides/TaskInfo'\nimport Schedule from '@/components/pages/schedule/Schedule'\n\nexport default {\n  name: 'production-schedule',\n  components: {\n    ComboboxNumber,\n    Datepicker,\n    Schedule,\n    TaskInfo\n  },\n\n  data() {\n    return {\n      currentTask: null,\n      // overallManDays: 0,\n      endDate: moment().add(6, 'months').endOf('day'),\n      scheduleItems: [],\n      startDate: moment().startOf('day'),\n      selectedStartDate: null,\n      selectedEndDate: null,\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: 'Week', value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ],\n      loading: {\n        schedule: false\n      },\n      errors: {\n        schedule: false\n      }\n    }\n  },\n\n  mounted() {\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypeMap',\n      'currentEpisode',\n      'currentProduction',\n      'isCurrentUserAdmin',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isTVShow',\n      'organisation',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    locale() {\n      if (this.user.locale === 'fr_FR') {\n        return fr\n      } else {\n        return en\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'editProduction',\n      'loadAssetTypeScheduleItems',\n      'loadEpisodeScheduleItems',\n      'loadMilestones',\n      'loadScheduleItems',\n      'loadSequenceScheduleItems',\n      'saveScheduleItem'\n    ]),\n\n    loadData() {\n      this.loading.schedule = true\n      this.loadScheduleItems(this.currentProduction)\n        .then(scheduleItems => {\n          const scheduleStartDate = parseDate(this.selectedStartDate)\n          const scheduleEndDate = parseDate(this.selectedEndDate)\n          scheduleItems = scheduleItems.map(item => {\n            const taskType = this.taskTypeMap.get(item.task_type_id)\n            let startDate, endDate\n            if (item.start_date) {\n              startDate = parseDate(item.start_date)\n            } else {\n              startDate = moment()\n            }\n            if (startDate.isSameOrAfter(scheduleEndDate)) {\n              startDate = scheduleEndDate.clone().add(-1, 'days')\n            }\n\n            if (startDate.isBefore(scheduleStartDate)) {\n              startDate = scheduleStartDate.clone()\n            }\n\n            if (item.end_date) {\n              endDate = parseDate(item.end_date)\n            } else {\n              endDate = startDate.clone().add(1, 'days')\n            }\n            if (endDate.isSameOrAfter(scheduleEndDate)) {\n              endDate = scheduleEndDate.clone()\n            }\n\n            const path = getTaskTypeSchedulePath(\n              taskType.id,\n              this.currentProduction.id,\n              this.currentEpisode ? this.currentEpisode.id : null,\n              taskType.for_entity\n            )\n\n            return {\n              ...item,\n              color: taskType.color,\n              for_entity: taskType.for_entity,\n              name: taskType.name,\n              priority: taskType.priority,\n              startDate: startDate,\n              endDate: endDate,\n              editable: this.isInDepartment(taskType),\n              expanded: false,\n              loading: false,\n              route:\n                taskType.for_entity === 'Shot' && this.isTVShow ? null : path,\n              children: []\n            }\n          })\n          this.scheduleItems = sortTaskTypeScheduleItems(\n            scheduleItems,\n            this.currentProduction,\n            this.taskTypeMap\n          )\n          this.loading.schedule = false\n        })\n        .then(this.loadMilestones)\n        .catch(err => {\n          console.error(err)\n          this.loading.schedule = false\n        })\n    },\n\n    reset() {\n      if (this.currentProduction.start_date) {\n        this.startDate = parseDate(this.currentProduction.start_date)\n      }\n      if (this.currentProduction.end_date) {\n        this.endDate = parseDate(this.currentProduction.end_date)\n      }\n      // this.overallManDays = this.currentProduction.man_days\n      this.selectedStartDate = this.startDate.toDate()\n      this.selectedEndDate = this.endDate.toDate()\n      this.loadData()\n    },\n\n    convertScheduleItems(taskTypeElement, scheduleItems) {\n      return scheduleItems.map(item => {\n        let startDate, endDate\n        if (item.start_date) {\n          startDate = parseDate(item.start_date)\n        } else {\n          startDate = moment()\n        }\n        if (taskTypeElement && startDate.isBefore(taskTypeElement.startDate)) {\n          startDate = taskTypeElement.startDate.clone()\n        }\n        if (taskTypeElement && startDate.isAfter(taskTypeElement.endDate)) {\n          startDate = taskTypeElement.endDate.clone().add(-1, 'days')\n        }\n        if (item.end_date) {\n          endDate = parseDate(item.end_date)\n        } else {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (endDate.isBefore(startDate)) {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        const scheduleItem = {\n          ...item,\n          startDate: startDate,\n          endDate: endDate,\n          expanded: false,\n          loading: false,\n          editable: this.isInDepartment(\n            this.taskTypeMap.get(item.task_type_id)\n          ),\n          children: [],\n          parentElement: taskTypeElement\n        }\n        if (this.isTVShow) {\n          scheduleItem.route = getTaskTypeSchedulePath(\n            item.task_type_id,\n            this.currentProduction.id,\n            item.object_id,\n            taskTypeElement.for_entity\n          )\n        }\n        return scheduleItem\n      })\n    },\n\n    expandTaskTypeElement(taskTypeElement) {\n      const parameters = {\n        production: this.currentProduction,\n        taskType: this.taskTypeMap.get(taskTypeElement.task_type_id)\n      }\n\n      taskTypeElement.expanded = !taskTypeElement.expanded\n      if (taskTypeElement.expanded) {\n        taskTypeElement.loading = true\n        let action = 'loadAssetTypeScheduleItems'\n        if (taskTypeElement.for_entity === 'Shot') {\n          if (this.isTVShow) action = 'loadEpisodeScheduleItems'\n          else action = 'loadSequenceScheduleItems'\n        }\n\n        this[action](parameters)\n          .then(scheduleItems => {\n            taskTypeElement.loading = false\n            taskTypeElement.children = this.convertScheduleItems(\n              taskTypeElement,\n              scheduleItems\n            )\n          })\n          .catch(err => {\n            console.error(err)\n            taskTypeElement.loading = false\n            taskTypeElement.children = []\n          })\n      }\n    },\n\n    estimationChanged({ item, days }) {\n      item.man_days = daysToMinutes(this.organisation, days)\n      this.saveScheduleItem(item)\n    },\n\n    scheduleItemChanged(item) {\n      if (item.startDate && item.endDate && item.parentElement) {\n        item.parentElement.startDate = this.getMinDate(item.parentElement)\n        item.parentElement.endDate = this.getMaxDate(item.parentElement)\n        this.saveScheduleItem(item.parentElement)\n      } else if (!item.parentElement) {\n        const minDate = this.getMinDate(item)\n        const maxDate = this.getMaxDate(item)\n        if (item.startDate.isAfter(minDate)) item.startDate = minDate\n        if (item.endDate.isBefore(maxDate)) {\n          item.endDate = maxDate.add(-1, 'days')\n        }\n      }\n      this.saveScheduleItem(item)\n    },\n\n    getMinDate(parentElement) {\n      let minDate = this.endDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.startDate && item.startDate.isBefore(minDate)) {\n          minDate = item.startDate\n        }\n      })\n      return minDate.clone()\n    },\n\n    getMaxDate(parentElement) {\n      let maxDate = this.startDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.endDate && item.endDate.isAfter(maxDate)) {\n          maxDate = item.endDate\n        }\n      })\n      return maxDate.clone()\n    },\n\n    isInDepartment(taskType) {\n      if (this.isCurrentUserManager) {\n        return true\n      } else if (this.isCurrentUserSupervisor) {\n        if (this.user.departments.length === 0) {\n          return true\n        } else {\n          return (\n            taskType.department_id &&\n            this.user.departments.includes(taskType.department_id)\n          )\n        }\n      } else {\n        return false\n      }\n    }\n  },\n\n  socket: {},\n\n  watch: {\n    selectedStartDate() {\n      this.startDate = parseDate(this.selectedStartDate)\n      const start_date = this.startDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.start_date &&\n        this.currentProduction.start_date !== start_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          start_date\n        })\n      }\n    },\n\n    selectedEndDate() {\n      this.endDate = parseDate(this.selectedEndDate)\n      const end_date = this.endDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.end_date &&\n        this.currentProduction.end_date !== end_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          end_date\n        })\n      }\n    },\n\n    // overallManDays() {\n    //   if (this.overallManDays !== this.currentProduction.man_days) {\n    //     this.editProduction({\n    //       ...this.currentProduction,\n    //       man_days: this.overallManDays\n    //     })\n    //   }\n    // },\n\n    currentProduction() {\n      this.reset()\n    }\n  },\n\n  metaInfo() {\n    return {\n      title:\n        `${this.currentProduction.name} ` +\n        `| ${this.$t('schedule.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .project-dates {\n    color: $white-grey;\n    border-bottom: 1px solid $grey;\n  }\n}\n\n.project-dates {\n  border-bottom: 1px solid #eee;\n  padding-bottom: 1em;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n\n  .overall-man-days {\n    width: 120px;\n    font-size: 0.9em;\n    margin-right: 1em;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n}\n</style>\n"],"names":["_sfc_main","ComboboxNumber","Datepicker","Schedule","TaskInfo","moment","mapGetters","fr","en","mapActions","scheduleItems","scheduleStartDate","parseDate","scheduleEndDate","item","taskType","startDate","endDate","path","getTaskTypeSchedulePath","sortTaskTypeScheduleItems","err","taskTypeElement","scheduleItem","parameters","action","days","daysToMinutes","minDate","maxDate","parentElement","start_date","end_date"],"mappings":"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"}