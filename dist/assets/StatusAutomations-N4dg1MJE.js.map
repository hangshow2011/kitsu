{"version":3,"file":"StatusAutomations-N4dg1MJE.js","sources":["../../src/components/modals/EditStatusAutomationModal.vue","../../src/components/pages/StatusAutomations.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\" v-if=\"isEditing\">\n          {{ $t('status_automations.edit_title') }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t('status_automations.new_status_automation') }}\n        </h1>\n\n        <form @submit.prevent>\n          <h3 class=\"subtitle\">{{ $t('status_automations.entity_title') }}</h3>\n          <combobox\n            :label=\"$t('status_automations.fields.entity_type')\"\n            :options=\"entityTypeOptions\"\n            locale-key-prefix=\"status_automations.entity_types.\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.entityType\"\n            v-if=\"!isEditing\"\n          />\n          <span class=\"entity-type-name\" v-else> {{ form.entityType }} </span>\n\n          <h2 class=\"subtitle\">{{ $t('status_automations.in_title') }}</h2>\n\n          <div class=\"flexrow\">\n            <combobox-task-type\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.in_task_type')\"\n              :task-type-list=\"form.inEntityTaskTypes\"\n              v-model=\"form.inTaskTypeId\"\n              @enter=\"confirmClicked\"\n            />\n\n            <combobox-status\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.in_task_status')\"\n              :task-status-list=\"taskStatusList\"\n              v-model=\"form.inTaskStatusId\"\n              @enter=\"confirmClicked\"\n            />\n          </div>\n\n          <h2 class=\"subtitle\">{{ $t('status_automations.out_title') }}</h2>\n\n          <div class=\"flexrow\">\n            <combobox\n              class=\"flexrow-item margin-fix\"\n              :label=\"$t('status_automations.fields.out_field_type')\"\n              :options=\"fieldTypeOptions\"\n              locale-key-prefix=\"status_automations.field_types.\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outFieldType\"\n              v-if=\"!isEditing && form.entityType === 'asset'\"\n            />\n            <span\n              class=\"flexrow-item\"\n              v-if=\"isEditing && form.outFieldType === 'ready_for'\"\n            >\n              {{ $t('status_automations.field_types.ready_for') }}\n            </span>\n\n            <combobox-task-type\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.out_task_type')\"\n              :task-type-list=\"form.outEntityTaskTypes\"\n              :open-top=\"true\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outTaskTypeId\"\n            />\n\n            <combobox-status\n              class=\"flexrow-item\"\n              :label=\"$t('status_automations.fields.out_task_status')\"\n              :task-status-list=\"taskStatusList\"\n              :open-top=\"true\"\n              @enter=\"confirmClicked\"\n              v-model=\"form.outTaskStatusId\"\n              v-if=\"form.outFieldType === 'status'\"\n            />\n          </div>\n\n          <combobox-boolean\n            :label=\"$t('main.archived')\"\n            @enter=\"confirmClicked\"\n            v-model=\"form.archived\"\n            v-if=\"isEditing\"\n          />\n        </form>\n\n        <modal-footer\n          :error-text=\"$t('status_automations.create_error')\"\n          :is-error=\"isError\"\n          @confirm=\"confirmClicked\"\n          @cancel=\"$emit('cancel')\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nimport { modalMixin } from '@/components/modals/base_modal'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxBoolean from '@/components/widgets/ComboboxBoolean'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType'\nimport ModalFooter from '@/components/modals/ModalFooter'\n\nexport default {\n  name: 'edit-status-automation-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    Combobox,\n    ComboboxBoolean,\n    ComboboxStatus,\n    ComboboxTaskType,\n    ModalFooter\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    statusAutomationToEdit: {\n      type: Object,\n      default: () => {}\n    },\n    taskStatus: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      entityTypeOptions: [\n        {\n          label: 'asset',\n          value: 'asset'\n        },\n        {\n          label: 'shot',\n          value: 'shot'\n        }\n      ],\n      fieldTypeOptions: [\n        {\n          label: 'status',\n          value: 'status'\n        },\n        {\n          label: 'ready_for',\n          value: 'ready_for'\n        }\n      ],\n      form: {\n        entityType: 'asset',\n        outFieldType: 'status',\n        inEntityTaskTypes: [],\n        outEntityTaskTypes: [],\n        inTaskTypeId: '',\n        outTaskTypeId: '',\n        inTaskStatusId: '',\n        outTaskStatusId: ''\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'statusAutomations',\n      'statusAutomationsStatusOptions',\n      'assetTaskTypes',\n      'shotTaskTypes',\n      'taskStatuses'\n    ]),\n\n    taskStatusList() {\n      return this.taskStatuses.filter(status => !status.for_concept)\n    },\n\n    isEditing() {\n      return this.statusAutomationToEdit?.id\n    }\n  },\n\n  methods: {\n    confirmClicked() {\n      this.$emit('confirm', this.form)\n    },\n\n    setTaskTypes(fieldType) {\n      if (fieldType === 'asset') {\n        this.form.inEntityTaskTypes = this.assetTaskTypes\n        if (this.form.outFieldType === 'status') {\n          this.form.outEntityTaskTypes = this.assetTaskTypes\n        } else {\n          this.form.outEntityTaskTypes = this.shotTaskTypes\n        }\n      } else if (fieldType === 'shot') {\n        this.form.inEntityTaskTypes = this.shotTaskTypes\n        this.form.outFieldType = 'status'\n        this.form.outEntityTaskTypes = this.shotTaskTypes\n      }\n    }\n  },\n\n  watch: {\n    statusAutomationToEdit() {\n      if (this.statusAutomationToEdit) {\n        let entityTaskTypes = []\n        if (this.form.entityType === 'asset') {\n          entityTaskTypes = this.assetTaskTypes\n        } else if (this.form.entityType === 'shot') {\n          entityTaskTypes = this.shotTaskTypes\n        }\n        this.form = {\n          entityType: this.isEditing\n            ? this.statusAutomationToEdit.entity_type\n            : 'asset',\n          inEntityTaskTypes: entityTaskTypes,\n          outEntityTaskTypes: entityTaskTypes,\n          inTaskTypeId: this.isEditing\n            ? this.statusAutomationToEdit.in_task_type_id\n            : entityTaskTypes[0].id,\n          inTaskStatusId: this.isEditing\n            ? this.statusAutomationToEdit.in_task_status_id\n            : this.taskStatusList[0].id,\n          outFieldType: this.isEditing\n            ? this.statusAutomationToEdit.out_field_type\n            : 'status',\n          outTaskTypeId: this.isEditing\n            ? this.statusAutomationToEdit.out_task_type_id\n            : entityTaskTypes[1].id,\n          outTaskStatusId: this.isEditing\n            ? this.statusAutomationToEdit.out_task_status_id\n            : this.taskStatusList[1].id,\n          archived: this.isEditing\n            ? String(this.statusAutomationToEdit.archived === true)\n            : 'false'\n        }\n      }\n    },\n\n    // Adapt available values to the entity type\n    'form.entityType': function (entityType) {\n      this.setTaskTypes(entityType)\n      if (!this.isEditing) {\n        this.form.inTaskTypeId = this.form.inEntityTaskTypes[0].id\n        this.form.inTaskStatusId = this.taskStatusList[0].id\n        this.form.outTaskTypeId = this.form.outEntityTaskTypes[1].id\n        this.form.outTaskStatusId = this.taskStatusList[1].id\n      }\n    },\n\n    // Adapt available values to the automation type\n    // * Ready for apply to assets\n    // * Status apply to the same entity.\n    'form.outFieldType': function (outFieldType) {\n      if (outFieldType === 'ready_for') {\n        this.form.outEntityTaskTypes = this.shotTaskTypes\n        this.form.outTaskTypeId = this.shotTaskTypes[1].id\n      } else if (outFieldType === 'status') {\n        this.setTaskTypes(this.form.entityType)\n        this.form.outTaskTypeId = this.form.outEntityTaskTypes[1].id\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.margin-fix {\n  margin-top: 5px;\n}\n.subtitle {\n  font-size: 1.4em;\n  margin-top: 2em;\n  margin-bottom: 0.5em;\n  text-transform: none;\n}\n.entity-type-name {\n  font-size: 1.2em;\n  text-transform: capitalize;\n}\n</style>\n","<template>\n  <div class=\"status-automations page fixed-page\">\n    <list-page-header\n      :title=\"$t('status_automations.title')\"\n      :new-entry-label=\"$t('status_automations.new_status_automation')\"\n      :is-exportable=\"isActiveTab\"\n      @export-clicked=\"onExportClicked\"\n      @new-clicked=\"onNewClicked\"\n    />\n\n    <route-tabs\n      class=\"mt2\"\n      :active-tab=\"activeTab\"\n      :tabs=\"tabs\"\n      route-name=\"status-automations\"\n    />\n\n    <status-automation-list\n      class=\"status-automation-list\"\n      :entries=\"statusAutomationsList\"\n      :is-editable=\"true\"\n      :is-loading=\"loading.list\"\n      :is-error=\"errors.list\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n    />\n\n    <edit-status-automation-modal\n      :active=\"modals.edit\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :status-automation-to-edit=\"statusAutomationToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditStatusAutomation\"\n    />\n\n    <delete-modal\n      :active=\"modals.del\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText\"\n      :error-text=\"$t('status_automations.delete_error')\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeleteStatusAutomation\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditStatusAutomationModal from '@/components/modals/EditStatusAutomationModal'\nimport ListPageHeader from '@/components/widgets/ListPageHeader'\nimport RouteTabs from '@/components/widgets/RouteTabs'\nimport StatusAutomationList from '@/components/lists/StatusAutomationList'\n\nexport default {\n  name: 'status-automations',\n\n  components: {\n    DeleteModal,\n    EditStatusAutomationModal,\n    ListPageHeader,\n    RouteTabs,\n    StatusAutomationList\n  },\n\n  data() {\n    return {\n      activeTab: 'active',\n      modals: {\n        edit: false,\n        del: false\n      },\n      loading: {\n        edit: false,\n        del: false,\n        list: false\n      },\n      errors: {\n        edit: false,\n        del: false,\n        list: false\n      },\n      tabs: [\n        {\n          name: 'active',\n          label: this.$t('main.active')\n        },\n        {\n          name: 'archived',\n          label: this.$t('main.archived')\n        }\n      ],\n      statusAutomationToDelete: null,\n      statusAutomationToEdit: null\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'statusAutomations',\n      'archivedStatusAutomations',\n      'taskStatusMap',\n      'taskTypeMap'\n    ]),\n\n    isActiveTab() {\n      return this.activeTab === 'active'\n    },\n\n    statusAutomationsList() {\n      return this.isActiveTab\n        ? this.statusAutomations\n        : this.archivedStatusAutomations\n    },\n\n    deleteText() {\n      const statusAutomation = this.statusAutomationToDelete\n      if (statusAutomation) {\n        return this.$t('custom_actions.delete_text', {\n          name: statusAutomation.name\n        })\n      } else {\n        return ''\n      }\n    }\n  },\n\n  created() {\n    this.activeTab = this.$route.query.tab || 'active'\n    this.loading.list = true\n    this.errors.list = false\n    this.loadStatusAutomations(err => {\n      this.loading.list = false\n      if (err) {\n        this.errors.list = true\n      }\n    })\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteStatusAutomation',\n      'editStatusAutomation',\n      'loadTaskStatuses',\n      'loadStatusAutomations',\n      'newStatusAutomation'\n    ]),\n\n    confirmEditStatusAutomation(form) {\n      let action = 'newStatusAutomation'\n      if (this.statusAutomationToEdit && this.statusAutomationToEdit.id) {\n        action = 'editStatusAutomation'\n        form.id = this.statusAutomationToEdit.id\n      }\n\n      this.loading.edit = true\n      this.errors.edit = false\n      this[action](form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.edit = true\n          this.loading.edit = false\n        })\n    },\n\n    confirmDeleteStatusAutomation() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteStatusAutomation(this.statusAutomationToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.del = true\n          this.loading.del = false\n        })\n    },\n\n    onExportClicked() {\n      const name = stringHelpers.slugify(this.$t('status_automations.title'))\n      const headers = [\n        this.$t('main.type'),\n        this.$t('status_automations.fields.entity_type'),\n        this.$t('status_automations.fields.in_task_type'),\n        this.$t('status_automations.fields.in_task_status'),\n        this.$t('status_automations.fields.out_field_type'),\n        this.$t('status_automations.fields.out_task_type'),\n        this.$t('status_automations.fields.out_task_status')\n      ]\n      const entries = [headers].concat(\n        this.statusAutomations.map(statusAutomation => [\n          statusAutomation.type,\n          statusAutomation.entity_type,\n          this.taskTypeMap.get(statusAutomation.in_task_type_id)?.name,\n          this.taskStatusMap.get(statusAutomation.in_task_status_id)\n            ?.short_name,\n          statusAutomation.out_field_type === 'ready_for'\n            ? this.$t('status_automations.change_ready_for')\n            : this.$t('status_automations.change_status'),\n          this.taskTypeMap.get(statusAutomation.out_task_type_id)?.name,\n          statusAutomation.out_field_type === 'status'\n            ? this.taskStatusMap.get(statusAutomation.out_task_status_id)\n                ?.short_name\n            : undefined\n        ])\n      )\n      csv.buildCsvFile(name, entries)\n    },\n\n    onNewClicked() {\n      this.statusAutomationToEdit = {}\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onEditClicked(statusAutomation) {\n      this.statusAutomationToEdit = statusAutomation\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onDeleteClicked(statusAutomation) {\n      this.statusAutomationToDelete = statusAutomation\n      this.errors.del = false\n      this.modals.del = true\n    }\n  },\n\n  watch: {\n    $route() {\n      this.activeTab = this.$route.query.tab || 'active'\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('status_automations.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.status-automation-list {\n  margin-top: 0;\n}\n</style>\n"],"names":["_sfc_main","modalMixin","Combobox","ComboboxBoolean","ComboboxStatus","ComboboxTaskType","ModalFooter","mapGetters","status","_a","fieldType","entityTaskTypes","entityType","outFieldType","DeleteModal","EditStatusAutomationModal","ListPageHeader","RouteTabs","StatusAutomationList","statusAutomation","err","mapActions","form","action","name","stringHelpers","entries","_b","_c","_d","csv"],"mappings":"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"}