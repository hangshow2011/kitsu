{"version":3,"file":"AllTasks-Cd6ItBVY.js","sources":["../../src/components/lists/AllTaskList.vue","../../src/components/layouts/PageLayout.vue","../../src/components/widgets/StatusStats.vue","../../src/components/pages/AllTasks.vue"],"sourcesContent":["<template>\n  <div class=\"data-list\">\n    <div ref=\"body\" class=\"datatable-wrapper\">\n      <table class=\"datatable\">\n        <thead ref=\"thead\" class=\"datatable-head\">\n          <tr class=\"row-header\">\n            <th class=\"project\" ref=\"th-name\">\n              {{ $t('tasks.fields.production') }}\n            </th>\n            <th class=\"thumbnail\" ref=\"th-thumbnail\"></th>\n            <th class=\"asset-type\" ref=\"th-type\">\n              {{ $t('tasks.fields.parent') }}\n            </th>\n            <th class=\"name\" ref=\"th-name\">\n              {{ $t('tasks.fields.entity') }}\n            </th>\n            <th class=\"name\" ref=\"th-name\">\n              {{ $t('tasks.fields.task_type') }}\n            </th>\n            <th class=\"status\" ref=\"th-status\">\n              {{ $t('tasks.fields.task_status') }}\n            </th>\n            <th class=\"assignees\" ref=\"th-assignees\">\n              {{ $t('tasks.fields.assignees') }}\n            </th>\n            <th\n              ref=\"th-estimation\"\n              class=\"estimation number-cell\"\n              :title=\"$t('main.estimation')\"\n            >\n              {{ $t('tasks.fields.estimation').substring(0, 3) }}.\n            </th>\n            <th class=\"duration number-cell\" ref=\"th-duration\">\n              {{ $t('tasks.fields.duration').substring(0, 3) }}.\n            </th>\n            <th class=\"start-date\" ref=\"th-estimation\">\n              {{ $t('tasks.fields.start_date') }}\n            </th>\n            <th class=\"due-date\" ref=\"th-estimation\">\n              {{ $t('tasks.fields.due_date') }}\n            </th>\n            <th class=\"empty\" ref=\"\">&nbsp;</th>\n          </tr>\n        </thead>\n\n        <tbody class=\"datatable-body\">\n          <tr\n            :ref=\"'task-' + task.id\"\n            :key=\"task.id\"\n            :class=\"{\n              'task-line': true,\n              'datatable-row': true,\n              selected: selectionGrid[task.id]\n            }\"\n            @click=\"selectTask($event, index, task)\"\n            v-for=\"(task, index) in tasks\"\n          >\n            <td class=\"project\">\n              <production-name-cell\n                class=\"project\"\n                :entry=\"{ id: task.project_id, name: task.project_name }\"\n                :only-avatar=\"true\"\n                :is-link=\"false\"\n              />\n            </td>\n            <td class=\"thumbnail\">\n              <entity-thumbnail\n                class=\"flexrow-item\"\n                :preview-file-id=\"task.last_preview_file_id\"\n                :width=\"50\"\n                :height=\"33\"\n                :empty-width=\"50\"\n                :empty-height=\"33\"\n              />\n            </td>\n            <td class=\"asset-type\">\n              {{ getParentName(task) }}\n            </td>\n            <td class=\"name\">\n              {{ task.entity_name }}\n            </td>\n            <task-type-cell\n              class=\"name\"\n              :task-type=\"taskTypeMap.get(task.task_type_id)\"\n            />\n            <validation-cell\n              class=\"status unselectable\"\n              :task-test=\"task\"\n              :is-border=\"false\"\n              :is-assignees=\"false\"\n              :selectable=\"false\"\n              :is-static=\"true\"\n            />\n            <td class=\"assignees\">\n              <div class=\"flexrow\">\n                <people-avatar-with-menu\n                  class=\"flexrow-item\"\n                  :key=\"task.id + '-' + personId\"\n                  :person=\"personMap.get(personId)\"\n                  :size=\"30\"\n                  :font-size=\"16\"\n                  @unassign=\"person => onUnassign(task, person)\"\n                  v-for=\"personId in task.assignees\"\n                />\n              </div>\n            </td>\n            <td class=\"estimation number-cell\">\n              {{ formatDuration(task.estimation) }}\n            </td>\n            <td\n              :class=\"{\n                duration: true,\n                'number-cell': true,\n                error: isEstimationBurned(task)\n              }\"\n            >\n              {{ formatDuration(task.duration) }}\n            </td>\n            <td class=\"start-date\">\n              {{ formatDate(task.start_date) }}\n            </td>\n            <td class=\"due-date\">\n              {{ formatDate(task.due_date) }}\n            </td>\n            <td class=\"empty\"></td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"has-text-centered\" v-if=\"isMore\">\n        <spinner class=\"mt2\" v-if=\"isMoreLoading\" />\n        <button class=\"button mt2\" @click=\"$emit('more-clicked')\" v-else>\n          {{ $t('main.load_more') }}\n        </button>\n      </div>\n      <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n    </div>\n    <p class=\"has-text-centered nb-tasks\" v-if=\"!isLoading\">\n      {{ stats.total }} {{ $tc('tasks.number', stats.total) }} ({{\n        formatDuration(stats.total_estimation)\n      }}\n      {{ $tc('main.days_estimated', isTimeEstimatedPlural) }},\n      {{ formatDuration(stats.total_duration) }}\n      {{ $tc('main.days_spent', isTimeSpentPlural) }})\n    </p>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue/dist/vue'\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment-timezone'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport { domMixin } from '@/components/mixins/dom'\n\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail'\nimport PeopleAvatarWithMenu from '@/components/widgets/PeopleAvatarWithMenu'\nimport ProductionNameCell from '@/components/cells/ProductionNameCell'\nimport Spinner from '@/components/widgets/Spinner'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskTypeCell from '@/components/cells/TaskTypeCell'\nimport ValidationCell from '@/components/cells/ValidationCell'\n\nexport default {\n  name: 'all-task-list',\n  mixins: [domMixin, formatListMixin],\n\n  components: {\n    EntityThumbnail,\n    PeopleAvatarWithMenu,\n    ProductionNameCell,\n    Spinner,\n    TableInfo,\n    TaskTypeCell,\n    ValidationCell\n  },\n\n  data() {\n    return {\n      lastSelection: null,\n      page: 1,\n      selectionGrid: {}\n    }\n  },\n\n  props: {\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isMore: {\n      type: Boolean,\n      default: false\n    },\n    isMoreLoading: {\n      type: Boolean,\n      default: false\n    },\n    stats: {\n      type: Object,\n      default: () => {}\n    },\n    tasks: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  mounted() {\n    window.addEventListener('keydown', this.onKeyDown, false)\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.onKeyDown)\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetMap',\n      'editMap',\n      'episodeMap',\n      'nbSelectedTasks',\n      'personMap',\n      'user',\n      'selectedTasks',\n      'sequenceMap',\n      'shotMap',\n      'taskMap',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'taskTypeMap'\n    ]),\n\n    isTimeSpentPlural() {\n      return (\n        Math.floor(\n          (this.stats.total_duration ? this.stats.total_duration : 0) / 60 / 8\n        ) >= 1\n      )\n    },\n\n    isTimeEstimatedPlural() {\n      return (\n        Math.floor(\n          (this.stats.total_estimation ? this.stats.total_estimation : 0) /\n            60 /\n            8\n        ) >= 1\n      )\n    },\n\n    nbFrames() {\n      let total = 0\n      this.tasks.forEach(task => {\n        total += task.entity_nb_frames\n      })\n      return total\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addSelectedTask',\n      'addSelectedTasks',\n      'clearSelectedTasks',\n      'updateTask',\n      'unassignPersonFromTask',\n      'removeSelectedTask'\n    ]),\n\n    getParentName(task) {\n      if (task.sequence_name) {\n        if (task.episode_name) {\n          return `${task.episode_name} - ${task.sequence_name}`\n        } else {\n          return task.sequence_name\n        }\n      } else {\n        return task.entity_type_name\n      }\n    },\n\n    getTaskName(task) {\n      return task.entity_name\n    },\n\n    getDate(date) {\n      return date ? moment(date, 'YYYY-MM-DD').toDate() : null\n    },\n\n    formatDate(date) {\n      if (date) return moment(date).format('YYYY-MM-DD')\n      return ''\n    },\n\n    isEstimationBurned(task) {\n      return (\n        task.estimation &&\n        task.estimation > 0 &&\n        task.duration > task.estimation\n      )\n    },\n\n    onKeyDown(event) {\n      if (this.tasks.length > 0 && event.altKey) {\n        let index = this.lastSelection ? this.lastSelection : 0\n        if ([37, 38].includes(event.keyCode)) {\n          index = index - 1 < 0 ? (index = this.tasks.length - 1) : index - 1\n          this.selectTask({}, index, this.tasks[index])\n          this.pauseEvent(event)\n        } else if ([39, 40].includes(event.keyCode)) {\n          index = index + 1 >= this.tasks.length ? (index = 0) : index + 1\n          this.selectTask({}, index, this.tasks[index])\n          this.pauseEvent(event)\n        }\n      }\n    },\n\n    selectTask(event, index, task) {\n      if (\n        event &&\n        event.target &&\n        // Dirty hack needed to make date picker and inputs work properly\n        (['INPUT'].includes(event.target.nodeName) ||\n          (event.target.parentNode &&\n            ['HEADER'].includes(event.target.parentNode.nodeName)) ||\n          ['cell day selected'].includes(event.target.className))\n      )\n        return\n      const isSelected = this.selectionGrid[task.id]\n      const isManySelection = Object.keys(this.selectionGrid).length > 1\n      this.clearSelectedTasks({ task })\n      this.resetSelection()\n\n      if (this.selectionGrid[task.id]) {\n        this.removeSelectedTask({ task })\n        Vue.set(this.selectionGrid, task.id, undefined)\n      } else if (!isSelected || isManySelection) {\n        this.addSelectedTask({ task })\n        this.$emit('task-selected', task)\n        Vue.set(this.selectionGrid, task.id, true)\n        this.lastSelection = index\n      }\n    },\n\n    setScrollPosition(scrollPosition) {\n      if (this.$refs.body) {\n        this.$refs.body.scrollTop = scrollPosition\n      }\n    },\n\n    resetSelection() {\n      this.selectionGrid = {}\n      this.lastSelection = null\n    }\n  },\n\n  watch: {\n    tasks() {\n      this.page = 1\n      this.resetSelection()\n    },\n\n    nbSelectedTasks() {\n      if (this.nbSelectedTasks === 0) this.resetSelection()\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.thumbnail {\n  min-width: 63px;\n  max-width: 63px;\n  width: 63px;\n}\n\n.asset-type {\n  min-width: 120px;\n  width: 120px;\n}\n\n.sequence {\n  min-width: 120px;\n  width: 120px;\n}\n\n.name {\n  min-width: 120px;\n  width: 120px;\n  font-weight: bold;\n}\n\n.status {\n  min-width: 140px;\n  width: 140px;\n}\n\n.assignees {\n  min-width: 100px;\n  width: 100px;\n}\n\n.frames,\n.duration,\n.estimation {\n  min-width: 60px;\n  width: 60px;\n}\n\n.last-comment-date,\n.real-start-date,\n.real-end-date {\n  min-width: 110px;\n  max-width: 110px;\n  width: 110px;\n}\n\nth.start-date,\nth.due-date {\n  min-width: 106px;\n  max-width: 106px;\n  width: 106px;\n}\n\ntd.start-date,\ntd.due-date {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n}\n\n.empty {\n  width: 100%;\n}\n\n.nb-tasks {\n  padding: 0.5em;\n}\n\n.table-header th {\n  padding: 0.5em 0;\n\n  &.status {\n    padding-left: 1em;\n  }\n}\n\n.datatable-head {\n  th {\n    padding-left: 5px;\n\n    &.retake-count {\n      padding-right: 1em;\n    }\n\n    &.status {\n      padding-left: 1em;\n      padding-right: 1em;\n    }\n  }\n}\n\n.input {\n  padding: 0.5em;\n}\n\n.datatable-wrapper {\n  min-height: calc(100% - 50px);\n}\n\n.data-list {\n  margin-top: 0.6em;\n}\n\n.list-wrapper {\n  overflow-x: auto;\n  overflow-y: auto;\n}\n\n.list-wrapper div:first-child h2 {\n  margin-top: 0em;\n}\n\n.datatable-body {\n  overflow-x: auto;\n  overflow-y: scroll;\n  min-height: 100%;\n\n  td,\n  tr {\n    padding-bottom: 0;\n    padding-top: 0;\n\n    &.thumbnail {\n      padding: 6px;\n    }\n  }\n\n  td.retake-count {\n    padding-right: 0.5em;\n  }\n\n  td.name {\n    border-right: 1px solid var(--border);\n  }\n\n  td.status {\n    padding-left: 1em;\n    padding-right: 1em;\n  }\n\n  tr.task-line {\n    cursor: pointer;\n  }\n}\n\n.error {\n  color: $red;\n}\n\n.datatable-row:hover {\n  background: var(--background-selectable);\n}\n</style>\n","<template>\n  <div ref=\"page\" class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <slot name=\"main\" />\n    </div>\n    <div class=\"column side-column\">\n      <slot name=\"side\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'page-layout'\n}\n</script>\n","<template>\n  <div class=\"status-stats\">\n    <div :key=\"'stat-' + stat.name\" class=\"stat-wrapper\" v-for=\"stat in stats\">\n      <div>{{ stat.name }} : {{ stat.value }}</div>\n      <div\n        :key=\"'stat-value-' + stat.name.toLowerCase()\"\n        class=\"stat-line\"\n        :title=\"stat.name + ': ' + stat.value\"\n        :style=\"{\n          background: stat.color,\n          width: (stat.value / statMax) * 100 + '%'\n        }\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'status-stats',\n\n  components: {},\n\n  data() {\n    return {}\n  },\n\n  props: {\n    stats: Array\n  },\n\n  computed: {\n    statMax() {\n      if (this.stats) {\n        return this.stats.reduce((max, stat) => {\n          return Math.max(stat.value, max)\n        }, 0)\n      } else {\n        return 0\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.status-stats {\n  text-align: left;\n  width: 100%;\n  flex: 1;\n\n  .stat-line {\n    border: 1px solid var(--border-alt);\n    display: inline-block;\n    margin-right: 1em;\n    margin-top: 0;\n    margin-bottom: 0.4em;\n    font-size: 0.8em;\n    font-weight: bold;\n    width: 100%;\n    height: 12px;\n    border-radius: 2px;\n  }\n}\n</style>\n","<template>\n  <page-layout>\n    <template v-slot:main>\n      <div class=\"all-tasks\">\n        <page-title\n          class=\"flexrow-item title mt1\"\n          :text=\"$t('tasks.all_tasks')\"\n        />\n\n        <div class=\"filters flexrow\">\n          <combobox-production\n            class=\"flexrow-item\"\n            :label=\"$t('main.production')\"\n            :production-list=\"productionList\"\n            v-model=\"filters.productionId\"\n          />\n          <combobox-status\n            class=\"flexrow-item selector\"\n            :label=\"$t('news.task_status')\"\n            :task-status-list=\"taskStatusList\"\n            v-model=\"filters.taskStatusId\"\n          />\n          <combobox-task-type\n            class=\"flexrow-item selector\"\n            :label=\"$t('news.task_type')\"\n            :task-type-list=\"taskTypeList\"\n            v-model=\"filters.taskTypeId\"\n          />\n          <div class=\"flexrow-item selector\">\n            <label class=\"label person-label\">\n              {{ $t('main.person') }}\n            </label>\n            <people-field\n              class=\"person-field\"\n              big\n              :people=\"personList\"\n              v-model=\"filters.person\"\n            />\n          </div>\n        </div>\n\n        <all-task-list\n          :tasks=\"tasks\"\n          :stats=\"stats\"\n          :is-loading=\"isLoading\"\n          :is-error=\"isLoadingError\"\n          :is-more=\"isMore\"\n          :is-more-loading=\"isMoreLoading\"\n          @task-clicked=\"taskClicked\"\n          @more-clicked=\"loadMore\"\n        />\n      </div>\n    </template>\n    <template v-slot:side>\n      <task-info :task=\"selectedTasks.values().next().value\">\n        <status-stats :stats=\"statusStats\" />\n      </task-info>\n    </template>\n  </page-layout>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { sortPeople } from '@/lib/sorting'\n\nimport AllTaskList from '@/components/lists/AllTaskList.vue'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction.vue'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType.vue'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus.vue'\nimport PageLayout from '@/components/layouts/PageLayout.vue'\nimport PageTitle from '@/components/widgets/PageTitle.vue'\nimport PeopleField from '@/components/widgets/PeopleField.vue'\nimport StatusStats from '@/components/widgets/StatusStats.vue'\nimport TaskInfo from '@/components/sides/TaskInfo.vue'\n\nexport default {\n  name: 'AllTasks',\n\n  components: {\n    AllTaskList,\n    ComboboxProduction,\n    ComboboxTaskType,\n    ComboboxStatus,\n    PageLayout,\n    PageTitle,\n    PeopleField,\n    StatusStats,\n    TaskInfo\n  },\n\n  data() {\n    return {\n      filters: {\n        productionId: null,\n        taskStatusId: null,\n        taskTypeId: null,\n        person: null\n      },\n      isMore: false,\n      isMoreLoading: false,\n      isLoading: false,\n      isLoadingError: false,\n      tasks: [],\n      stats: {\n        status: []\n      }\n    }\n  },\n\n  async mounted() {\n    const routeQuery = this.$route.query\n    if (routeQuery.project_id) {\n      this.filters.productionId = routeQuery.project_id\n    }\n    if (routeQuery.task_status_id) {\n      this.filters.taskStatusId = routeQuery.task_status_id\n    }\n    if (routeQuery.task_type_id) {\n      this.filters.taskTypeId = routeQuery.task_type_id\n    }\n    if (routeQuery.person_id) {\n      this.filters.person = this.activePeople.find(\n        p => p.id === parseInt(routeQuery.person_id)\n      )\n    }\n    this.reload()\n  },\n\n  computed: {\n    ...mapGetters([\n      'activePeopleWithoutBot',\n      'getProductionTaskStatuses',\n      'getProductionTaskTypes',\n      'nbSelectedTasks',\n      'openProductions',\n      'personMap',\n      'productionMap',\n      'selectedTasks',\n      'taskStatus',\n      'taskStatusMap',\n      'taskTypes'\n    ]),\n\n    taskStatusList() {\n      const productionId = this.filters.productionId\n      const statuses = this.getProductionTaskStatuses(productionId).filter(\n        status => !status.for_concept\n      )\n      return this.addAllValue(statuses)\n    },\n\n    taskTypeList() {\n      const productionId = this.filters.productionId\n      const types = this.getProductionTaskTypes(productionId).filter(\n        type => type.for_entity !== 'Concept'\n      )\n      return this.addAllValue(types)\n    },\n\n    personList() {\n      const productionId = this.filters.productionId\n      const production = this.productionMap.get(productionId)\n      if (production) {\n        return sortPeople(\n          production.team\n            .map(personId => this.personMap.get(personId))\n            .filter(person => !person.is_bot)\n        )\n      } else {\n        return this.activePeopleWithoutBot\n      }\n    },\n\n    productionList() {\n      return this.addAllValue(this.openProductions)\n    },\n\n    params() {\n      return {\n        project_id: this.filters.productionId,\n        task_status_id: this.filters.taskStatusId,\n        task_type_id: this.filters.taskTypeId,\n        person_id: this.filters.person ? this.filters.person.id : null\n      }\n    },\n\n    statusStats() {\n      return [...this.stats.status]\n        .sort((a, b) => b.amount - a.amount)\n        .map(stat => {\n          const taskStatus = this.taskStatusMap.get(stat.task_status_id)\n          return {\n            name: taskStatus.short_name.toUpperCase(),\n            color: taskStatus.color,\n            value: stat.amount\n          }\n        })\n    }\n  },\n\n  methods: {\n    ...mapActions(['clearSelectedTasks', 'loadOpenTasks', 'loadTask']),\n\n    addAllValue(list) {\n      return [\n        {\n          id: '',\n          color: '#999',\n          name: this.$t('main.all'),\n          short_name: this.$t('main.all')\n        }\n      ].concat([...list])\n    },\n\n    async reload() {\n      this.isLoading = true\n      this.page = 1\n      this.clearSelectedTasks()\n      try {\n        const routeQuery = {}\n        Object.keys(this.params).forEach(key => {\n          if (this.params[key]) {\n            routeQuery[key] = this.params[key]\n          }\n        })\n        this.$router.push({ query: routeQuery })\n        const taskInfos = await this.loadOpenTasks(this.params)\n        this.tasks = taskInfos.data\n        this.stats = taskInfos.stats\n        this.isMore = taskInfos.is_more\n      } catch (error) {\n        this.isLoadingError = true\n        console.error(error)\n      }\n      this.isLoading = false\n    },\n\n    loadMore() {\n      this.isMoreLoading = true\n      this.page = (this.page || 1) + 1\n      const params = {\n        ...this.params,\n        page: this.page\n      }\n      this.loadOpenTasks(params)\n        .then(taskInfos => {\n          this.tasks = this.tasks.concat(taskInfos.data)\n          this.isMore = taskInfos.is_more\n          this.isMoreLoading = false\n        })\n        .catch(error => {\n          this.isMoreLoading = false\n          this.isMoreLoadingError = true\n          console.error(error)\n        })\n    },\n\n    taskClicked(task) {\n      this.$router.push({ name: 'Task', params: { id: task.id } })\n    }\n  },\n\n  watch: {\n    filters: {\n      handler() {\n        this.reload()\n      },\n      deep: true\n    }\n  },\n\n  socket: {\n    events: {\n      'task:update'(eventData) {\n        const task = this.tasks.find(t => t.id === eventData.task_id)\n        if (task) {\n          this.loadTask({ taskId: task.id }).then(updatedTask => {\n            Object.assign(task, updatedTask)\n          })\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    return { title: `${this.$t('tasks.all_tasks')} - Kitsu` }\n  }\n}\n</script>\n\n<style scoped>\n.all-tasks {\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  padding: 4em 1em 1em 1em;\n  color: var(--text);\n}\n\n.person-label {\n  margin-top: -23px;\n}\n</style>\n"],"names":["_sfc_main","domMixin","formatListMixin","EntityThumbnail","PeopleAvatarWithMenu","ProductionNameCell","Spinner","TableInfo","TaskTypeCell","ValidationCell","mapGetters","total","task","mapActions","date","moment","event","index","isSelected","isManySelection","Vue","scrollPosition","max","stat","AllTaskList","ComboboxProduction","ComboboxTaskType","ComboboxStatus","PageLayout","PageTitle","PeopleField","StatusStats","TaskInfo","routeQuery","p","productionId","statuses","status","types","type","production","sortPeople","personId","person","a","b","taskStatus","list","key","taskInfos","error","params","eventData","t","updatedTask"],"mappings":"6LAmKA,MAAAA,EAAA,CACA,KAAA,gBACA,OAAA,CAAAC,EAAAC,CAAA,EAEA,WAAA,CACA,gBAAAC,EACA,qBAAAC,EACA,mBAAAC,EACA,QAAAC,EACA,UAAAC,EACA,aAAAC,EACA,eAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,cAAA,KACA,KAAA,EACA,cAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,OAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,cAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,MAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,EACA,MAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,OAAA,iBAAA,UAAA,KAAA,UAAA,EAAA,CACA,EAEA,eAAA,CACA,OAAA,oBAAA,UAAA,KAAA,SAAA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,WACA,UACA,aACA,kBACA,YACA,OACA,gBACA,cACA,UACA,UACA,uBACA,0BACA,aACA,CAAA,EAEA,mBAAA,CACA,OACA,KAAA,OACA,KAAA,MAAA,eAAA,KAAA,MAAA,eAAA,GAAA,GAAA,CACA,GAAA,CAEA,EAEA,uBAAA,CACA,OACA,KAAA,OACA,KAAA,MAAA,iBAAA,KAAA,MAAA,iBAAA,GACA,GACA,CACA,GAAA,CAEA,EAEA,UAAA,CACA,IAAAC,EAAA,EACA,YAAA,MAAA,QAAAC,GAAA,CACAD,GAAAC,EAAA,gBACA,CAAA,EACAD,CACA,CACA,EAEA,QAAA,CACA,GAAAE,EAAA,CACA,kBACA,mBACA,qBACA,aACA,yBACA,oBACA,CAAA,EAEA,cAAAD,EAAA,CACA,OAAAA,EAAA,cACAA,EAAA,aACA,GAAAA,EAAA,YAAA,MAAAA,EAAA,aAAA,GAEAA,EAAA,cAGAA,EAAA,gBAEA,EAEA,YAAAA,EAAA,CACA,OAAAA,EAAA,WACA,EAEA,QAAAE,EAAA,CACA,OAAAA,EAAAC,EAAAD,EAAA,YAAA,EAAA,OAAA,EAAA,IACA,EAEA,WAAAA,EAAA,CACA,OAAAA,EAAAC,EAAAD,CAAA,EAAA,OAAA,YAAA,EACA,EACA,EAEA,mBAAAF,EAAA,CACA,OACAA,EAAA,YACAA,EAAA,WAAA,GACAA,EAAA,SAAAA,EAAA,UAEA,EAEA,UAAAI,EAAA,CACA,GAAA,KAAA,MAAA,OAAA,GAAAA,EAAA,OAAA,CACA,IAAAC,EAAA,KAAA,cAAA,KAAA,cAAA,EACA,CAAA,GAAA,EAAA,EAAA,SAAAD,EAAA,OAAA,GACAC,EAAAA,EAAA,EAAA,EAAAA,EAAA,KAAA,MAAA,OAAA,EAAAA,EAAA,EACA,KAAA,WAAA,GAAAA,EAAA,KAAA,MAAAA,CAAA,CAAA,EACA,KAAA,WAAAD,CAAA,GACA,CAAA,GAAA,EAAA,EAAA,SAAAA,EAAA,OAAA,IACAC,EAAAA,EAAA,GAAA,KAAA,MAAA,OAAAA,EAAA,EAAAA,EAAA,EACA,KAAA,WAAA,GAAAA,EAAA,KAAA,MAAAA,CAAA,CAAA,EACA,KAAA,WAAAD,CAAA,EAEA,CACA,EAEA,WAAAA,EAAAC,EAAAL,EAAA,CACA,GACAI,GACAA,EAAA,SAEA,CAAA,OAAA,EAAA,SAAAA,EAAA,OAAA,QAAA,GACAA,EAAA,OAAA,YACA,CAAA,QAAA,EAAA,SAAAA,EAAA,OAAA,WAAA,QAAA,GACA,CAAA,mBAAA,EAAA,SAAAA,EAAA,OAAA,SAAA,GAEA,OACA,MAAAE,EAAA,KAAA,cAAAN,EAAA,EAAA,EACAO,EAAA,OAAA,KAAA,KAAA,aAAA,EAAA,OAAA,EACA,KAAA,mBAAA,CAAA,KAAAP,EAAA,EACA,KAAA,eAAA,EAEA,KAAA,cAAAA,EAAA,EAAA,GACA,KAAA,mBAAA,CAAA,KAAAA,EAAA,EACAQ,EAAA,IAAA,KAAA,cAAAR,EAAA,GAAA,MAAA,IACA,CAAAM,GAAAC,KACA,KAAA,gBAAA,CAAA,KAAAP,EAAA,EACA,KAAA,MAAA,gBAAAA,CAAA,EACAQ,EAAA,IAAA,KAAA,cAAAR,EAAA,GAAA,EAAA,EACA,KAAA,cAAAK,EAEA,EAEA,kBAAAI,EAAA,CACA,KAAA,MAAA,OACA,KAAA,MAAA,KAAA,UAAAA,EAEA,EAEA,gBAAA,CACA,KAAA,cAAA,CAAA,EACA,KAAA,cAAA,IACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,KAAA,EACA,KAAA,eAAA,CACA,EAEA,iBAAA,CACA,KAAA,kBAAA,GAAA,KAAA,eAAA,CACA,CACA,CACA,22HCvWArB,EAAA,CACA,KAAA,aACA,+RCIAA,EAAA,CACA,KAAA,eAEA,WAAA,CAAA,EAEA,MAAA,CACA,MAAA,CAAA,CACA,EAEA,MAAA,CACA,MAAA,KACA,EAEA,SAAA,CACA,SAAA,CACA,OAAA,KAAA,MACA,KAAA,MAAA,OAAA,CAAAsB,EAAAC,IACA,KAAA,IAAAA,EAAA,MAAAD,CAAA,EACA,CAAA,EAEA,CAEA,CACA,CACA,gdCkCAtB,EAAA,CACA,KAAA,WAEA,WAAA,CACA,YAAAwB,EACA,mBAAAC,EACA,iBAAAC,EACA,eAAAC,EACA,WAAAC,EACA,UAAAC,EACA,YAAAC,EACA,YAAAC,EACA,SAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,QAAA,CACA,aAAA,KACA,aAAA,KACA,WAAA,KACA,OAAA,IACA,EACA,OAAA,GACA,cAAA,GACA,UAAA,GACA,eAAA,GACA,MAAA,CAAA,EACA,MAAA,CACA,OAAA,CAAA,CACA,CACA,CACA,EAEA,MAAA,SAAA,CACA,MAAAC,EAAA,KAAA,OAAA,MACAA,EAAA,aACA,KAAA,QAAA,aAAAA,EAAA,YAEAA,EAAA,iBACA,KAAA,QAAA,aAAAA,EAAA,gBAEAA,EAAA,eACA,KAAA,QAAA,WAAAA,EAAA,cAEAA,EAAA,YACA,KAAA,QAAA,OAAA,KAAA,aAAA,KACAC,GAAAA,EAAA,KAAA,SAAAD,EAAA,SAAA,CACA,GAEA,KAAA,OAAA,CACA,EAEA,SAAA,CACA,GAAAvB,EAAA,CACA,yBACA,4BACA,yBACA,kBACA,kBACA,YACA,gBACA,gBACA,aACA,gBACA,WACA,CAAA,EAEA,gBAAA,CACA,MAAAyB,EAAA,KAAA,QAAA,aACAC,EAAA,KAAA,0BAAAD,CAAA,EAAA,OACAE,GAAA,CAAAA,EAAA,WACA,EACA,OAAA,KAAA,YAAAD,CAAA,CACA,EAEA,cAAA,CACA,MAAAD,EAAA,KAAA,QAAA,aACAG,EAAA,KAAA,uBAAAH,CAAA,EAAA,OACAI,GAAAA,EAAA,aAAA,SACA,EACA,OAAA,KAAA,YAAAD,CAAA,CACA,EAEA,YAAA,CACA,MAAAH,EAAA,KAAA,QAAA,aACAK,EAAA,KAAA,cAAA,IAAAL,CAAA,EACA,OAAAK,EACAC,EACAD,EAAA,KACA,IAAAE,GAAA,KAAA,UAAA,IAAAA,CAAA,CAAA,EACA,OAAAC,GAAA,CAAAA,EAAA,MAAA,CACA,EAEA,KAAA,sBAEA,EAEA,gBAAA,CACA,OAAA,KAAA,YAAA,KAAA,eAAA,CACA,EAEA,QAAA,CACA,MAAA,CACA,WAAA,KAAA,QAAA,aACA,eAAA,KAAA,QAAA,aACA,aAAA,KAAA,QAAA,WACA,UAAA,KAAA,QAAA,OAAA,KAAA,QAAA,OAAA,GAAA,IACA,CACA,EAEA,aAAA,CACA,MAAA,CAAA,GAAA,KAAA,MAAA,MAAA,EACA,KAAA,CAAAC,EAAAC,IAAAA,EAAA,OAAAD,EAAA,MAAA,EACA,IAAArB,GAAA,CACA,MAAAuB,EAAA,KAAA,cAAA,IAAAvB,EAAA,cAAA,EACA,MAAA,CACA,KAAAuB,EAAA,WAAA,YAAA,EACA,MAAAA,EAAA,MACA,MAAAvB,EAAA,MACA,CACA,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAV,EAAA,CAAA,qBAAA,gBAAA,UAAA,CAAA,EAEA,YAAAkC,EAAA,CACA,MAAA,CACA,CACA,GAAA,GACA,MAAA,OACA,KAAA,KAAA,GAAA,UAAA,EACA,WAAA,KAAA,GAAA,UAAA,CACA,CACA,EAAA,OAAA,CAAA,GAAAA,CAAA,CAAA,CACA,EAEA,MAAA,QAAA,CACA,KAAA,UAAA,GACA,KAAA,KAAA,EACA,KAAA,mBAAA,EACA,GAAA,CACA,MAAAd,EAAA,CAAA,EACA,OAAA,KAAA,KAAA,MAAA,EAAA,QAAAe,GAAA,CACA,KAAA,OAAAA,CAAA,IACAf,EAAAe,CAAA,EAAA,KAAA,OAAAA,CAAA,EAEA,CAAA,EACA,KAAA,QAAA,KAAA,CAAA,MAAAf,CAAA,CAAA,EACA,MAAAgB,EAAA,MAAA,KAAA,cAAA,KAAA,MAAA,EACA,KAAA,MAAAA,EAAA,KACA,KAAA,MAAAA,EAAA,MACA,KAAA,OAAAA,EAAA,OACA,OAAAC,EAAA,CACA,KAAA,eAAA,GACA,QAAA,MAAAA,CAAA,CACA,CACA,KAAA,UAAA,EACA,EAEA,UAAA,CACA,KAAA,cAAA,GACA,KAAA,MAAA,KAAA,MAAA,GAAA,EACA,MAAAC,EAAA,CACA,GAAA,KAAA,OACA,KAAA,KAAA,IACA,EACA,KAAA,cAAAA,CAAA,EACA,KAAAF,GAAA,CACA,KAAA,MAAA,KAAA,MAAA,OAAAA,EAAA,IAAA,EACA,KAAA,OAAAA,EAAA,QACA,KAAA,cAAA,EACA,CAAA,EACA,MAAAC,GAAA,CACA,KAAA,cAAA,GACA,KAAA,mBAAA,GACA,QAAA,MAAAA,CAAA,CACA,CAAA,CACA,EAEA,YAAAtC,EAAA,CACA,KAAA,QAAA,KAAA,CAAA,KAAA,OAAA,OAAA,CAAA,GAAAA,EAAA,EAAA,CAAA,CAAA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,SAAA,CACA,KAAA,OAAA,CACA,EACA,KAAA,EACA,CACA,EAEA,OAAA,CACA,OAAA,CACA,cAAAwC,EAAA,CACA,MAAAxC,EAAA,KAAA,MAAA,KAAAyC,GAAAA,EAAA,KAAAD,EAAA,OAAA,EACAxC,GACA,KAAA,SAAA,CAAA,OAAAA,EAAA,GAAA,EAAA,KAAA0C,GAAA,CACA,OAAA,OAAA1C,EAAA0C,CAAA,CACA,CAAA,CAEA,CACA,CACA,EAEA,UAAA,CACA,MAAA,CAAA,MAAA,GAAA,KAAA,GAAA,iBAAA,CAAA,UAAA,CACA,CACA"}