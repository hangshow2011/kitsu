{"version":3,"file":"Playlist-DXgerv9w.js","sources":["../../src/components/widgets/ErrorText.vue","../../src/components/pages/Playlist.vue"],"sourcesContent":["<template>\n  <p\n    :class=\"{\n      error: true,\n      'has-text-right': alignRight,\n      'is-hidden': hidden\n    }\"\n  >\n    {{ text }}\n  </p>\n</template>\n\n<script>\nexport default {\n  name: 'error-text',\n  props: {\n    text: {\n      default: '',\n      type: String\n    },\n    hidden: {\n      default: false,\n      type: Boolean\n    },\n    alignRight: {\n      default: false,\n      type: Boolean\n    }\n  }\n}\n</script>\n","<template>\n  <div class=\"playlists page fixed-page dark\">\n    <div class=\"columns\">\n      <div\n        ref=\"playlistList\"\n        :class=\"{\n          'playlist-list-column': true,\n          column: true,\n          toggled: isListToggled\n        }\"\n        v-scroll=\"onPlaylistListScroll\"\n      >\n        <div class=\"flexrow top-section\">\n          <combobox-task-type\n            class=\"flexrow-item selector mb1\"\n            :task-type-list=\"taskTypeList\"\n            :label=\"$t('playlists.filter_task_type')\"\n            :thin=\"true\"\n            v-model=\"taskTypeId\"\n            v-if=\"!isListToggled\"\n          />\n          <span class=\"filler\" v-if=\"!isListToggled\"></span>\n          <button-simple\n            class=\"flexrow-item\"\n            style=\"flex: 0\"\n            :icon=\"isListToggled ? 'right' : 'left'\"\n            is-small\n            @click=\"isListToggled = !isListToggled\"\n          />\n        </div>\n\n        <div class=\"flexrow\">\n          <template v-if=\"!isListToggled\">\n            <combobox\n              class=\"flexrow-item mb2\"\n              :label=\"$t('main.sorted_by')\"\n              :options=\"sortOptions\"\n              locale-key-prefix=\"playlists.fields.\"\n              v-model=\"currentSort\"\n            />\n          </template>\n        </div>\n\n        <button\n          :class=\"{\n            button: true,\n            'is-loading': loading.addPlaylist\n          }\"\n          @click=\"showAddModal\"\n          key=\"new-playlist-button\"\n          v-if=\"\n            (isCurrentUserManager || isCurrentUserSupervisor) && !isListToggled\n          \"\n        >\n          <plus-icon class=\"icon is-small\" />\n          {{ $t('playlists.new_playlist') }}\n        </button>\n\n        <div class=\"playlists\" v-if=\"!loading.playlists\">\n          <router-link\n            :key=\"playlist.id\"\n            :to=\"getPlaylistPath(playlist.id)\"\n            :class=\"{\n              'playlist-item': true,\n              'for-client': playlist.for_client || false,\n              selected: playlist.id === currentPlaylist.id\n            }\"\n            v-for=\"playlist in playlists\"\n          >\n            <div\n              class=\"playlist-item-content\"\n              :style=\"playlistElementStyle(playlist)\"\n            >\n              <div class=\"flexrow\" v-if=\"!isListToggled\">\n                <light-entity-thumbnail\n                  class=\"flerxow-item playlist-thumbnail\"\n                  :preview-file-id=\"playlist.first_preview_file_id\"\n                  type=\"previews\"\n                  width=\"38px\"\n                  height=\"30px\"\n                  max-width=\"38px\"\n                  max-height=\"30px\"\n                  empty-width=\"38px\"\n                  empty-height=\"30px\"\n                  :title=\"playlist.name\"\n                  with-link=\"false\"\n                />\n                <div class=\"flerxow-item ml05\">\n                  {{ playlist.name }}\n                  <span class=\"playlist-date\">\n                    {{ $t('playlists.updated_at') }}\n                    {{ formatDate(playlist.updated_at) }}\n                  </span>\n                </div>\n              </div>\n              <div class=\"has-text-centered\" v-else>\n                <light-entity-thumbnail\n                  :preview-file-id=\"playlist.first_preview_file_id\"\n                  type=\"previews\"\n                  width=\"38px\"\n                  height=\"30px\"\n                  max-width=\"38px\"\n                  max-height=\"30px\"\n                  empty-width=\"38px\"\n                  empty-height=\"30px\"\n                  :title=\"playlist.name\"\n                  v-if=\"playlist.first_preview_file_id\"\n                />\n              </div>\n            </div>\n          </router-link>\n        </div>\n        <spinner class=\"mt2\" v-else />\n        <error-text\n          :text=\"$t('playlists.loading_error')\"\n          v-if=\"errors.playlistLoading\"\n        />\n      </div>\n\n      <div\n        class=\"playlist-column no-selection\"\n        v-if=\"playlists.length > 0 && !currentPlaylist.id && !loading.playlist\"\n      >\n        <div\n          class=\"flexcolumn xyz-in\"\n          xyz=\"fade stagger\"\n          v-if=\"!loading.playlists && !loading.playlistsInit\"\n        >\n          <router-link\n            class=\"recent-playlist flexrow-item flexrow\"\n            :key=\"'recent-playlist-' + playlist.id\"\n            :to=\"getPlaylistPath(playlist.id)\"\n            v-for=\"playlist in lastPlaylists\"\n          >\n            <div class=\"has-text-centered\">\n              <light-entity-thumbnail\n                class=\"playlist-thumbnail\"\n                :preview-file-id=\"playlist.first_preview_file_id\"\n                type=\"previews\"\n                width=\"auto\"\n                height=\"auto\"\n                empty-height=\"252px\"\n              />\n            </div>\n            <div class=\"playlist-infos flexrow\">\n              <div>\n                <h3>{{ playlist.name }}</h3>\n                <span v-if=\"currentSort === 'created_at'\">\n                  {{ $t('playlists.created_at') }}\n                  {{ formatDate(playlist.created_at) }}\n                </span>\n                <span v-else>\n                  {{ $t('playlists.updated_at') }}\n                  {{ formatDate(playlist.updated_at) }}\n                </span>\n              </div>\n              <span class=\"filler\"> </span>\n              <div>\n                <task-type-name\n                  :task-type=\"taskTypeMap.get(playlist.task_type_id)\"\n                  v-if=\"playlist.task_type_id\"\n                />\n              </div>\n            </div>\n          </router-link>\n        </div>\n        <spinner class=\"mt2\" v-else />\n      </div>\n\n      <div\n        class=\"playlist-column no-selection has-text-centered\"\n        v-else-if=\"playlists.length === 0\"\n      >\n        <div v-if=\"!loading.playlists && !loading.playlistsInit\">\n          <p class=\"empty-explaination\">\n            {{ $t('playlists.no_playlist') }}\n          </p>\n          <button\n            :class=\"{\n              big: true,\n              button: true,\n              'is-loading': loading.addPlaylist\n            }\"\n            @click=\"showAddModal\"\n            key=\"new-playlist-button\"\n            v-if=\"isCurrentUserManager || isCurrentUserSupervisor\"\n          >\n            {{ $t('playlists.new_playlist') }}\n          </button>\n        </div>\n        <spinner class=\"mt2\" v-else />\n      </div>\n\n      <div class=\"playlist-column column\" v-else>\n        <playlist-player\n          ref=\"playlist-player\"\n          :playlist=\"currentPlaylist\"\n          :entities=\"currentEntities\"\n          :is-loading=\"loading.playlist\"\n          :is-adding-entity=\"isAddingEntity\"\n          :current-entity-type=\"currentEntityType\"\n          @edit-clicked=\"showEditModal\"\n          @show-add-entities=\"toggleAddEntities\"\n          @preview-changed=\"onPreviewChanged\"\n          @task-type-changed=\"onTaskTypeChanged\"\n          @playlist-deleted=\"$router.push(playlistsPath)\"\n          @remove-entity=\"removeEntity\"\n          @order-change=\"onOrderChange\"\n          @annotation-changed=\"onAnnotationChanged\"\n          @for-client-changed=\"onForClientChanged\"\n          @annotations-refreshed=\"onAnnotationsRefreshed\"\n          @new-entity-dropped=\"onNewEntityDropped\"\n        />\n\n        <div\n          v-if=\"\n            (isCurrentUserManager || isCurrentUserSupervisor) &&\n            isAddingEntity &&\n            !loading.playlist\n          \"\n        >\n          <div class=\"addition-header\">\n            <div class=\"flexrow\">\n              <page-subtitle class=\"flexrow-item\" :text=\"addEntitiesText\" />\n              <span class=\"filler\"></span>\n              <a class=\"close-button\" @click=\"toggleAddEntities\">\n                <x-icon />\n              </a>\n            </div>\n            <div class=\"flexrow\">\n              <search-field\n                class=\"flexrow-item\"\n                ref=\"search-field\"\n                :can-save=\"false\"\n                @change=\"onSearchChange\"\n                :placeholder=\"\n                  isAssetPlaylist ? 'chars mode=wfa' : 'ex: seq01 anim=wfa'\n                \"\n              />\n              <button-simple\n                class=\"flexrow-item\"\n                :title=\"$t('entities.build_filter.title')\"\n                icon=\"filter\"\n                @click=\"modals.isBuildFilterDisplayed = true\"\n              />\n              <button\n                :class=\"{\n                  button: true,\n                  'flexrow-item': true,\n                  'add-sequence': true\n                }\"\n                :disabled=\"isAdditionLoading\"\n                @click=\"addCurrentSelection\"\n                v-if=\"isAddSearchVisible\"\n              >\n                {{ $t('playlists.add_selection') }}\n              </button>\n              <span class=\"filler\"></span>\n              <button\n                :class=\"{\n                  button: true,\n                  'add-sequence': true,\n                  'is-loading': this.loading.addDaily\n                }\"\n                :disabled=\"isAdditionLoading\"\n                @click=\"addDailyPending\"\n                v-if=\"!isAssetPlaylist\"\n              >\n                {{ $t('playlists.build_daily') }}\n              </button>\n              <button\n                :class=\"{\n                  button: true,\n                  'add-sequence': true,\n                  'is-loading': this.loading.addEpisode\n                }\"\n                :disabled=\"isAdditionLoading\"\n                @click=\"addEpisodePending\"\n                v-if=\"isTVShow && !isAssetPlaylist && !isSequencePlaylist\"\n              >\n                {{ $t('playlists.add_episode') }}\n              </button>\n              <button\n                :class=\"{\n                  button: true,\n                  'add-sequence': true,\n                  'is-loading': this.loading.addMovie\n                }\"\n                :disabled=\"isAdditionLoading\"\n                @click=\"addMovie\"\n                v-else-if=\"!isAssetPlaylist\"\n              >\n                {{ $t('playlists.add_movie') }}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"addition-section\"\n          v-if=\"\n            (isCurrentUserManager || isCurrentUserSupervisor) && isAddingEntity\n          \"\n          v-scroll=\"onBodyScroll\"\n        >\n          <spinner\n            class=\"mt2\"\n            key=\"entity-loader\"\n            v-if=\"isShotsLoading || isAssetsLoading\"\n          />\n          <div ref=\"entityListContent\" v-else>\n            <div v-if=\"isAssetPlaylist\">\n              <div\n                :key=\"'asset-type-' + i\"\n                v-for=\"(typeAssets, i) in displayedAssetsByType\"\n              >\n                <h2 class=\"entity-group-title\" v-if=\"typeAssets.length > 0\">\n                  {{ typeAssets[0].asset_type_name }}\n                </h2>\n                <div class=\"addition-entities\">\n                  <div\n                    :class=\"{\n                      'addition-shot': true,\n                      playlisted: currentEntities[asset.id] !== undefined\n                    }\"\n                    :key=\"asset.id\"\n                    @click.prevent=\"addEntityToPlaylist(asset)\"\n                    v-for=\"asset in typeAssets.filter(a => !a.canceled)\"\n                  >\n                    <light-entity-thumbnail\n                      :preview-file-id=\"asset.preview_file_id\"\n                      width=\"150px\"\n                      height=\"100px\"\n                    />\n                    <span class=\"playlisted-shot-name\">{{ asset.name }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div v-else-if=\"isSequencePlaylist\">\n              <div class=\"addition-entities\">\n                <div\n                  :class=\"{\n                    'addition-shot': true,\n                    playlisted: currentEntities[sequence.id] !== undefined\n                  }\"\n                  :key=\"sequence.id\"\n                  @click.prevent=\"addEntityToPlaylist(sequence)\"\n                  v-for=\"sequence in displayedSequences.filter(\n                    s => !s.canceled\n                  )\"\n                >\n                  <light-entity-thumbnail\n                    :preview-file-id=\"sequence.preview_file_id\"\n                    width=\"150px\"\n                    height=\"100px\"\n                  />\n                  <div>\n                    <span\n                      :title=\"getTaskStatus(sequence).name\"\n                      :style=\"{\n                        color: getTaskStatus(sequence).color\n                      }\"\n                      v-if=\"currentPlaylist.task_type_id\"\n                    >\n                      &bullet;\n                    </span>\n                    <span class=\"playlisted-shot-name\">{{\n                      sequence.name\n                    }}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div v-else>\n              <div\n                :key=\"'sequence-' + i\"\n                v-for=\"(sequenceShots, i) in displayedShotsBySequence\"\n              >\n                <h2 class=\"entity-group-title\" v-if=\"sequenceShots.length > 0\">\n                  {{ sequenceShots[0].sequence_name }}\n                  <button\n                    class=\"button\"\n                    @click=\"addSequence(sequenceShots)\"\n                    :key=\"'add-sequence-button-' + sequenceShots[0].sequence_id\"\n                    v-if=\"isCurrentUserManager || isCurrentUserSupervisor\"\n                  >\n                    {{ $t('playlists.add_sequence') }}\n                  </button>\n                </h2>\n                <div class=\"addition-entities\">\n                  <drag\n                    :key=\"shot.id\"\n                    :transfer-data=\"shot.id\"\n                    v-for=\"shot in sequenceShots.filter(s => !s.canceled)\"\n                  >\n                    <div\n                      :class=\"{\n                        'addition-shot': true,\n                        playlisted: currentEntities[shot.id] !== undefined\n                      }\"\n                      :transfer-data=\"shot.id\"\n                      @click.prevent=\"addEntityToPlaylist(shot)\"\n                    >\n                      <light-entity-thumbnail\n                        :preview-file-id=\"shot.preview_file_id\"\n                        width=\"150px\"\n                        height=\"100px\"\n                      />\n                      <div>\n                        <span\n                          :title=\"getTaskStatus(shot).name\"\n                          :style=\"{\n                            color: getTaskStatus(shot).color\n                          }\"\n                          v-if=\"currentPlaylist.task_type_id\"\n                        >\n                          &bullet;\n                        </span>\n                        <span class=\"playlisted-shot-name\">{{\n                          shot.name\n                        }}</span>\n                      </div>\n                    </div>\n                  </drag>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <edit-playlist-modal\n      ref=\"edit-playlist-modal\"\n      :active=\"modals.isEditDisplayed\"\n      :is-loading=\"loading.editPlaylist\"\n      :is-error=\"errors.editPlaylist\"\n      :playlist-to-edit=\"playlistToEdit\"\n      :task-type-id=\"taskTypeId\"\n      @cancel=\"hideEditModal\"\n      @confirm=\"confirmEditPlaylist\"\n    />\n\n    <build-filter-modal\n      ref=\"build-filter-modal\"\n      :active=\"modals.isBuildFilterDisplayed\"\n      :entity-type=\"currentEntityType\"\n      @confirm=\"confirmBuildFilter\"\n      @cancel=\"modals.isBuildFilterDisplayed = false\"\n    />\n  </div>\n</template>\n<script>\nimport Vue from 'vue/dist/vue'\nimport firstBy from 'thenby'\nimport moment from 'moment-timezone'\nimport { mapGetters, mapActions } from 'vuex'\nimport { PlusIcon, XIcon } from 'vue-feather-icons'\n\nimport { DEFAULT_NB_FRAMES_PICTURE } from '@/lib/playlist'\nimport { formatDate } from '@/lib/time'\nimport { getPlaylistPath } from '@/lib/path'\nimport { updateModelFromList, removeModelFromList } from '@/lib/models'\nimport { sortShots } from '@/lib/sorting'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport BuildFilterModal from '@/components/modals/BuildFilterModal'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType'\nimport EditPlaylistModal from '@/components/modals/EditPlaylistModal'\nimport ErrorText from '@/components/widgets/ErrorText'\nimport LightEntityThumbnail from '@/components/widgets/LightEntityThumbnail'\nimport PageSubtitle from '@/components/widgets/PageSubtitle'\nimport PlaylistPlayer from '@/components/pages/playlists/PlaylistPlayer'\nimport SearchField from '@/components/widgets/SearchField'\nimport Spinner from '@/components/widgets/Spinner'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\n\nexport default {\n  name: 'playlist',\n\n  components: {\n    BuildFilterModal,\n    ButtonSimple,\n    Combobox,\n    ComboboxTaskType,\n    ErrorText,\n    EditPlaylistModal,\n    LightEntityThumbnail,\n    PageSubtitle,\n    PlaylistPlayer,\n    PlusIcon,\n    SearchField,\n    Spinner,\n    TaskTypeName,\n    XIcon\n  },\n\n  data() {\n    return {\n      currentPlaylist: { name: '' },\n      currentSort: 'updated_at',\n      currentEntities: {},\n      isAddingEntity: false,\n      isListToggled: false,\n      page: 1,\n      taskTypeId: '',\n      sortedPlaylists: [],\n      sortOptions: ['updated_at', 'created_at', 'name'].map(name => ({\n        label: name,\n        value: name\n      })),\n      playlistToEdit: {\n        name: `${moment().format('YYYY-MM-DD HH:mm:ss')}`,\n        for_client: false\n      },\n      previewFileMap: new Map(),\n      previewFileEntityMap: new Map(),\n      modals: {\n        isBuildFilterDisplayed: false,\n        isDeleteDisplayed: false,\n        isEditDisplayed: false\n      },\n      loading: {\n        addPlaylist: false,\n        addDaily: false,\n        addEpisode: false,\n        addMovie: false,\n        addSequence: false,\n        addWeekly: false,\n        deletePlaylist: false,\n        editPlaylist: false,\n        playlist: false,\n        playlists: false,\n        playlistsInit: true\n      },\n      errors: {\n        addPlaylist: false,\n        editPlaylist: false,\n        deletePlaylist: false,\n        playlistLoading: false\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetMap',\n      'assetSearchText',\n      'currentEpisode',\n      'currentProduction',\n      'displayedAssets',\n      'displayedAssetsByType',\n      'displayedSequences',\n      'displayedShots',\n      'displayedShotsBySequence',\n      'isAssetsLoading',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isShotsLoading',\n      'isTVShow',\n      'productionTaskTypes',\n      'playlistMap',\n      'playlists',\n      'playlistsPath',\n      'sequenceMap',\n      'shotsByEpisode',\n      'shotSearchText',\n      'shotMap',\n      'taskMap',\n      'taskStatusMap',\n      'taskTypeMap'\n    ]),\n\n    isAdditionLoading() {\n      return (\n        this.loading.addSequence ||\n        this.loading.addWeekly ||\n        this.loading.addDaily ||\n        this.loading.addEpisode\n      )\n    },\n\n    isAssetPlaylist() {\n      return this.currentPlaylist.for_entity === 'asset'\n    },\n\n    isSequencePlaylist() {\n      return this.currentPlaylist.for_entity === 'sequence'\n    },\n\n    currentEntityType() {\n      return this.currentPlaylist.for_entity\n    },\n\n    isAddSearchVisible() {\n      return (\n        (this.isAssetPlaylist && this.assetSearchText) ||\n        (!this.isAssetPlaylist && this.shotSearchText)\n      )\n    },\n\n    lastPlaylists() {\n      return this.playlists\n    },\n\n    playlistPlayer() {\n      return this.$refs['playlist-player']\n    },\n\n    addEntitiesText() {\n      if (this.isAssetPlaylist) {\n        return this.$t('playlists.add_assets')\n      } else if (this.isSequencePlaylist) {\n        return this.$t('playlists.add_sequences')\n      } else {\n        return this.$t('playlists.add_shots')\n      }\n    },\n\n    tvShowPageTitle() {\n      const productionName = this.currentProduction\n        ? this.currentProduction.name\n        : ''\n      let episodeName = ''\n      if (this.currentEpisode) {\n        episodeName = this.currentEpisode.name\n        if (this.currentEpisode.id === 'all') episodeName = this.$t('main.all')\n        if (this.currentEpisode.id === 'main') episodeName = 'Main Pack'\n      }\n      return (\n        `${productionName} - ${episodeName}` +\n        ` | ${this.$t('playlists.title')} - Kitsu`\n      )\n    },\n\n    shortPageTitle() {\n      const productionName = this.currentProduction\n        ? this.currentProduction.name\n        : ''\n      return `${productionName} ${this.$t('playlists.title')} - Kitsu`\n    },\n\n    taskTypeList() {\n      return [\n        {\n          id: '',\n          color: '#999',\n          name: this.$t('news.all')\n        }\n      ].concat([...this.productionTaskTypes])\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addNewBuildJob',\n      'pushEntityToPlaylist',\n      'changePlaylistOrder',\n      'changePlaylistPreview',\n      'changePlaylistType',\n      'displayMoreAssets',\n      'displayMoreShots',\n      'editPlaylist',\n      'getPending',\n      'loadMorePlaylists',\n      'loadPlaylist',\n      'loadPlaylists',\n      'loadEntityPreviewFiles',\n      'loadShots',\n      'loadAssets',\n      'markBuildJobAsDone',\n      'newPlaylist',\n      'refreshPlaylist',\n      'removeEntityPreviewFromPlaylist',\n      'removeBuildJobFromList',\n      'resetSequences',\n      'setAssetSearch',\n      'setCurrentEpisode',\n      'setSequenceSearch',\n      'setShotSearch',\n      'updatePreviewAnnotation'\n    ]),\n\n    // Helpers\n\n    formatDate(dateString) {\n      return formatDate(dateString)\n    },\n\n    getPlaylistPath(playlistId, section) {\n      return getPlaylistPath(\n        this.currentProduction.id,\n        this.currentEpisode ? this.currentEpisode.id : null,\n        playlistId,\n        section\n      )\n    },\n\n    playlistElementStyle(playlist) {\n      if (this.isListToggled) {\n        return\n      }\n      const taskType = this.taskTypeMap.get(playlist.task_type_id)\n      const color = taskType?.color || 'transparent'\n      return {\n        'border-left': `4px solid ${color}`\n      }\n    },\n\n    getTaskStatus(entity) {\n      let entityWithTasks = this.shotMap.get(entity.id)\n      if (!entityWithTasks) entityWithTasks = this.assetMap.get(entity.id)\n      if (!entityWithTasks) entityWithTasks = this.sequenceMap.get(entity.id)\n      if (!entityWithTasks) return {}\n\n      const taskId = entity.validations.get(this.currentPlaylist.task_type_id)\n      if (taskId) {\n        const task = this.taskMap.get(taskId)\n        if (!task) return {}\n        const taskStatus = this.taskStatusMap.get(task.task_status_id)\n        return taskStatus\n      } else {\n        return {}\n      }\n    },\n\n    // Data loading\n\n    loadShotsData(callback) {\n      if (\n        this.displayedShots.length === 0 ||\n        this.displayedShots[0].project_id !== this.currentProduction.id ||\n        (this.currentEpisode &&\n          this.displayedShots[0].episode_id !== this.currentEpisode.id)\n      ) {\n        if (\n          this.isTVShow &&\n          this.currentEpisode &&\n          (this.currentEpisode.id === 'main' ||\n            this.currentEpisode.id === 'all')\n        ) {\n          callback()\n        } else {\n          this.loadShots(callback)\n        }\n      } else {\n        callback()\n      }\n    },\n\n    loadAssetsData() {\n      if (this.isTVShow || this.displayedAssets.length === 0) {\n        return this.loadAssets()\n      } else {\n        return Promise.resolve()\n      }\n    },\n\n    loadPlaylistsData(force = false) {\n      const setFirstPlaylist = () => {\n        this.setCurrentPlaylist(() => {\n          if (!this.currentPlaylist || !this.currentPlaylist.id) {\n            this.goFirstPlaylist()\n          }\n          return Promise.resolve()\n        })\n      }\n      if (this.playlists.length === 0 || force) {\n        return this.loadPlaylists({\n          sortBy: this.currentSort,\n          page: this.page,\n          taskTypeId: this.taskTypeId\n        })\n          .then(() => {\n            return setFirstPlaylist()\n          })\n          .catch(err => {\n            console.error(err)\n            this.errors.loadPlaylists = true\n            return Promise.reject(err)\n          })\n      } else {\n        return setFirstPlaylist()\n      }\n    },\n\n    onPlaylistListScroll(event, position) {\n      if (this.$options.silentMore) return\n      const listEl = this.$refs.playlistList\n      const maxHeight = listEl.scrollHeight - listEl.offsetHeight\n      if (maxHeight < position.scrollTop + 20) {\n        this.$options.silentMore = true\n        this.page++\n        this.loadMorePlaylists({\n          sortBy: this.currentSort,\n          page: this.page,\n          taskTypeId: this.taskTypeId\n        })\n          .then(playlists => {\n            setTimeout(() => {\n              this.$options.silentMore = false\n            }, 1000)\n          })\n          .catch(err => {\n            console.error(err)\n            this.$options.silentMore = false\n            this.errors.loadPlaylists = true\n            return Promise.reject(err)\n          })\n      }\n    },\n\n    // Playlist build\n\n    rebuildCurrentEntities() {\n      this.currentEntities = {}\n      const tmpEntities = {}\n      this.previewFileMap = new Map()\n      this.previewFileEntityMap = new Map()\n      if (this.currentPlaylist && this.currentPlaylist.shots) {\n        this.currentPlaylist.shots.forEach(entity => {\n          const playlistEntity = this.convertEntityToPlaylistFormat(entity)\n          if (playlistEntity) {\n            tmpEntities[playlistEntity.id] = playlistEntity\n            this.previewFileEntityMap.set(\n              entity.preview_file_id,\n              playlistEntity\n            )\n            const previewFileGroups = Object.values(\n              playlistEntity.preview_files\n            )\n            previewFileGroups.forEach(previewFiles => {\n              previewFiles.forEach(previewFile => {\n                this.previewFileMap.set(previewFile.id, previewFile)\n              })\n            })\n          }\n        })\n      }\n      this.$nextTick(() => {\n        this.currentEntities = tmpEntities\n      })\n    },\n\n    onAnnotationsRefreshed(preview) {\n      const entity = this.previewFileEntityMap.get(preview.id)\n      const localPreview = this.previewFileMap.get(preview.id)\n      if (entity) {\n        entity.preview_file_annotations = preview.annotations\n      }\n      if (localPreview) {\n        localPreview.annotations = preview.annotations\n      }\n    },\n\n    convertEntityToPlaylistFormat(entityInfo) {\n      let entity\n      if (this.isAssetPlaylist) {\n        entity = this.assetMap.get(entityInfo.id)\n      } else if (this.isSequencePlaylist) {\n        entity = this.sequenceMap.get(entityInfo.id)\n        if (this.currentEpisode) {\n          entity.episode_name = this.currentEpisode.name\n        }\n      } else {\n        entity = this.shotMap.get(entityInfo.id)\n      }\n      if (entity) {\n        const playlistEntity = {\n          id: entityInfo.id,\n          name: entity.name,\n          parent_name:\n            entity.sequence_name ||\n            entity.episode_name ||\n            entity.asset_type_name,\n          preview_files: entityInfo.preview_files,\n          preview_file_id: entityInfo.preview_file_id || entity.preview_file_id,\n          preview_file_extension:\n            entityInfo.preview_file_extension || entity.preview_file_extension,\n          preview_file_revision:\n            entityInfo.preview_file_revision || entity.preview_file_revision,\n          preview_file_width:\n            entityInfo.preview_file_width || entity.preview_file_width,\n          preview_file_height:\n            entityInfo.preview_file_height || entity.preview_file_height,\n          preview_file_duration:\n            entityInfo.preview_file_duration || entity.preview_file_duration,\n          preview_file_task_id:\n            entityInfo.task_id ||\n            entityInfo.preview_file_task_id ||\n            entity.preview_file_task_id,\n          preview_file_annotations:\n            entityInfo.preview_file_annotations ||\n            entity.preview_file_annotations,\n          preview_file_previews:\n            entityInfo.preview_file_previews || entity.preview_file_previews,\n          preview_nb_frames:\n            entityInfo.nb_frames ||\n            entity.nb_frames ||\n            DEFAULT_NB_FRAMES_PICTURE\n        }\n        this.previewFileEntityMap.set(\n          playlistEntity.preview_file_id,\n          playlistEntity\n        )\n        const previews = playlistEntity.preview_file_previews || []\n        previews.forEach(preview => {\n          this.previewFileMap.set(preview.id, preview)\n        })\n        return playlistEntity\n      } else {\n        return null\n      }\n    },\n\n    setCurrentPlaylist(callback) {\n      const playlistId = this.$route.params.playlist_id\n      const playlist = this.playlistMap.get(playlistId)\n      if (playlist) {\n        this.loading.playlist = true\n        this.loadPlaylist({\n          playlist,\n          callback: (err, playlist) => {\n            if (err) console.error(err)\n            this.currentPlaylist = playlist\n            this.rebuildCurrentEntities()\n            this.loading.playlist = false\n            if (callback) callback()\n          }\n        })\n      } else {\n        this.currentPlaylist = {\n          name: ''\n        }\n        this.currentShots = {}\n      }\n    },\n\n    addEntity(entity, scrollRight = true) {\n      return this.loadEntityPreviewFiles(entity)\n        .then(previewFiles => {\n          return this.addToStorePlaylistAndSave(previewFiles, entity)\n        })\n        .then(entity => {\n          this.addToPlayerPlaylist(entity, scrollRight)\n        })\n        .catch(err => console.error(err))\n    },\n\n    addToStorePlaylistAndSave(previewFiles, entity) {\n      return this.pushEntityToPlaylist({\n        playlist: this.currentPlaylist,\n        previewFiles: previewFiles,\n        entity: { ...entity }\n      })\n    },\n\n    addToPlayerPlaylist(entity, scrollRight = true) {\n      const playlistEntity = this.convertEntityToPlaylistFormat(entity)\n      Vue.set(this.currentEntities, playlistEntity.id, playlistEntity)\n      this.playlistPlayer.entityList.push(playlistEntity)\n      if (scrollRight) {\n        this.$nextTick(() => {\n          this.playlistPlayer.scrollToRight()\n        })\n      }\n    },\n\n    addEntityToPlaylist(entity) {\n      if (!this.currentEntities[entity.id]) {\n        this.addEntity(entity).then(this.playlistPlayer.scrollToRight())\n      }\n    },\n\n    onNewEntityDropped(info) {\n      let entity = null\n      if (this.isAssetPlaylist) {\n        entity = this.assetMap.get(info.after)\n      } else if (this.isSequencePlaylist) {\n        entity = this.sequenceMap.get(info.after)\n      } else {\n        entity = this.shotMap.get(info.after)\n      }\n\n      if (entity && !this.currentEntities[entity.id]) {\n        const notScrollRight = false\n        this.addEntity(entity, notScrollRight).then(() => {\n          this.playlistPlayer.onEntityDropped(info)\n        })\n      }\n    },\n\n    removeEntity(entity) {\n      this.removeEntityPreviewFromPlaylist({\n        playlist: this.currentPlaylist,\n        entity,\n        callback: () => {\n          delete this.currentEntities[entity.id]\n        }\n      })\n    },\n\n    clearCurrentPlaylist() {\n      this.currentPlaylist = {}\n      this.currentShots = {}\n    },\n\n    resetPlaylist() {\n      this.clearCurrentPlaylist()\n      this.setCurrentPlaylist()\n    },\n\n    // Addition Helpers\n\n    addCurrentSelection() {\n      this.$options.silent = true\n      const entities = this.isAssetPlaylist\n        ? this.displayedAssets\n        : this.displayedShots\n      this.addEntities([...entities].reverse(), () => {\n        this.$options.silent = false\n      })\n    },\n\n    addSequence(sequenceShots) {\n      if (sequenceShots.length > 0) {\n        const sequenceId = sequenceShots[0].sequence_id\n        const shots = Array.from(this.shotMap.values())\n          .filter(s => s.sequence_id === sequenceId)\n          .sort(firstBy('name'))\n          .reverse()\n        this.$options.silent = true\n        this.addEntities(shots, () => {\n          this.$options.silent = false\n        })\n      }\n    },\n\n    addAllPending() {\n      this.$options.silent = true\n      this.loading.addWeekly = true\n      this.getPending(false).then(shots => {\n        this.addEntities(shots.reverse(), () => {\n          this.loading.addWeekly = false\n          this.$options.silent = false\n        })\n      })\n    },\n\n    addDailyPending() {\n      this.loading.addDaily = true\n      this.$options.silent = true\n      this.getPending(true).then(shots => {\n        this.addEntities(sortShots(shots).reverse(), () => {\n          this.loading.addDaily = false\n          this.$options.silent = false\n        })\n      })\n    },\n\n    addEpisodePending() {\n      this.loading.addEpisode = true\n      this.$options.silent = true\n      let shots = [].concat(...this.shotsByEpisode)\n      shots = sortShots(shots).reverse()\n      this.addEntities(shots, () => {\n        this.loading.addEpisode = false\n        this.$options.silent = false\n      })\n    },\n\n    addMovie() {\n      this.loading.addMovie = true\n      this.$options.silent = true\n      const shots = sortShots(Array.from(this.shotMap.values()))\n      this.addEntities(shots.reverse(), () => {\n        this.loading.addMovie = false\n        this.$options.silent = false\n      })\n    },\n\n    addEntities(entities, callback) {\n      if (entities && entities.length > 0) {\n        const entity = entities.pop()\n        this.addEntity(entity).then(() => {\n          this.addEntities(entities, callback)\n        })\n      } else {\n        callback()\n      }\n    },\n\n    // Save data\n\n    /* When a preview is modified, the change is persisted */\n    onPreviewChanged(entity, previewFileId) {\n      this.changePlaylistPreview({\n        playlist: this.currentPlaylist,\n        entity,\n        previewFileId\n      })\n    },\n\n    onOrderChange(info) {\n      this.changePlaylistOrder({\n        playlist: this.currentPlaylist,\n        info\n      })\n    },\n\n    onAnnotationChanged({ preview, additions, deletions, updates }) {\n      const taskId = preview.task_id\n      this.updatePreviewAnnotation({\n        taskId,\n        preview,\n        additions,\n        deletions,\n        updates\n      })\n    },\n\n    // Search\n\n    confirmBuildFilter(query) {\n      this.modals.isBuildFilterDisplayed = false\n      this.$refs['search-field'].setValue(query)\n      this.onSearchChange(query)\n    },\n\n    onSearchChange(searchQuery) {\n      if (searchQuery.length > 1) {\n        if (this.isAssetPlaylist) {\n          this.setAssetSearch(searchQuery)\n          this.displayMoreAssets()\n        } else if (this.isSequencePlaylist) {\n          this.setSequenceSearch(searchQuery)\n          this.resetSequences()\n        } else {\n          this.setShotSearch(searchQuery)\n          this.displayMoreShots()\n        }\n      } else {\n        if (this.isAssetPlaylist) {\n          this.setAssetSearch('')\n        } else if (this.isSequencePlaylist) {\n          this.setSequenceSearch('')\n        } else {\n          this.setShotSearch('')\n        }\n      }\n    },\n\n    // Playlist list\n\n    onForClientChanged(forClient) {\n      this.editPlaylist({\n        data: {\n          id: this.currentPlaylist.id,\n          for_client: forClient\n        }\n      })\n    },\n\n    runAddPlaylist(form) {\n      const newPlaylist = {\n        name: form.name,\n        production_id: this.currentProduction.id,\n        for_client: form.for_client,\n        for_entity: form.for_entity,\n        is_for_all: form.is_for_all,\n        task_type_id: form.task_type_id\n      }\n      if (this.isTVShow && this.currentEpisode) {\n        newPlaylist.episode_id = this.currentEpisode.id\n      }\n      this.loading.editPlaylist = true\n      this.errors.editPlaylist = false\n      this.newPlaylist(newPlaylist)\n        .then(playlist => {\n          this.$router.push(this.getPlaylistPath(playlist.id))\n          this.loading.editPlaylist = false\n          this.modals.isEditDisplayed = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.editPlaylist = true\n          this.loading.editPlaylist = false\n        })\n    },\n\n    confirmEditPlaylist(form) {\n      if (this.playlistToEdit.id) {\n        form.id = this.currentPlaylist.id\n        this.runEditPlaylist(form)\n      } else {\n        this.runAddPlaylist(form)\n      }\n    },\n\n    runEditPlaylist(form) {\n      this.loading.editPlaylist = true\n      this.errors.editPlaylist = false\n      this.editPlaylist({\n        data: {\n          id: form.id,\n          for_client: form.for_client,\n          for_entity: form.for_entity,\n          name: form.name,\n          task_type_id: form.task_type_id\n        },\n        callback: (err, playlist) => {\n          if (err) {\n            this.errors.editPlaylist = true\n          } else {\n            this.modals.isEditDisplayed = false\n            Object.assign(this.currentPlaylist, playlist)\n          }\n          this.loading.editPlaylist = false\n        }\n      })\n    },\n\n    goFirstPlaylist() {\n      if (this.playlists.length > 0) {\n        this.$router.push({\n          name: 'playlist',\n          params: {\n            production_id: this.currentProduction.id,\n            playlist_id: this.playlists[0].id\n          }\n        })\n      } else {\n        this.$router.push(this.playlistsPath)\n      }\n    },\n\n    // Changes\n\n    toggleAddEntities() {\n      if (this.isAddingEntity) {\n        this.resetPlaylist()\n      }\n      this.isAddingEntity = !this.isAddingEntity\n    },\n\n    onTaskTypeChanged(taskTypeId) {\n      this.changePlaylistType({\n        playlist: this.currentPlaylist,\n        taskTypeId,\n        callback: () => {\n          this.rebuildCurrentEntities()\n        }\n      })\n    },\n\n    onBodyScroll(event, position) {\n      const maxHeight =\n        this.$refs.entityListContent.scrollHeight -\n        this.$refs.entityListContent.offsetHeight\n      if (maxHeight < position.scrollTop) {\n        if (this.isAssetPlaylist) {\n          this.displayMoreAssets()\n        } else {\n          this.displayMoreShots()\n        }\n      }\n    },\n\n    resetSorting() {\n      let order = 1\n      if (['created_at', 'updated_at'].includes(this.currentSort)) {\n        order = -1\n      }\n      this.sortedPlaylists = [...this.playlists].sort(\n        firstBy(this.currentSort, order).thenBy('name')\n      )\n    },\n\n    // Modals\n\n    showAddModal() {\n      this.playlistToEdit = {\n        name: `${moment().format('YYYY-MM-DD HH:mm:ss')}`,\n        for_client: false\n      }\n      this.errors.editPlaylist = false\n      this.modals.isEditDisplayed = true\n    },\n\n    showEditModal() {\n      this.playlistToEdit = this.currentPlaylist\n      this.errors.editPlaylist = false\n      this.modals.isEditDisplayed = true\n    },\n\n    hideEditModal() {\n      this.playlistToEdit = {\n        name: `${moment().format('YYYY-MM-DD HH:mm:ss')}`,\n        for_client: false\n      }\n      this.modals.isEditDisplayed = false\n    },\n\n    // Loading\n\n    reloadAll() {\n      if (!this.loading.playlists) {\n        this.loading.playlists = true\n        this.loadShotsData(() => {\n          this.loadAssetsData()\n            .then(() => {\n              this.page = 1\n              return this.loadPlaylistsData()\n            })\n            .then(() => {\n              this.loading.playlists = false\n              this.resetPlaylist()\n              setTimeout(() => {\n                this.loading.playlistsInit = false\n              }, 300)\n            })\n        })\n      }\n    }\n  },\n\n  mounted() {\n    // Next tick needed to ensure that current production is properly set.\n    this.$nextTick(() => {\n      this.reloadAll()\n      if (localStorage.getItem('playlist-sort')) {\n        this.currentSort = localStorage.getItem('playlist-sort')\n      }\n      this.resetSorting()\n    })\n  },\n\n  watch: {\n    $route() {\n      this.setCurrentPlaylist()\n    },\n\n    currentPlaylist() {\n      if (this.currentPlaylist.shots) {\n        this.$options.silentMore = false\n        this.isAddingEntity =\n          Object.keys(this.currentPlaylist.shots).length === 0\n      } else {\n        this.isAddingEntity = true\n      }\n    },\n\n    currentProduction() {\n      this.$store.commit('LOAD_PLAYLISTS_END', [])\n      this.reloadAll()\n    },\n\n    currentEpisode() {\n      this.$store.commit('LOAD_PLAYLISTS_END', [])\n      if (this.currentEpisode) {\n        this.reloadAll()\n      }\n    },\n\n    playlists() {},\n\n    currentSort() {\n      localStorage.setItem('playlist-sort', this.currentSort)\n      this.loading.playlists = true\n      this.page = 1\n      this.loadPlaylistsData(true).then(() => {\n        this.loading.playlists = false\n      })\n    },\n\n    isListToggled() {\n      this.playlistPlayer?.onWindowResize()\n    },\n\n    taskTypeId() {\n      this.loadPlaylistsData(true)\n    }\n  },\n\n  socket: {\n    events: {\n      'playlist:new'(eventData) {\n        if (!this.playlistMap.get(eventData.playlist_id)) {\n          this.refreshPlaylist(eventData.playlist_id)\n        }\n      },\n\n      'playlist:update'(eventData) {},\n\n      'playlist:delete'(eventData) {\n        this.$store.commit('DELETE_PLAYLIST_END', {\n          id: eventData.playlist_id\n        })\n      },\n\n      'build-job:new'(eventData) {\n        if (eventData.playlist_id === this.currentPlaylist.id) {\n          this.currentPlaylist.build_jobs = [\n            {\n              id: eventData.build_job_id,\n              created_at: eventData.created_at,\n              status: 'running',\n              playlist_id: this.currentPlaylist.id\n            }\n          ].concat(this.currentPlaylist.build_jobs)\n        }\n      },\n\n      'build-job:update'(eventData) {\n        if (eventData.playlist_id === this.currentPlaylist.id) {\n          updateModelFromList(this.currentPlaylist.build_jobs, {\n            id: eventData.build_job_id,\n            status: eventData.status\n          })\n        }\n      },\n\n      'build-job:delete'(eventData) {\n        if (eventData.playlist_id === this.currentPlaylist.id) {\n          this.currentPlaylist.build_jobs = removeModelFromList(\n            this.currentPlaylist.build_jobs,\n            {\n              id: eventData.build_job_id\n            }\n          )\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    if (this.isTVShow) {\n      return { title: this.tvShowPageTitle }\n    } else {\n      return { title: this.shortPageTitle }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .playlist-item {\n    background: $dark-grey-lightmore;\n    box-shadow: 0 0 6px #333;\n    border-color: $dark-grey;\n    color: $white-grey;\n  }\n\n  .playlist-list-column {\n    background: $dark-grey-light;\n    border-color: $dark-grey;\n    box-shadow: 0 0 6px #333;\n  }\n\n  .playlist-column {\n    button,\n    h2.entity-group-title {\n      color: white;\n    }\n  }\n\n  .playlist-column.no-selection {\n    background: $dark-grey-light;\n\n    h2 {\n      color: white;\n    }\n\n    .recent-playlist {\n      position: relative;\n      max-width: 800px;\n      margin: auto;\n      overflow: hidden;\n      background: $dark-grey-lightmore;\n      border: 2px solid $dark-grey;\n      box-shadow: 0 0 6px #333;\n      margin-bottom: 1em;\n\n      h3 {\n        color: white;\n      }\n    }\n  }\n\n  span.thumbnail-picture {\n    box-shadow: 0 0 6px #333;\n  }\n}\n\n.page {\n  display: flex;\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n\n.page .columns {\n  margin-top: 0;\n  margin-bottom: 0;\n  overflow-y: auto;\n  flex: 1;\n}\n\n.playlist-list-column {\n  max-width: 300px;\n  background: #f4f5f9;\n  overflow-y: auto;\n  padding: 1em 1em 1em 2em;\n  border-right: 1px solid #ddd;\n  box-shadow: 0 0 6px #f0f0f0;\n  z-index: 201;\n}\n\n.playlist-item {\n  display: block;\n  background: white;\n  border: 2px solid $white-grey;\n  border-radius: 3px;\n  box-shadow: 0 0 6px #ddd;\n  color: $grey-strong;\n  margin: 0.2em;\n  padding: 0.4em;\n  transition: all 0.2s ease;\n\n  &.for-client {\n    background: $purple-grey;\n  }\n\n  &:hover {\n    transform: scale(1.02);\n    border: 2px solid var(--background-selectable);\n  }\n}\n\n.playlist-item.selected {\n  border: 2px solid var(--background-selected);\n  transform: scale(1.02);\n}\n\n.playlist-list-column .button {\n  width: 100%;\n}\n\n.addition-entities {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  flex-direction: row;\n  max-width: 100%;\n  padding-left: 1em;\n}\n\n.addition-shot {\n  padding: 0;\n  cursor: pointer;\n  text-align: center;\n  margin: 0;\n  opacity: 0.5;\n  width: 170px;\n  display: flex;\n  flex-direction: column;\n\n  a {\n    margin: auto;\n  }\n\n  &:hover {\n    opacity: 0.75;\n  }\n\n  &.playlisted {\n    opacity: 1;\n\n    img,\n    span.thumbnail-picture {\n      border: 2px solid $purple;\n      border-radius: 5px;\n    }\n  }\n}\n\nspan.thumbnail-picture {\n  box-shadow: 0 0 6px #ddd;\n  margin-bottom: 2px;\n}\n\n.add-sequence {\n  margin-bottom: 0.4em;\n}\n\n.playlist-column {\n  overflow: hidden;\n  flex: 1;\n  background: $dark-grey-2;\n}\n\n.playlisted-shot-name {\n  padding-right: 20px;\n  color: var(--text);\n}\n\n.playlist-date {\n  display: block;\n  color: $grey;\n  font-size: 0.8em;\n}\n\n.entity-group-title {\n  border-bottom: 1px solid $light-grey-light;\n  color: $grey;\n  margin: 1em;\n  padding-bottom: 0.2em;\n  text-transform: uppercase;\n\n  button {\n    color: $grey;\n    padding: 0.3em 0.8em;\n    font-size: 0.7em;\n  }\n}\n\n.addition-header {\n  background: var(--background);\n  border-top: 3px solid $dark-grey;\n  height: 110px;\n  padding: 0 1em;\n\n  .subtitle {\n    margin-top: 1em;\n  }\n}\n\n.addition-section {\n  background: var(--background);\n  overflow-y: auto;\n  height: calc(100% - 420px);\n}\n\nh2 {\n  font-weight: bold;\n  text-transform: uppercase;\n  color: $grey;\n}\n\n.toggled {\n  padding: 1em 0.1em;\n  max-width: 50px;\n\n  .flexrow {\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 1em;\n  }\n\n  .playlist-item {\n    padding: 0;\n  }\n  .playlist-item-content {\n    height: 30px;\n    padding: 0;\n    border: 0;\n  }\n}\n\n.playlist-column.no-selection {\n  padding: 2em;\n  overflow: auto;\n  background: #f4f5f9;\n\n  h2 {\n    font-size: 2em;\n    margin-top: 1.5em;\n    margin-bottom: 0.3em;\n    border-bottom: 0;\n\n    &:first-child {\n      margin-top: 0.5em;\n    }\n  }\n\n  .recent-playlist {\n    height: 320px;\n    background: white;\n    border: 2px solid $light-grey-light;\n    box-shadow: 0 0 6px #ddd;\n    border-radius: 1em;\n    padding: 0;\n    width: 100%;\n    transition: all 0.6s ease;\n\n    img {\n      border-top-left-radius: 10px;\n      border-top-right-radius: 10px;\n    }\n\n    &:hover {\n      transform: scale(1.03);\n    }\n\n    .playlist-infos {\n      background-color: rgb(0, 0, 0, 0.2);\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      left: 0;\n      align-items: middle;\n      padding: 0.3em 1.2em;\n      height: 65px;\n      padding-top: 0.3em;\n    }\n\n    h3 {\n      color: $grey-strong;\n      font-size: 1.4em;\n      font-weight: bold;\n    }\n    span {\n      display: block;\n    }\n  }\n\n  .empty-explaination {\n    color: $white;\n    margin-top: 4em;\n    font-size: 1.5em;\n  }\n\n  .big {\n    font-size: 1.2em;\n    margin-top: 1em;\n    padding: 0.5em 1em;\n    height: auto;\n  }\n}\n\n.top-section {\n  align-items: flex-start;\n}\n\n.thumbnail-picture,\n.playlist-thumbnail {\n  border-radius: 4px;\n}\n\n.playlist-item-content {\n  padding-left: 0.5em;\n  overflow-wrap: anywhere;\n\n  .flexrow {\n    align-items: flex-start;\n    .thumbnail-picture {\n      margin-top: 3px;\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","BuildFilterModal","ButtonSimple","Combobox","ComboboxTaskType","ErrorText","EditPlaylistModal","LightEntityThumbnail","PageSubtitle","PlaylistPlayer","PlusIcon","SearchField","Spinner","TaskTypeName","XIcon","name","moment","mapGetters","productionName","episodeName","mapActions","dateString","formatDate","playlistId","section","getPlaylistPath","playlist","taskType","entity","entityWithTasks","taskId","task","callback","force","setFirstPlaylist","err","event","position","listEl","playlists","tmpEntities","playlistEntity","previewFiles","previewFile","preview","localPreview","entityInfo","DEFAULT_NB_FRAMES_PICTURE","scrollRight","Vue","info","entities","sequenceShots","sequenceId","shots","s","firstBy","sortShots","previewFileId","additions","deletions","updates","query","searchQuery","forClient","form","newPlaylist","taskTypeId","order","_a","eventData","updateModelFromList","removeModelFromList"],"mappings":"+NAaA,MAAAA,EAAA,CACA,KAAA,aACA,MAAA,CACA,KAAA,CACA,QAAA,GACA,KAAA,MACA,EACA,OAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,WAAA,CACA,QAAA,GACA,KAAA,OACA,CACA,CACA,sNCkcAA,EAAA,CACA,KAAA,WAEA,WAAA,CACA,iBAAAC,EACA,aAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,UAAAC,EACA,kBAAAC,EACA,qBAAAC,EACA,aAAAC,EACA,eAAAC,EACA,SAAAC,EACA,YAAAC,EACA,QAAAC,EACA,aAAAC,EACA,MAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,gBAAA,CAAA,KAAA,EAAA,EACA,YAAA,aACA,gBAAA,CAAA,EACA,eAAA,GACA,cAAA,GACA,KAAA,EACA,WAAA,GACA,gBAAA,CAAA,EACA,YAAA,CAAA,aAAA,aAAA,MAAA,EAAA,IAAAC,IAAA,CACA,MAAAA,EACA,MAAAA,CACA,EAAA,EACA,eAAA,CACA,KAAA,GAAAC,EAAA,EAAA,OAAA,qBAAA,CAAA,GACA,WAAA,EACA,EACA,eAAA,IAAA,IACA,qBAAA,IAAA,IACA,OAAA,CACA,uBAAA,GACA,kBAAA,GACA,gBAAA,EACA,EACA,QAAA,CACA,YAAA,GACA,SAAA,GACA,WAAA,GACA,SAAA,GACA,YAAA,GACA,UAAA,GACA,eAAA,GACA,aAAA,GACA,SAAA,GACA,UAAA,GACA,cAAA,EACA,EACA,OAAA,CACA,YAAA,GACA,aAAA,GACA,eAAA,GACA,gBAAA,EACA,CACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,WACA,kBACA,iBACA,oBACA,kBACA,wBACA,qBACA,iBACA,2BACA,kBACA,uBACA,0BACA,iBACA,WACA,sBACA,cACA,YACA,gBACA,cACA,iBACA,iBACA,UACA,UACA,gBACA,aACA,CAAA,EAEA,mBAAA,CACA,OACA,KAAA,QAAA,aACA,KAAA,QAAA,WACA,KAAA,QAAA,UACA,KAAA,QAAA,UAEA,EAEA,iBAAA,CACA,OAAA,KAAA,gBAAA,aAAA,OACA,EAEA,oBAAA,CACA,OAAA,KAAA,gBAAA,aAAA,UACA,EAEA,mBAAA,CACA,OAAA,KAAA,gBAAA,UACA,EAEA,oBAAA,CACA,OACA,KAAA,iBAAA,KAAA,iBACA,CAAA,KAAA,iBAAA,KAAA,cAEA,EAEA,eAAA,CACA,OAAA,KAAA,SACA,EAEA,gBAAA,CACA,OAAA,KAAA,MAAA,iBAAA,CACA,EAEA,iBAAA,CACA,OAAA,KAAA,gBACA,KAAA,GAAA,sBAAA,EACA,KAAA,mBACA,KAAA,GAAA,yBAAA,EAEA,KAAA,GAAA,qBAAA,CAEA,EAEA,iBAAA,CACA,MAAAC,EAAA,KAAA,kBACA,KAAA,kBAAA,KACA,GACA,IAAAC,EAAA,GACA,OAAA,KAAA,iBACAA,EAAA,KAAA,eAAA,KACA,KAAA,eAAA,KAAA,QAAAA,EAAA,KAAA,GAAA,UAAA,GACA,KAAA,eAAA,KAAA,SAAAA,EAAA,cAGA,GAAAD,CAAA,MAAAC,CAAA,MACA,KAAA,GAAA,iBAAA,CAAA,UAEA,EAEA,gBAAA,CAIA,MAAA,GAHA,KAAA,kBACA,KAAA,kBAAA,KACA,EACA,IAAA,KAAA,GAAA,iBAAA,CAAA,UACA,EAEA,cAAA,CACA,MAAA,CACA,CACA,GAAA,GACA,MAAA,OACA,KAAA,KAAA,GAAA,UAAA,CACA,CACA,EAAA,OAAA,CAAA,GAAA,KAAA,mBAAA,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAC,EAAA,CACA,iBACA,uBACA,sBACA,wBACA,qBACA,oBACA,mBACA,eACA,aACA,oBACA,eACA,gBACA,yBACA,YACA,aACA,qBACA,cACA,kBACA,kCACA,yBACA,iBACA,iBACA,oBACA,oBACA,gBACA,yBACA,CAAA,EAIA,WAAAC,EAAA,CACA,OAAAC,EAAAD,CAAA,CACA,EAEA,gBAAAE,EAAAC,EAAA,CACA,OAAAC,EACA,KAAA,kBAAA,GACA,KAAA,eAAA,KAAA,eAAA,GAAA,KACAF,EACAC,CACA,CACA,EAEA,qBAAAE,EAAA,CACA,GAAA,KAAA,cACA,OAEA,MAAAC,EAAA,KAAA,YAAA,IAAAD,EAAA,YAAA,EAEA,MAAA,CACA,cAAA,cAFAC,GAAA,YAAAA,EAAA,QAAA,aAEA,EACA,CACA,EAEA,cAAAC,EAAA,CACA,IAAAC,EAAA,KAAA,QAAA,IAAAD,EAAA,EAAA,EAGA,GAFAC,IAAAA,EAAA,KAAA,SAAA,IAAAD,EAAA,EAAA,GACAC,IAAAA,EAAA,KAAA,YAAA,IAAAD,EAAA,EAAA,GACA,CAAAC,EAAA,MAAA,CAAA,EAEA,MAAAC,EAAAF,EAAA,YAAA,IAAA,KAAA,gBAAA,YAAA,EACA,GAAAE,EAAA,CACA,MAAAC,EAAA,KAAA,QAAA,IAAAD,CAAA,EACA,OAAAC,EACA,KAAA,cAAA,IAAAA,EAAA,cAAA,EADA,CAAA,CAGA,KACA,OAAA,CAAA,CAEA,EAIA,cAAAC,EAAA,CAEA,KAAA,eAAA,SAAA,GACA,KAAA,eAAA,CAAA,EAAA,aAAA,KAAA,kBAAA,IACA,KAAA,gBACA,KAAA,eAAA,CAAA,EAAA,aAAA,KAAA,eAAA,GAGA,KAAA,UACA,KAAA,iBACA,KAAA,eAAA,KAAA,QACA,KAAA,eAAA,KAAA,OAEAA,EAAA,EAEA,KAAA,UAAAA,CAAA,EAGAA,EAAA,CAEA,EAEA,gBAAA,CACA,OAAA,KAAA,UAAA,KAAA,gBAAA,SAAA,EACA,KAAA,WAAA,EAEA,QAAA,QAAA,CAEA,EAEA,kBAAAC,EAAA,GAAA,CACA,MAAAC,EAAA,IAAA,CACA,KAAA,mBAAA,MACA,CAAA,KAAA,iBAAA,CAAA,KAAA,gBAAA,KACA,KAAA,gBAAA,EAEA,QAAA,QAAA,EACA,CACA,EACA,OAAA,KAAA,UAAA,SAAA,GAAAD,EACA,KAAA,cAAA,CACA,OAAA,KAAA,YACA,KAAA,KAAA,KACA,WAAA,KAAA,UACA,CAAA,EACA,KAAA,IACAC,EAAA,CACA,EACA,MAAAC,IACA,QAAA,MAAAA,CAAA,EACA,KAAA,OAAA,cAAA,GACA,QAAA,OAAAA,CAAA,EACA,EAEAD,EAAA,CAEA,EAEA,qBAAAE,EAAAC,EAAA,CACA,GAAA,KAAA,SAAA,WAAA,OACA,MAAAC,EAAA,KAAA,MAAA,aACAA,EAAA,aAAAA,EAAA,aACAD,EAAA,UAAA,KACA,KAAA,SAAA,WAAA,GACA,KAAA,OACA,KAAA,kBAAA,CACA,OAAA,KAAA,YACA,KAAA,KAAA,KACA,WAAA,KAAA,UACA,CAAA,EACA,KAAAE,GAAA,CACA,WAAA,IAAA,CACA,KAAA,SAAA,WAAA,EACA,EAAA,GAAA,CACA,CAAA,EACA,MAAAJ,IACA,QAAA,MAAAA,CAAA,EACA,KAAA,SAAA,WAAA,GACA,KAAA,OAAA,cAAA,GACA,QAAA,OAAAA,CAAA,EACA,EAEA,EAIA,wBAAA,CACA,KAAA,gBAAA,CAAA,EACA,MAAAK,EAAA,CAAA,EACA,KAAA,eAAA,IAAA,IACA,KAAA,qBAAA,IAAA,IACA,KAAA,iBAAA,KAAA,gBAAA,OACA,KAAA,gBAAA,MAAA,QAAAZ,GAAA,CACA,MAAAa,EAAA,KAAA,8BAAAb,CAAA,EACAa,IACAD,EAAAC,EAAA,EAAA,EAAAA,EACA,KAAA,qBAAA,IACAb,EAAA,gBACAa,CACA,EACA,OAAA,OACAA,EAAA,aACA,EACA,QAAAC,GAAA,CACAA,EAAA,QAAAC,GAAA,CACA,KAAA,eAAA,IAAAA,EAAA,GAAAA,CAAA,CACA,CAAA,CACA,CAAA,EAEA,CAAA,EAEA,KAAA,UAAA,IAAA,CACA,KAAA,gBAAAH,CACA,CAAA,CACA,EAEA,uBAAAI,EAAA,CACA,MAAAhB,EAAA,KAAA,qBAAA,IAAAgB,EAAA,EAAA,EACAC,EAAA,KAAA,eAAA,IAAAD,EAAA,EAAA,EACAhB,IACAA,EAAA,yBAAAgB,EAAA,aAEAC,IACAA,EAAA,YAAAD,EAAA,YAEA,EAEA,8BAAAE,EAAA,CACA,IAAAlB,EAWA,GAVA,KAAA,gBACAA,EAAA,KAAA,SAAA,IAAAkB,EAAA,EAAA,EACA,KAAA,oBACAlB,EAAA,KAAA,YAAA,IAAAkB,EAAA,EAAA,EACA,KAAA,iBACAlB,EAAA,aAAA,KAAA,eAAA,OAGAA,EAAA,KAAA,QAAA,IAAAkB,EAAA,EAAA,EAEAlB,EAAA,CACA,MAAAa,EAAA,CACA,GAAAK,EAAA,GACA,KAAAlB,EAAA,KACA,YACAA,EAAA,eACAA,EAAA,cACAA,EAAA,gBACA,cAAAkB,EAAA,cACA,gBAAAA,EAAA,iBAAAlB,EAAA,gBACA,uBACAkB,EAAA,wBAAAlB,EAAA,uBACA,sBACAkB,EAAA,uBAAAlB,EAAA,sBACA,mBACAkB,EAAA,oBAAAlB,EAAA,mBACA,oBACAkB,EAAA,qBAAAlB,EAAA,oBACA,sBACAkB,EAAA,uBAAAlB,EAAA,sBACA,qBACAkB,EAAA,SACAA,EAAA,sBACAlB,EAAA,qBACA,yBACAkB,EAAA,0BACAlB,EAAA,yBACA,sBACAkB,EAAA,uBAAAlB,EAAA,sBACA,kBACAkB,EAAA,WACAlB,EAAA,WACAmB,CACA,EACA,YAAA,qBAAA,IACAN,EAAA,gBACAA,CACA,GACAA,EAAA,uBAAA,CAAA,GACA,QAAAG,GAAA,CACA,KAAA,eAAA,IAAAA,EAAA,GAAAA,CAAA,CACA,CAAA,EACAH,CACA,KACA,QAAA,IAEA,EAEA,mBAAAT,EAAA,CACA,MAAAT,EAAA,KAAA,OAAA,OAAA,YACAG,EAAA,KAAA,YAAA,IAAAH,CAAA,EACAG,GACA,KAAA,QAAA,SAAA,GACA,KAAA,aAAA,CACA,SAAAA,EACA,SAAA,CAAAS,EAAAT,IAAA,CACAS,GAAA,QAAA,MAAAA,CAAA,EACA,KAAA,gBAAAT,EACA,KAAA,uBAAA,EACA,KAAA,QAAA,SAAA,GACAM,GAAAA,EAAA,CACA,CACA,CAAA,IAEA,KAAA,gBAAA,CACA,KAAA,EACA,EACA,KAAA,aAAA,CAAA,EAEA,EAEA,UAAAJ,EAAAoB,EAAA,GAAA,CACA,OAAA,KAAA,uBAAApB,CAAA,EACA,KAAAc,GACA,KAAA,0BAAAA,EAAAd,CAAA,CACA,EACA,KAAAA,GAAA,CACA,KAAA,oBAAAA,EAAAoB,CAAA,CACA,CAAA,EACA,MAAAb,GAAA,QAAA,MAAAA,CAAA,CAAA,CACA,EAEA,0BAAAO,EAAAd,EAAA,CACA,OAAA,KAAA,qBAAA,CACA,SAAA,KAAA,gBACA,aAAAc,EACA,OAAA,CAAA,GAAAd,CAAA,CACA,CAAA,CACA,EAEA,oBAAAA,EAAAoB,EAAA,GAAA,CACA,MAAAP,EAAA,KAAA,8BAAAb,CAAA,EACAqB,EAAA,IAAA,KAAA,gBAAAR,EAAA,GAAAA,CAAA,EACA,KAAA,eAAA,WAAA,KAAAA,CAAA,EACAO,GACA,KAAA,UAAA,IAAA,CACA,KAAA,eAAA,cAAA,CACA,CAAA,CAEA,EAEA,oBAAApB,EAAA,CACA,KAAA,gBAAAA,EAAA,EAAA,GACA,KAAA,UAAAA,CAAA,EAAA,KAAA,KAAA,eAAA,eAAA,CAEA,EAEA,mBAAAsB,EAAA,CACA,IAAAtB,EAAA,KACA,KAAA,gBACAA,EAAA,KAAA,SAAA,IAAAsB,EAAA,KAAA,EACA,KAAA,mBACAtB,EAAA,KAAA,YAAA,IAAAsB,EAAA,KAAA,EAEAtB,EAAA,KAAA,QAAA,IAAAsB,EAAA,KAAA,EAGAtB,GAAA,CAAA,KAAA,gBAAAA,EAAA,EAAA,GAEA,KAAA,UAAAA,EAAA,EAAA,EAAA,KAAA,IAAA,CACA,KAAA,eAAA,gBAAAsB,CAAA,CACA,CAAA,CAEA,EAEA,aAAAtB,EAAA,CACA,KAAA,gCAAA,CACA,SAAA,KAAA,gBACA,OAAAA,EACA,SAAA,IAAA,CACA,OAAA,KAAA,gBAAAA,EAAA,EAAA,CACA,CACA,CAAA,CACA,EAEA,sBAAA,CACA,KAAA,gBAAA,CAAA,EACA,KAAA,aAAA,CAAA,CACA,EAEA,eAAA,CACA,KAAA,qBAAA,EACA,KAAA,mBAAA,CACA,EAIA,qBAAA,CACA,KAAA,SAAA,OAAA,GACA,MAAAuB,EAAA,KAAA,gBACA,KAAA,gBACA,KAAA,eACA,KAAA,YAAA,CAAA,GAAAA,CAAA,EAAA,QAAA,EAAA,IAAA,CACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,EAEA,YAAAC,EAAA,CACA,GAAAA,EAAA,OAAA,EAAA,CACA,MAAAC,EAAAD,EAAA,CAAA,EAAA,YACAE,EAAA,MAAA,KAAA,KAAA,QAAA,QAAA,EACA,OAAAC,GAAAA,EAAA,cAAAF,CAAA,EACA,KAAAG,EAAA,MAAA,CAAA,EACA,QAAA,EACA,KAAA,SAAA,OAAA,GACA,KAAA,YAAAF,EAAA,IAAA,CACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,CACA,EAEA,eAAA,CACA,KAAA,SAAA,OAAA,GACA,KAAA,QAAA,UAAA,GACA,KAAA,WAAA,EAAA,EAAA,KAAAA,GAAA,CACA,KAAA,YAAAA,EAAA,QAAA,EAAA,IAAA,CACA,KAAA,QAAA,UAAA,GACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,CAAA,CACA,EAEA,iBAAA,CACA,KAAA,QAAA,SAAA,GACA,KAAA,SAAA,OAAA,GACA,KAAA,WAAA,EAAA,EAAA,KAAAA,GAAA,CACA,KAAA,YAAAG,EAAAH,CAAA,EAAA,QAAA,EAAA,IAAA,CACA,KAAA,QAAA,SAAA,GACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,CAAA,CACA,EAEA,mBAAA,CACA,KAAA,QAAA,WAAA,GACA,KAAA,SAAA,OAAA,GACA,IAAAA,EAAA,CAAA,EAAA,OAAA,GAAA,KAAA,cAAA,EACAA,EAAAG,EAAAH,CAAA,EAAA,QAAA,EACA,KAAA,YAAAA,EAAA,IAAA,CACA,KAAA,QAAA,WAAA,GACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,EAEA,UAAA,CACA,KAAA,QAAA,SAAA,GACA,KAAA,SAAA,OAAA,GACA,MAAAA,EAAAG,EAAA,MAAA,KAAA,KAAA,QAAA,OAAA,CAAA,CAAA,EACA,KAAA,YAAAH,EAAA,QAAA,EAAA,IAAA,CACA,KAAA,QAAA,SAAA,GACA,KAAA,SAAA,OAAA,EACA,CAAA,CACA,EAEA,YAAAH,EAAAnB,EAAA,CACA,GAAAmB,GAAAA,EAAA,OAAA,EAAA,CACA,MAAAvB,EAAAuB,EAAA,IAAA,EACA,KAAA,UAAAvB,CAAA,EAAA,KAAA,IAAA,CACA,KAAA,YAAAuB,EAAAnB,CAAA,CACA,CAAA,CACA,MACAA,EAAA,CAEA,EAKA,iBAAAJ,EAAA8B,EAAA,CACA,KAAA,sBAAA,CACA,SAAA,KAAA,gBACA,OAAA9B,EACA,cAAA8B,CACA,CAAA,CACA,EAEA,cAAAR,EAAA,CACA,KAAA,oBAAA,CACA,SAAA,KAAA,gBACA,KAAAA,CACA,CAAA,CACA,EAEA,oBAAA,CAAA,QAAAN,EAAA,UAAAe,EAAA,UAAAC,EAAA,QAAAC,CAAA,EAAA,CACA,MAAA/B,EAAAc,EAAA,QACA,KAAA,wBAAA,CACA,OAAAd,EACA,QAAAc,EACA,UAAAe,EACA,UAAAC,EACA,QAAAC,CACA,CAAA,CACA,EAIA,mBAAAC,EAAA,CACA,KAAA,OAAA,uBAAA,GACA,KAAA,MAAA,cAAA,EAAA,SAAAA,CAAA,EACA,KAAA,eAAAA,CAAA,CACA,EAEA,eAAAC,EAAA,CACAA,EAAA,OAAA,EACA,KAAA,iBACA,KAAA,eAAAA,CAAA,EACA,KAAA,kBAAA,GACA,KAAA,oBACA,KAAA,kBAAAA,CAAA,EACA,KAAA,eAAA,IAEA,KAAA,cAAAA,CAAA,EACA,KAAA,iBAAA,GAGA,KAAA,gBACA,KAAA,eAAA,EAAA,EACA,KAAA,mBACA,KAAA,kBAAA,EAAA,EAEA,KAAA,cAAA,EAAA,CAGA,EAIA,mBAAAC,EAAA,CACA,KAAA,aAAA,CACA,KAAA,CACA,GAAA,KAAA,gBAAA,GACA,WAAAA,CACA,CACA,CAAA,CACA,EAEA,eAAAC,EAAA,CACA,MAAAC,EAAA,CACA,KAAAD,EAAA,KACA,cAAA,KAAA,kBAAA,GACA,WAAAA,EAAA,WACA,WAAAA,EAAA,WACA,WAAAA,EAAA,WACA,aAAAA,EAAA,YACA,EACA,KAAA,UAAA,KAAA,iBACAC,EAAA,WAAA,KAAA,eAAA,IAEA,KAAA,QAAA,aAAA,GACA,KAAA,OAAA,aAAA,GACA,KAAA,YAAAA,CAAA,EACA,KAAAxC,GAAA,CACA,KAAA,QAAA,KAAA,KAAA,gBAAAA,EAAA,EAAA,CAAA,EACA,KAAA,QAAA,aAAA,GACA,KAAA,OAAA,gBAAA,EACA,CAAA,EACA,MAAAS,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,OAAA,aAAA,GACA,KAAA,QAAA,aAAA,EACA,CAAA,CACA,EAEA,oBAAA8B,EAAA,CACA,KAAA,eAAA,IACAA,EAAA,GAAA,KAAA,gBAAA,GACA,KAAA,gBAAAA,CAAA,GAEA,KAAA,eAAAA,CAAA,CAEA,EAEA,gBAAAA,EAAA,CACA,KAAA,QAAA,aAAA,GACA,KAAA,OAAA,aAAA,GACA,KAAA,aAAA,CACA,KAAA,CACA,GAAAA,EAAA,GACA,WAAAA,EAAA,WACA,WAAAA,EAAA,WACA,KAAAA,EAAA,KACA,aAAAA,EAAA,YACA,EACA,SAAA,CAAA9B,EAAAT,IAAA,CACAS,EACA,KAAA,OAAA,aAAA,IAEA,KAAA,OAAA,gBAAA,GACA,OAAA,OAAA,KAAA,gBAAAT,CAAA,GAEA,KAAA,QAAA,aAAA,EACA,CACA,CAAA,CACA,EAEA,iBAAA,CACA,KAAA,UAAA,OAAA,EACA,KAAA,QAAA,KAAA,CACA,KAAA,WACA,OAAA,CACA,cAAA,KAAA,kBAAA,GACA,YAAA,KAAA,UAAA,CAAA,EAAA,EACA,CACA,CAAA,EAEA,KAAA,QAAA,KAAA,KAAA,aAAA,CAEA,EAIA,mBAAA,CACA,KAAA,gBACA,KAAA,cAAA,EAEA,KAAA,eAAA,CAAA,KAAA,cACA,EAEA,kBAAAyC,EAAA,CACA,KAAA,mBAAA,CACA,SAAA,KAAA,gBACA,WAAAA,EACA,SAAA,IAAA,CACA,KAAA,uBAAA,CACA,CACA,CAAA,CACA,EAEA,aAAA/B,EAAAC,EAAA,CAEA,KAAA,MAAA,kBAAA,aACA,KAAA,MAAA,kBAAA,aACAA,EAAA,YACA,KAAA,gBACA,KAAA,kBAAA,EAEA,KAAA,iBAAA,EAGA,EAEA,cAAA,CACA,IAAA+B,EAAA,EACA,CAAA,aAAA,YAAA,EAAA,SAAA,KAAA,WAAA,IACAA,EAAA,IAEA,KAAA,gBAAA,CAAA,GAAA,KAAA,SAAA,EAAA,KACAZ,EAAA,KAAA,YAAAY,CAAA,EAAA,OAAA,MAAA,CACA,CACA,EAIA,cAAA,CACA,KAAA,eAAA,CACA,KAAA,GAAApD,EAAA,EAAA,OAAA,qBAAA,CAAA,GACA,WAAA,EACA,EACA,KAAA,OAAA,aAAA,GACA,KAAA,OAAA,gBAAA,EACA,EAEA,eAAA,CACA,KAAA,eAAA,KAAA,gBACA,KAAA,OAAA,aAAA,GACA,KAAA,OAAA,gBAAA,EACA,EAEA,eAAA,CACA,KAAA,eAAA,CACA,KAAA,GAAAA,EAAA,EAAA,OAAA,qBAAA,CAAA,GACA,WAAA,EACA,EACA,KAAA,OAAA,gBAAA,EACA,EAIA,WAAA,CACA,KAAA,QAAA,YACA,KAAA,QAAA,UAAA,GACA,KAAA,cAAA,IAAA,CACA,KAAA,eAAA,EACA,KAAA,KACA,KAAA,KAAA,EACA,KAAA,kBAAA,EACA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,UAAA,GACA,KAAA,cAAA,EACA,WAAA,IAAA,CACA,KAAA,QAAA,cAAA,EACA,EAAA,GAAA,CACA,CAAA,CACA,CAAA,EAEA,CACA,EAEA,SAAA,CAEA,KAAA,UAAA,IAAA,CACA,KAAA,UAAA,EACA,aAAA,QAAA,eAAA,IACA,KAAA,YAAA,aAAA,QAAA,eAAA,GAEA,KAAA,aAAA,CACA,CAAA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,mBAAA,CACA,EAEA,iBAAA,CACA,KAAA,gBAAA,OACA,KAAA,SAAA,WAAA,GACA,KAAA,eACA,OAAA,KAAA,KAAA,gBAAA,KAAA,EAAA,SAAA,GAEA,KAAA,eAAA,EAEA,EAEA,mBAAA,CACA,KAAA,OAAA,OAAA,qBAAA,CAAA,CAAA,EACA,KAAA,UAAA,CACA,EAEA,gBAAA,CACA,KAAA,OAAA,OAAA,qBAAA,CAAA,CAAA,EACA,KAAA,gBACA,KAAA,UAAA,CAEA,EAEA,WAAA,CAAA,EAEA,aAAA,CACA,aAAA,QAAA,gBAAA,KAAA,WAAA,EACA,KAAA,QAAA,UAAA,GACA,KAAA,KAAA,EACA,KAAA,kBAAA,EAAA,EAAA,KAAA,IAAA,CACA,KAAA,QAAA,UAAA,EACA,CAAA,CACA,EAEA,eAAA,QACAqD,EAAA,KAAA,iBAAA,MAAAA,EAAA,gBACA,EAEA,YAAA,CACA,KAAA,kBAAA,EAAA,CACA,CACA,EAEA,OAAA,CACA,OAAA,CACA,eAAAC,EAAA,CACA,KAAA,YAAA,IAAAA,EAAA,WAAA,GACA,KAAA,gBAAAA,EAAA,WAAA,CAEA,EAEA,kBAAAA,EAAA,CAAA,EAEA,kBAAAA,EAAA,CACA,KAAA,OAAA,OAAA,sBAAA,CACA,GAAAA,EAAA,WACA,CAAA,CACA,EAEA,gBAAAA,EAAA,CACAA,EAAA,cAAA,KAAA,gBAAA,KACA,KAAA,gBAAA,WAAA,CACA,CACA,GAAAA,EAAA,aACA,WAAAA,EAAA,WACA,OAAA,UACA,YAAA,KAAA,gBAAA,EACA,CACA,EAAA,OAAA,KAAA,gBAAA,UAAA,EAEA,EAEA,mBAAAA,EAAA,CACAA,EAAA,cAAA,KAAA,gBAAA,IACAC,EAAA,KAAA,gBAAA,WAAA,CACA,GAAAD,EAAA,aACA,OAAAA,EAAA,MACA,CAAA,CAEA,EAEA,mBAAAA,EAAA,CACAA,EAAA,cAAA,KAAA,gBAAA,KACA,KAAA,gBAAA,WAAAE,EACA,KAAA,gBAAA,WACA,CACA,GAAAF,EAAA,YACA,CACA,EAEA,CACA,CACA,EAEA,UAAA,CACA,OAAA,KAAA,SACA,CAAA,MAAA,KAAA,eAAA,EAEA,CAAA,MAAA,KAAA,cAAA,CAEA,CACA"}