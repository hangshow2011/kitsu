{"version":3,"file":"AssetTypes-CoTz6agx.js","sources":["../../src/components/lists/AssetTypeList.vue","../../src/components/modals/EditAssetTypeModal.vue","../../src/components/pages/AssetTypes.vue"],"sourcesContent":["<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\">\n      <table class=\"datatable\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name\">\n              {{ $t('asset_types.fields.name') }}\n            </th>\n            <th scope=\"col\" class=\"task-types\">\n              {{ $t('asset_types.fields.task_types') }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\" v-if=\"entries.length > 0\">\n          <tr class=\"datatable-row\" v-for=\"entry in entries\" :key=\"entry.id\">\n            <td class=\"name\">\n              {{ entry.name }}\n            </td>\n            <td class=\"task-types\" v-if=\"(entry.task_types || []).length > 0\">\n              <span\n                :key=\"taskType.id\"\n                class=\"task-type-name flexrow-item\"\n                v-for=\"taskType in sortTaskTypes(entry.task_types)\"\n              >\n                <task-type-name :task-type=\"taskType\" v-if=\"taskType.id\" />\n              </span>\n            </td>\n            <td class=\"task-types\" v-else>\n              {{ $t('asset_types.include_all') }}\n            </td>\n            <row-actions-cell\n              :entry-id=\"entry.id\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @delete-clicked=\"$emit('delete-clicked', entry)\"\n            />\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\"> </table-info>\n\n    <p class=\"has-text-centered nb-asset-types\">\n      {{ entries.length }} {{ $tc('asset_types.number', entries.length) }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport { sortTaskTypes } from '@/lib/sorting'\n\nimport { mapGetters, mapActions } from 'vuex'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\n\nexport default {\n  name: 'asset-type-list',\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {}\n  },\n  components: {\n    TaskTypeName,\n    RowActionsCell,\n    TableInfo\n  },\n  computed: {\n    ...mapGetters(['taskTypeMap'])\n  },\n  methods: {\n    ...mapActions([]),\n\n    sortTaskTypes(taskTypeIds = []) {\n      const taskTypes = taskTypeIds.map(taskTypeId =>\n        this.taskTypeMap.get(taskTypeId)\n      )\n      return sortTaskTypes(taskTypes)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.datatable-body tr:first-child th,\n.datatable-body tr:first-child td {\n  border-top: 0;\n}\n\n.name {\n  width: 300px;\n  padding: 1em;\n}\n</style>\n","<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\" v-if=\"assetTypeToEdit && assetTypeToEdit.id\">\n          {{ $t('asset_types.edit_title') }} {{ assetTypeToEdit.name }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t('asset_types.new_asset_type') }}\n        </h1>\n\n        <form v-on:submit.prevent>\n          <text-field\n            ref=\"nameField\"\n            :label=\"$t('asset_types.fields.name')\"\n            :maxlength=\"30\"\n            v-model=\"form.name\"\n            @enter=\"runConfirmation\"\n            v-focus\n          />\n\n          <combobox-boolean\n            :label=\"$t('main.archived')\"\n            @enter=\"runConfirmation\"\n            v-model=\"form.archived\"\n            v-if=\"isEditing\"\n          />\n\n          <label class=\"label\">\n            {{ $t('asset_types.fields.task_types') }}\n          </label>\n          <div class=\"flexrow task-types mb1\">\n            <div\n              class=\"flexrow-item mb1\"\n              :key=\"taskTypeId\"\n              @click=\"removeTaskType(taskTypeId)\"\n              v-for=\"taskTypeId in form.task_types\"\n            >\n              <task-type-name\n                :task-type=\"taskTypeMap.get(taskTypeId)\"\n                :deletable=\"true\"\n                v-if=\"taskTypeId\"\n              />\n            </div>\n            <combobox\n              class=\"flexrow-item mb1\"\n              :options=\"availableTaskTypes\"\n              :with-margin=\"false\"\n              @input=\"\n                id => {\n                  taskTypeMap.get(id) && form.task_types.push(id)\n                }\n              \"\n              v-if=\"availableTaskTypes.length > 1\"\n            />\n          </div>\n        </form>\n\n        <modal-footer\n          :error-text=\"$t('asset_types.create_error')\"\n          :is-error=\"isError\"\n          :is-loading=\"isLoading\"\n          @confirm=\"runConfirmation\"\n          @cancel=\"$emit('cancel')\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport { sortByName } from '@/lib/sorting'\n\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxBoolean from '@/components/widgets/ComboboxBoolean.vue'\nimport ModalFooter from '@/components/modals/ModalFooter'\nimport TextField from '@/components/widgets/TextField'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\n\nexport default {\n  name: 'edit-asset-type-modal',\n  mixins: [modalMixin],\n  components: {\n    Combobox,\n    ComboboxBoolean,\n    TaskTypeName,\n    ModalFooter,\n    TextField\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    assetTypeToEdit: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      form: {\n        name: '',\n        task_types: []\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'taskTypes',\n      'taskTypeMap',\n      'assetTypes',\n      'assetTypeStatusOptions'\n    ]),\n\n    isEditing() {\n      return this.assetTypeToEdit && this.assetTypeToEdit.id\n    },\n\n    availableTaskTypes() {\n      const taskTypes = sortByName(\n        this.taskTypes.filter(taskType => {\n          return (\n            this.form.task_types.indexOf(taskType.id) === -1 &&\n            taskType.for_entity === 'Asset'\n          )\n        })\n      )\n      return [\n        {\n          name: '+ Task Type',\n          id: '-'\n        },\n        ...taskTypes\n      ].map(taskType => {\n        return {\n          label: taskType.name,\n          value: taskType.id\n        }\n      })\n    }\n  },\n\n  methods: {\n    ...mapActions(['loadTaskTypes']),\n\n    removeTaskType(idToRemove) {\n      const taskTypeIndex = this.form.task_types.indexOf(idToRemove)\n      if (taskTypeIndex >= 0) {\n        this.form.task_types.splice(taskTypeIndex, 1)\n      }\n    },\n\n    runConfirmation() {\n      this.$emit('confirm', this.form)\n    }\n  },\n\n  watch: {\n    active() {\n      if (this.active) {\n        setTimeout(() => {\n          this.$refs.nameField.focus()\n        }, 100)\n      }\n    },\n\n    assetTypeToEdit() {\n      if (this.assetTypeToEdit.id) {\n        const types = this.assetTypeToEdit.task_types || []\n        this.form = {\n          name: this.assetTypeToEdit.name,\n          task_types: [...types],\n          archived: String(this.assetTypeToEdit.archived === true)\n        }\n      } else {\n        this.form = {\n          name: '',\n          task_types: [],\n          archived: 'false'\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n\n.is-danger {\n  color: #ff3860;\n  font-style: italic;\n}\n\n.task-types {\n  flex-wrap: wrap;\n}\n</style>\n","<template>\n  <div class=\"asset-types page fixed-page\">\n    <list-page-header\n      :title=\"$t('asset_types.title')\"\n      :new-entry-label=\"$t('asset_types.new_asset_type')\"\n      :is-exportable=\"isActiveTab\"\n      @export-clicked=\"onExportClicked\"\n      @new-clicked=\"onNewClicked\"\n    />\n\n    <route-tabs\n      class=\"mt2\"\n      :active-tab=\"activeTab\"\n      :tabs=\"tabs\"\n      route-name=\"asset-types\"\n    />\n\n    <asset-type-list\n      class=\"asset-type-list\"\n      :entries=\"assetTypesList\"\n      :is-loading=\"loading.list\"\n      :is-error=\"errors.list\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n    />\n\n    <edit-asset-type-modal\n      :active=\"modals.edit\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :asset-type-to-edit=\"assetTypeToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditAssetType\"\n    />\n\n    <delete-modal\n      :active=\"modals.del\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText\"\n      :error-text=\"$t('asset_types.delete_error')\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeleteAssetType\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport stringHelpers from '@/lib/string'\n\nimport AssetTypeList from '@/components/lists/AssetTypeList'\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditAssetTypeModal from '@/components/modals/EditAssetTypeModal'\nimport ListPageHeader from '@/components/widgets/ListPageHeader'\nimport RouteTabs from '@/components/widgets/RouteTabs'\n\nexport default {\n  name: 'asset-types',\n\n  components: {\n    AssetTypeList,\n    DeleteModal,\n    EditAssetTypeModal,\n    ListPageHeader,\n    RouteTabs\n  },\n\n  data() {\n    return {\n      activeTab: 'active',\n      assetTypeToDelete: null,\n      assetTypeToEdit: {},\n      choices: [],\n      errors: {\n        del: false,\n        edit: false,\n        list: false\n      },\n      modals: {\n        del: false,\n        edit: false\n      },\n      loading: {\n        del: false,\n        edit: false,\n        list: false\n      },\n      tabs: [\n        {\n          name: 'active',\n          label: this.$t('main.active')\n        },\n        {\n          name: 'archived',\n          label: this.$t('main.archived')\n        }\n      ]\n    }\n  },\n\n  mounted() {\n    this.activeTab = this.$route.query.tab || 'active'\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypes',\n      'archivedAssetTypes',\n      'getAssetType',\n      'taskTypeMap'\n    ]),\n\n    isActiveTab() {\n      return this.activeTab === 'active'\n    },\n\n    assetTypesList() {\n      return this.isActiveTab ? this.assetTypes : this.archivedAssetTypes\n    },\n\n    deleteText() {\n      const assetType = this.assetTypeToDelete\n      if (assetType) {\n        return this.$t('asset_types.delete_text', { name: assetType.name })\n      } else {\n        return ''\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteAssetType',\n      'editAssetType',\n      'newAssetType',\n      'loadAssetTypes'\n    ]),\n\n    confirmEditAssetType(form) {\n      let action = 'newAssetType'\n      if (this.assetTypeToEdit && this.assetTypeToEdit.id) {\n        action = 'editAssetType'\n        form.id = this.assetTypeToEdit.id\n      }\n\n      this.loading.edit = true\n      this.errors.edit = false\n      this[action](form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    confirmDeleteAssetType() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteAssetType(this.assetTypeToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.del = true\n          this.loading.del = false\n        })\n    },\n\n    onExportClicked() {\n      const name = stringHelpers.slugify(this.$t('asset_types.title'))\n      const headers = [\n        this.$t('main.type'),\n        this.$t('asset_types.fields.name'),\n        this.$t('asset_types.fields.task_types')\n      ]\n      const entries = [headers].concat(\n        this.assetTypes.map(assetType => [\n          assetType.type,\n          assetType.name,\n          assetType.task_types.length\n            ? assetType.task_types\n                .map(taskTypeId => this.taskTypeMap.get(taskTypeId)?.name)\n                .join(', ')\n            : this.$t('asset_types.include_all')\n        ])\n      )\n      csv.buildCsvFile(name, entries)\n    },\n\n    onNewClicked() {\n      this.assetTypeToEdit = {}\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onEditClicked(assetType) {\n      this.assetTypeToEdit = assetType\n      this.errors.edit = false\n      this.modals.edit = true\n    },\n\n    onDeleteClicked(assetType) {\n      this.assetTypeToDelete = assetType\n      this.errors.del = false\n      this.modals.del = true\n    }\n  },\n\n  watch: {\n    $route() {\n      this.activeTab = this.$route.query.tab || 'active'\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('asset_types.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.asset-type-list {\n  margin-top: 0;\n}\n</style>\n"],"names":["_sfc_main","TaskTypeName","RowActionsCell","TableInfo","mapGetters","mapActions","taskTypeIds","taskTypes","taskTypeId","sortTaskTypes","modalMixin","Combobox","ComboboxBoolean","ModalFooter","TextField","sortByName","taskType","idToRemove","taskTypeIndex","types","AssetTypeList","DeleteModal","EditAssetTypeModal","ListPageHeader","RouteTabs","assetType","form","action","err","name","stringHelpers","entries","_a","csv"],"mappings":"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"}