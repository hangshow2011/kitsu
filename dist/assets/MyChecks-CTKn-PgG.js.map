{"version":3,"file":"MyChecks-CTKn-PgG.js","sources":["../../src/components/pages/MyChecks.vue"],"sourcesContent":["<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"todos page\">\n        <div class=\"flexrow\">\n          <combobox-production\n            class=\"flexrow-item\"\n            :label=\"$t('main.production')\"\n            :production-list=\"productionList\"\n            v-model=\"productionId\"\n            v-if=\"productionList.length > 0\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('shots.fields.episode')\"\n            :options=\"episodeOptions\"\n            v-model=\"episodeId\"\n            v-show=\"productionId\"\n            v-if=\"episodeOptions.length > 0\"\n          />\n\n          <combobox-task-type\n            class=\"flexrow-item selector\"\n            :label=\"$t('news.task_type')\"\n            :task-type-list=\"taskTypeList\"\n            v-model=\"taskTypeId\"\n            v-if=\"taskTypeList.length > 0\"\n          />\n\n          <combobox-status\n            class=\"flexrow-item selector\"\n            :label=\"$t('news.task_status')\"\n            :task-status-list=\"taskStatusList\"\n            v-model=\"taskStatusId\"\n          />\n\n          <div class=\"field flexrow-item selector small\">\n            <label class=\"label person-label\">\n              {{ $t('main.person') }}\n            </label>\n            <people-field :people=\"assignees\" :big=\"true\" v-model=\"person\" />\n          </div>\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('main.show')\"\n            :options=\"filterOptions\"\n            locale-key-prefix=\"tasks.\"\n            v-model=\"currentFilter\"\n          />\n\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('main.sorted_by')\"\n            :options=\"sortOptions\"\n            locale-key-prefix=\"tasks.fields.\"\n            v-model=\"currentSort\"\n          />\n        </div>\n\n        <div class=\"flexrow\">\n          <h1 class=\"title mt1 flexrow-item filler\">\n            {{ nbTasksToCheck }}\n            {{ $tc('my_checks.title', nbTasksToCheck) }}\n          </h1>\n          <button-simple\n            class=\"flexrow-item\"\n            @click=\"isPlaylist = true\"\n            :text=\"$t('tasks.build_playlist')\"\n          />\n        </div>\n\n        <todos-list\n          :tasks=\"sortedTasks\"\n          :is-loading=\"isLoading\"\n          :is-error=\"isLoadingError\"\n          :selection-grid=\"selectionGrid\"\n          :is-to-check=\"true\"\n          @task-selection-cleared=\"onTaskSelectionCleared\"\n          @task-selection-addition=\"onTaskSelectionAdded\"\n          @task-selection-removal=\"onTaskSelectionRemoved\"\n        />\n      </div>\n    </div>\n\n    <div class=\"column side-column\" v-if=\"nbSelectedTasks === 1\">\n      <task-info :task=\"selectedTasks.values().next().value\" />\n    </div>\n\n    <view-playlist-modal\n      :active=\"isPlaylist\"\n      :task-ids=\"sortedTasks.map(t => t.id)\"\n      @cancel=\"isPlaylist = false\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment-timezone'\nimport firstBy from 'thenby'\n\nimport { populateTask } from '@/lib/models'\nimport { sortByName, sortPeople } from '@/lib/sorting'\nimport { buildSelectionGrid } from '@/lib/selection'\nimport { parseDate } from '@/lib/time'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType'\nimport PeopleField from '@/components/widgets/PeopleField'\nimport TaskInfo from '@/components/sides/TaskInfo'\nimport TodosList from '@/components/lists/TodosList'\nimport ViewPlaylistModal from '@/components/modals/ViewPlaylistModal'\n\nexport default {\n  name: 'my-checks',\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    ComboboxProduction,\n    ComboboxStatus,\n    ComboboxTaskType,\n    PeopleField,\n    TaskInfo,\n    TodosList,\n    ViewPlaylistModal\n  },\n\n  data() {\n    return {\n      currentFilter: 'all_tasks',\n      currentSort: 'priority',\n      episodeId: '',\n      isLoading: false,\n      isLoadingError: false,\n      isPlaylist: false,\n      filterOptions: ['all_tasks', 'due_this_week'].map(name => ({\n        label: name,\n        value: name\n      })),\n      person: {},\n      productionId: '',\n      productionList: [],\n      selectionGrid: {},\n      sortOptions: [\n        'entity_name',\n        'priority',\n        'due_date',\n        'estimation',\n        'last_comment_date'\n      ].map(name => ({ label: name, value: name })),\n      taskStatusId: '',\n      taskTypeId: '',\n      taskStatusList: [],\n      taskTypeList: [],\n      tasksToCheck: []\n    }\n  },\n\n  mounted() {\n    this.isLoading = true\n    this.clearSelectedTasks()\n    this.loadTasksToCheck()\n      .then(tasks => {\n        if (tasks) {\n          tasks.forEach(populateTask)\n          this.buildSelectionGrid(tasks)\n          this.resetProductionList(tasks)\n          this.resetTaskTypeList(tasks)\n          this.resetTaskStatusList(tasks)\n          this.tasksToCheck = tasks\n          this.isLoading = false\n        }\n      })\n      .catch(err => {\n        console.error(err)\n      })\n  },\n\n  computed: {\n    ...mapGetters([\n      'nbSelectedTasks',\n      'personMap',\n      'productionMap',\n      'selectedTasks',\n      'taskStatusMap',\n      'taskTypeMap'\n    ]),\n\n    nbTasksToCheck() {\n      return this.sortedTasks.filter(task => {\n        return this.taskStatusMap.get(task.task_status_id).is_feedback_request\n      }).length\n    },\n\n    assignees() {\n      const assignees = []\n      const assigneesMap = {}\n      this.tasksToCheck.forEach(task => {\n        task.assignees.forEach(personId => {\n          if (!assigneesMap[personId]) {\n            assignees.push(this.personMap.get(personId))\n            assigneesMap[personId] = true\n          }\n        })\n      })\n      return sortPeople(assignees)\n    },\n\n    episodeOptions() {\n      const episodeOptions = []\n      const episodeMap = {}\n      if (!this.productionId) return []\n      const production = this.productionMap.get(this.productionId)\n      if (production.production_type !== 'tvshow') return []\n      this.tasksToCheck\n        .filter(t => t.project_id === this.productionId)\n        .forEach(task => {\n          if (\n            task.episode_id &&\n            !episodeMap[task.episode_id] &&\n            task.entity_type_name === 'Shot'\n          ) {\n            episodeMap[task.episode_id] = true\n            episodeOptions.push({\n              label: task.episode_name,\n              value: task.episode_id\n            })\n          }\n        })\n      return [\n        {\n          label: this.$t('main.all'),\n          value: 'all'\n        }\n      ].concat(\n        episodeOptions.sort((a, b) =>\n          a.label.localeCompare(b.label, undefined, {\n            numeric: true\n          })\n        )\n      )\n    },\n\n    filteredTasks() {\n      let tasks =\n        this.currentFilter === 'all_tasks'\n          ? [...this.tasksToCheck]\n          : this.tasksToCheck.filter(t => {\n              const dueDate = parseDate(t.due_date)\n              return moment().startOf('week').isSame(dueDate, 'week')\n            })\n      if (this.productionId !== '') {\n        tasks = tasks.filter(t => t.project_id === this.productionId)\n      }\n      if (this.taskTypeId !== '') {\n        tasks = tasks.filter(t => t.task_type_id === this.taskTypeId)\n      }\n      if (this.taskStatusId !== '') {\n        tasks = tasks.filter(t => t.task_status_id === this.taskStatusId)\n      }\n      if (this.person && this.person.id) {\n        tasks = tasks.filter(t => t.assignees.includes(this.person.id))\n      }\n      if (this.productionId && this.episodeId && this.episodeId !== 'all') {\n        tasks = tasks.filter(t => t.episode_id === this.episodeId)\n      }\n      return tasks\n    },\n\n    sortedTasks() {\n      const isName = this.currentSort === 'entity_name'\n      const isPriority = this.currentSort === 'priority'\n      const isDueDate = this.currentSort === 'due_date'\n      const tasks = this.filteredTasks\n      if (isName) {\n        return tasks.sort(\n          firstBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('full_entity_name')\n        )\n      } else if (isPriority) {\n        return tasks.sort(\n          firstBy('priority', -1)\n            .thenBy((a, b) => {\n              if (!a.due_date) return 1\n              else if (!b.due_date) return -1\n              else return a.due_date.localeCompare(b.due_date)\n            })\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else if (isDueDate) {\n        return tasks.sort(\n          firstBy((a, b) => {\n            if (!a.due_date) return 1\n            else if (!b.due_date) return -1\n            else return a.due_date.localeCompare(b.due_date)\n          })\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else {\n        return tasks.sort(\n          firstBy(this.currentSort, -1)\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'clearSelectedTasks',\n      'loadTasksToCheck',\n      'removeTodoSearch',\n      'saveTodoSearch',\n      'setTodosSearch'\n    ]),\n\n    buildSelectionGrid(tasks) {\n      this.selectionGrid = buildSelectionGrid(tasks.length, 1)\n    },\n\n    resetProductionList(tasks = []) {\n      const productionIds = {}\n      const productionList = []\n      tasks.forEach(task => {\n        if (!productionIds[task.project_id]) {\n          productionIds[task.project_id] = true\n          productionList.push(this.productionMap.get(task.project_id))\n        }\n      })\n      this.productionList = [\n        {\n          id: '',\n          name: this.$t('main.all')\n        }\n      ].concat(sortByName(productionList))\n    },\n\n    resetTaskTypeList(tasks) {\n      const taskTypeIds = {}\n      const taskTypeList = []\n      tasks.forEach(task => {\n        if (!taskTypeIds[task.task_type_id]) {\n          taskTypeIds[task.task_type_id] = true\n          taskTypeList.push(this.taskTypeMap.get(task.task_type_id))\n        }\n      })\n      this.taskTypeList = [\n        {\n          id: '',\n          color: '#999',\n          name: this.$t('news.all')\n        }\n      ].concat(sortByName(taskTypeList))\n    },\n\n    resetTaskStatusList(tasks) {\n      const taskStatusIds = {}\n      const taskStatusList = []\n      tasks.forEach(task => {\n        if (!taskStatusIds[task.task_status_id]) {\n          taskStatusIds[task.task_status_id] = true\n          taskStatusList.push(this.taskStatusMap.get(task.task_status_id))\n        }\n      })\n      this.taskStatusList = [\n        {\n          id: '',\n          color: '#999',\n          name: this.$t('news.all'),\n          short_name: this.$t('news.all')\n        }\n      ].concat(sortByName(taskStatusList))\n    },\n\n    onTaskSelectionCleared() {\n      this.buildSelectionGrid(this.sortedTasks)\n    },\n\n    onTaskSelectionAdded(selection) {\n      this.selectionGrid[selection.x][selection.y] = true\n    },\n\n    onTaskSelectionRemoved(selection) {\n      this.selectionGrid[selection.x][selection.y] = false\n    }\n  },\n\n  socket: {\n    events: {\n      'task:assign'(eventData) {},\n\n      'task:unassign'(eventData) {}\n    }\n  },\n\n  watch: {\n    productionId() {\n      this.episodeId = ''\n    },\n\n    nbSelectedTasks() {\n      if (this.nbSelectedTasks === 0) {\n        this.buildSelectionGrid(this.sortedTasks)\n      }\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('tasks.my_checks')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.data-list {\n  margin-top: 0;\n}\n\n.data-list {\n  margin-top: 0;\n}\n\n.todos {\n  display: flex;\n  flex-direction: column;\n}\n\n.columns {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n}\n\n.column {\n  overflow-y: auto;\n  padding: 0;\n}\n\n.push-right {\n  flex: 1;\n  text-align: right;\n}\n\n.field {\n  margin-bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","ButtonSimple","Combobox","ComboboxProduction","ComboboxStatus","ComboboxTaskType","PeopleField","TaskInfo","TodosList","ViewPlaylistModal","name","tasks","populateTask","err","mapGetters","task","assignees","assigneesMap","personId","sortPeople","episodeOptions","episodeMap","t","a","b","dueDate","parseDate","moment","isName","isPriority","isDueDate","firstBy","mapActions","buildSelectionGrid","productionIds","productionList","sortByName","taskTypeIds","taskTypeList","taskStatusIds","taskStatusList","selection","eventData"],"mappings":"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"}